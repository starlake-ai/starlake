<%@ val attributes: List[Map[String, Any]] %>
<%@ val newAttributes: List[Map[String, Any]] %>
<%@ val alterAttributes: List[Map[String, Any]] %>
<%@ val alterCommentAttributes: List[Map[String, Any]] %>
<%@ val alterRequiredAttributes: List[Map[String, Any]] %>
<%@ val alterDataTypeAttributes: List[Map[String, Any]] %>
<%@ val droppedAttributes: List[Map[String, Any]] %>
<%@ val domainName: String %>
<%@ val domainComment: String = ""  %>
<%@ val tableName: String %>
<%@ val schemaComment: String = ""  %>
<%@ val partitions: List[String] %>
<%@ val clustered: List[String] %>
<%@ val primaryKeys: List[String] %>
<%
    val isPrimaryKeyDefined: Boolean  = primaryKeys.nonEmpty
    val isPartitionDefined: Boolean = partitions.nonEmpty

    def attributeDDL(attr:Map[String, Any]):String = {
        val required = if (attr("required").toString.toBoolean) "NOT NULL" else ""
        val attrName = attr("name")
        val attrType = attr("type")

        attr("nodeType") match {
            case "leaf" =>
                s"""$attrName $attrType $required"""
            case "node" =>
              val fields = attr("fields").asInstanceOf[List[Map[String, Any]]]
                val ddlFields = fields.map(field => attributeDDL(field)).mkString(",")
                s"""$attrName $attrType<$ddlFields> $required"""
            case _ => throw new Exception("Should never happen")
        }
    }
%>


#if (isPrimaryKeyDefined)
    #for (primaryKey <- primaryKeys)
        ${primaryKey}
    #end
#end

#if (isPartitionDefined)
    #for (partition <- partitions)
        ${partition}
    #end
#end

CREATE TABLE ${domainName}.${tableName} (
#{
    val attributesCount = attributes.length
    var attributesIndex = 1
}#
#for (attribute <- attributes)
    #{
        val attributeComment = attribute("comment")
        val attributeSuffix = if (attributesIndex == attributesCount) "" else ","
        attributesIndex = attributesIndex + 1
    }#
    ${attributeDDL(attribute)} options(description="${attributeComment}")${attributeSuffix}
#end
)
options(description="${domainComment}");
