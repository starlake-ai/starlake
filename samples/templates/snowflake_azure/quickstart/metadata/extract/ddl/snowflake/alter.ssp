<%@ val attributes: List[Map[String, Any]] %>
<%@ val newAttributes: List[Map[String, Any]] %>
<%@ val alterAttributes: List[Map[String, Any]] %>
<%@ val alterCommentAttributes: List[Map[String, Any]] %>
<%@ val alterRequiredAttributes: List[Map[String, Any]] %>
<%@ val alterDataTypeAttributes: List[Map[String, Any]] %>
<%@ val droppedAttributes: List[Map[String, Any]] %>
<%@ val domain: String %>
<%@ val domainComment: String = ""  %>
<%@ val schema: String %>
<%@ val schemaComment: String = ""  %>
<%@ val partitions: List[String] %>
<%@ val clustered: List[String] %>
<%@ val primaryKeys: List[String] %>


<%
    def attributeDDL(attr: Map[String, Any]): String = {
        val attrName = attr("name")
        val attrType = attr("type")
        val attrComment = attr("comment")
        val notNull = if (attr("required").toString.toBoolean) "NOT NULL" else ""
//        val attrLabels = labels(attr("labels").asInstanceOf[Map[String, String]])
//        val withTags = if (attrLabels == "()") "" else s"WITH TAG $attrLabels"

        attr("nodeType") match {
            case "leaf" =>
//                s"""$attrName $attrType  $notNull comment '$attrComment' $withTags"""
                s"""$attrName $attrType  $notNull comment '$attrComment'"""
            case "node" =>
            println(s"$attrName created as VARCHAR")
//            s"""$attrName VARCHAR  $notNull comment '$attrComment' $withTags"""
            s"""$attrName VARCHAR  $notNull comment '$attrComment'"""

        }
    }

%>

#{
    var attributesCount = newAttributes.length
    var attributesIndex = 1
}#

#if (attributesCount > 0)
ALTER TABLE ${domain}.${schema}
#for (attribute <- newAttributes)
    #{
        val attributeComment = attribute("comment")
        val attributeSuffix = if (attributesIndex == attributesCount) "" else ","
        attributesIndex = attributesIndex + 1
    }#
    ADD COLUMN ${attributeDDL(attribute)} options(description="${attributeComment}")${attributeSuffix}
#end
)
options(description="${domainComment}");
#end

ALTER TABLE ${domain}.${schema}

#{
    attributesCount = droppedAttributes.length
    attributesIndex = 1
}#

#if (attributesCount > 0)
#for (attribute <- droppedAttributes)
    #{
        val attributeSuffix = if (attributesIndex == attributesCount) "" else ","
        attributesIndex = attributesIndex + 1
    }#
    DROP COLUMN ${attribute("name")}${attributeSuffix}
#end
)
#end


#{
    attributesCount = alterCommentAttributes.length
    attributesIndex = 1
}#

#if (attributesCount > 0)
#{
    attributesCount = alterCommentAttributes.length
    attributesIndex = 1
}#

#for (attribute <- alterCommentAttributes)
    #{
        val attributeComment = attribute("comment")
        val attributeSuffix = if (attributesIndex == attributesCount) "" else ","
        attributesIndex = attributesIndex + 1
    }#
    ALTER COLUMN ${attribute("name")} SET OPTIONS(description = ${attributeComment})${attributeSuffix}
#end
)
#end

#{
    attributesCount = alterRequiredAttributes.length
    attributesIndex = 1
}#

#if (attributesCount > 0)
#{
    attributesCount = alterRequiredAttributes.length
    attributesIndex = 1
}#
#for (attribute <- alterRequiredAttributes)
    #{
        val attributeRequired = attribute("required").toString.toBoolean
        assert(!attributeRequired)
        val attributeSuffix = if (attributesIndex == attributesCount) "" else ","
        attributesIndex = attributesIndex + 1
    }#
    ALTER COLUMN ${attribute("name")} "DROP NOT NULL"${attributeSuffix}
#end
)
#end

#{
    attributesCount = alterDataTypeAttributes.length
    attributesIndex = 1
}#
#if (attributesCount > 0)
#{
    attributesCount = alterDataTypeAttributes.length
    attributesIndex = 1
}#
#for (attribute <- alterDataTypeAttributes)
    #{
        val attributeType = attribute("type")
        val attributeSuffix = if (attributesIndex == attributesCount) "" else ","
        attributesIndex = attributesIndex + 1
    }#
    ALTER COLUMN ${attribute("name")} SET DATA TYPE ${attributeType}${attributeSuffix}
#end
)
#end
