<%@ val attributes: List[Map[String, Any]] %>
<%@ val newAttributes: List[Map[String, Any]] %>
<%@ val alterAttributes: List[Map[String, Any]] %>
<%@ val alterCommentAttributes: List[Map[String, Any]] %>
<%@ val alterRequiredAttributes: List[Map[String, Any]] %>
<%@ val alterDataTypeAttributes: List[Map[String, Any]] %>
<%@ val droppedAttributes: List[Map[String, Any]] %>
<%@ val domain: String %>
<%@ val domainComment: String = ""  %>
<%@ val schema: String %>
<%@ val schemaComment: String = ""  %>
<%@ val partitions: List[String] %>
<%@ val clustered: List[String] %>
<%@ val primaryKeys: List[String] %>


<%
    def attributeDDL(attr:Map[String, Any]):String = {
    val required = if (attr("required").toString.toBoolean) "NOT NULL" else ""
    val attrName = attr("name")
    val attrType = attr("type")

    attr("nodeType") match {
    case "leaf" =>
    s"""$attrName $attrType $required"""
    case "node" =>
    val fields = attr("fields").asInstanceOf[List[Map[String, Any]]]
    val ddlFields = fields.map(field => attributeDDL(field)).mkString(",")
    s"""$attrName $attrType<$ddlFields> $required"""
    case _ => throw new Exception("Should never happen")
    }
    }
%>


ALTER TABLE ${domain}.${schema}
#{
    val attributesCount = attributes.length
    var attributesIndex = 1
}#
#for (attribute <- newAttributes)
    #{
        val attributeComment = attribute("comment")
        val attributeSuffix = if (attributesIndex == attributesCount) "" else ","
        attributesIndex = attributesIndex + 1
    }#
    ADD COLUMN IF NOT EXISTS ${attributeDDL(attribute)} options(description="${attributeComment}")${attributeSuffix}
#end
)
options(description="${domainComment}");

ALTER TABLE ${domain}.${schema}
#{
    val attributesCount = attributes.length
    var attributesIndex = 1
}#

#for (attribute <- droppedAttributes)
    #{
        val attributeSuffix = if (attributesIndex == attributesCount) "" else ","
        attributesIndex = attributesIndex + 1
    }#
    DROP COLUMN IF EXISTS ${attribute("name")}${attributeSuffix}
#end
)

#for (attribute <- alterCommentAttributes)
    #{
        val attributeComment = attribute("comment")
        val attributeSuffix = if (attributesIndex == attributesCount) "" else ","
        attributesIndex = attributesIndex + 1
    }#
    ALTER COLUMN IF EXISTS ${attribute("name")} SET OPTIONS(description = ${attributeComment})${attributeSuffix}
#end
)

#for (attribute <- alterRequiredAttributes)
    #{
        val attributeRequired = attribute("required").toString.toBoolean
        assert(!attributeRequired)
        val attributeSuffix = if (attributesIndex == attributesCount) "" else ","
        attributesIndex = attributesIndex + 1
    }#
    ALTER COLUMN IF EXISTS ${attribute("name")} "DROP NOT NULL"${attributeSuffix}
#end
)

#for (attribute <- alterDataTypeAttributes)
    #{
        val attributeType = attribute("type")
        val attributeSuffix = if (attributesIndex == attributesCount) "" else ","
        attributesIndex = attributesIndex + 1
    }#
    ALTER COLUMN IF EXISTS ${attribute("name")} SET DATA TYPE ${attributeType}${attributeSuffix}
#end
)
