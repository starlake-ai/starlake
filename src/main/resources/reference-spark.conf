spark {
  serializer = "org.apache.spark.serializer.KryoSerializer"
  kryo.registrator = "ai.starlake.config.KryoSerialization"
  #  sql.hive.convertMetastoreParquet = false
  #  yarn.principal = "invalid"
  #  yarn.keytab = "invalid"
  #  yarn.principal = ${?SPARK_YARN_PRINCIPAL}
  #  yarn.keytab = ${?SPARK_YARN_KEYTAB}
  debug.maxToStringFields = 100
  master = "local[*]"
  #  sql.catalogImplementation="hive"
  #  sql.catalogImplementation="in-memory"
  sql.parquet.int96RebaseModeInWrite = "CORRECTED"
  sql.parquet.datetimeRebaseModeInWrite = "CORRECTED"
  sql.streaming.checkpointLocation = "/tmp"
  sql.sources.partitionOverwriteMode = "STATIC"
  sql.sources.partitionOverwriteMode = ${?SL_SPARK_SQL_SOURCES_PARTITION_OVERWRITE_MODE}
  datasource.bigquery {
    viewsEnabled = "true"
    viewsEnabled = ${?SL_SPARK_BIGQUERY_VIEWS_ENABLED}
    materializationProject = ${?SL_SPARK_BIGQUERY_MATERIALIZATION_PROJECT}
    #materializationDataset = "materialization"
    materializationDataset = ${?SL_SPARK_BIGQUERY_MATERIALIZATION_DATASET}
    # materializationExpirationTimeInMinutes (DEFAULT_MATERIALIZATION_EXPRIRATION_TIME_IN_MINUTES = 24 * 60)
    readDataFormat = "avro"
    readDataFormat = ${?SL_SPARK_BIGQUERY_READ_DATA_FORMAT}
  }
  pyFiles = ""
  pyFiles = ${?SL_SPARK_PY_FILES}
}

