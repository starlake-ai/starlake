
jdbcEngines {
  spark {
    strategyBuilder = "ai.starlake.job.strategies.SparkSQLStrategiesBuilder"
    canMerge = true
    supportsJson = true
    canUpdateFrom = false
    viewPrefix = ""
    preactions = ""
    quote = "`"
    tables = {
      extract {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              DOMAIN STRING NOT NULL,
                              SCHEMA STRING NOT NULL,
                              LAST_TS TIMESTAMP,
                              LAST_DATE DATE,
                              LAST_LONG INTEGER,
                              LAST_DECIMAL DECIMAL,
                              START_TS TIMESTAMP NOT NULL,
                              END_TS TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MODE STRING NOT NULL,
                              COUNT BIGINT NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              MESSAGE STRING NOT NULL,
                              STEP STRING NOT NULL
                             ) USING {{writeFormat}}
    """
      },
      audit {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{paths}}' AS PATHS,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            {{success}} AS SUCCESS,
            {{count}} AS COUNT,
            {{countAccepted}} AS COUNTACCEPTED,
            {{countRejected}} AS COUNTREJECTED,
            TIMESTAMP('{{timestamp}}') AS TIMESTAMP,
            {{duration}} AS DURATION,
            '{{message}}' AS MESSAGE,
            '{{step}}' AS STEP,
            '{{database}}' AS DATABASE,
            '{{tenant}}' AS TENANT
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID STRING NOT NULL,
                              PATHS STRING NOT NULL,
                              DOMAIN STRING NOT NULL,
                              SCHEMA STRING NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              COUNT BIGINT NOT NULL,
                              COUNTACCEPTED BIGINT NOT NULL,
                              COUNTREJECTED BIGINT NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MESSAGE STRING NOT NULL,
                              STEP STRING NOT NULL,
                              DATABASE STRING,
                              TENANT STRING
                             ) USING {{writeFormat}}
    """
      },
      expectations {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{database}}' AS DATABASE,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            TIMESTAMP('{{timestamp}}') AS TIMESTAMP,
            '{{name}}' AS NAME,
            '{{params}}' AS PARAMS,
            '{{sql}}' AS SQL,
            {{count}} AS COUNT,
            '{{exception}}' AS EXCEPTION,
            {{success}} AS SUCCESS
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                            JOBID STRING NOT NULL,
                            DATABASE STRING NULL,
                            DOMAIN STRING NOT NULL,
                            SCHEMA STRING NOT NULL,
                            TIMESTAMP TIMESTAMP NOT NULL,
                            NAME STRING NOT NULL,
                            PARAMS STRING NOT NULL,
                            SQL STRING NOT NULL,
                            COUNT BIGINT NOT NULL,
                            EXCEPTION STRING NOT NULL,
                            SUCCESS BOOLEAN NOT NULL
                          ) USING {{writeFormat}}
        """
      },
      rejected {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID STRING NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DOMAIN STRING NOT NULL,
                              SCHEMA STRING NOT NULL,
                              ERROR STRING NOT NULL,
                              PATH STRING NOT NULL
                             ) USING {{writeFormat}}
    """
      },
      frequencies {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE STRING NOT NULL,
            CATEGORY STRING,
            COUNT BIGINT NOT NULL,
            FREQUENCY DOUBLE,
            JOBID STRING NOT NULL,
            DOMAIN STRING NOT NULL,
            SCHEMA STRING NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        ) USING {{writeFormat}}
        """
      },
      continuous {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE STRING NOT NULL,
            MIN DOUBLE,
            MAX DOUBLE,
            MEAN DOUBLE,
            MISSINGVALUES BIGINT,
            VARIANCE DOUBLE,
            STANDARDDEV DOUBLE,
            SUM DOUBLE,
            SKEWNESS DOUBLE,
            KURTOSIS DOUBLE,
            PERCENTILE25 DOUBLE,
            MEDIAN DOUBLE,
            PERCENTILE75 DOUBLE,
            COMETMETRIC STRING NOT NULL,
            JOBID STRING NOT NULL,
            DOMAIN STRING NOT NULL,
            SCHEMA STRING NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        ) USING {{writeFormat}}
        """
      },
      discrete {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE STRING NOT NULL,
            COUNTDISTINCT BIGINT,
            MISSINGVALUESDISCRETE BIGINT,
            COMETMETRIC STRING NOT NULL,
            JOBID STRING NOT NULL,
            DOMAIN STRING NOT NULL,
            SCHEMA STRING NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        ) USING {{writeFormat}}
        """
      }
    }
  }
  bigquery {
    strategyBuilder = "ai.starlake.job.strategies.BigQueryStrategiesBuilder"
    canMerge = true
    preactions = ""
    supportsJson = true
    viewPrefix = ""
    quote = "`"
    tables = {
      extract {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              DOMAIN STRING NOT NULL,
                              SCHEMA STRING NOT NULL,
                              LAST_TS TIMESTAMP,
                              LAST_DATE DATE,
                              LAST_LONG INTEGER,
                              LAST_DECIMAL DECIMAL,
                              START_TS TIMESTAMP NOT NULL,
                              END_TS TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MODE STRING NOT NULL,
                              COUNT BIGINT NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              MESSAGE STRING NOT NULL,
                              STEP STRING NOT NULL
                             )
    """
      },
      audit {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{paths}}' AS PATHS,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            {{success}} AS SUCCESS,
            {{count}} AS COUNT,
            {{countAccepted}} AS COUNTACCEPTED,
            {{countRejected}} AS COUNTREJECTED,
            TIMESTAMP('{{timestamp}}') AS TIMESTAMP,
            {{duration}} AS DURATION,
            '{{message}}' AS MESSAGE,
            '{{step}}' AS STEP,
            '{{database}}' AS DATABASE,
            '{{tenant}}' AS TENANT
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID STRING NOT NULL,
                              PATHS STRING NOT NULL,
                              DOMAIN STRING NOT NULL,
                              SCHEMA STRING NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              COUNT BIGINT NOT NULL,
                              COUNTACCEPTED BIGINT NOT NULL,
                              COUNTREJECTED BIGINT NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MESSAGE STRING NOT NULL,
                              STEP STRING NOT NULL,
                              DATABASE STRING NULL,
                              TENANT STRING NULL
                             )
    """
      },
      expectations {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{database}}' AS DATABASE,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            TIMESTAMP('{{timestamp}}') AS TIMESTAMP,
            '{{name}}' AS NAME,
            '{{params}}' AS PARAMS,
            '{{sql}}' AS SQL,
            {{count}} AS COUNT,
            '{{exception}}' AS EXCEPTION,
            {{success}} AS SUCCESS
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                            JOBID STRING NOT NULL,
                            DATABASE STRING NULL,
                            DOMAIN STRING NOT NULL,
                            SCHEMA STRING NOT NULL,
                            TIMESTAMP TIMESTAMP NOT NULL,
                            NAME STRING NOT NULL,
                            PARAMS STRING NOT NULL,
                            SQL STRING NOT NULL,
                            COUNT BIGINT NOT NULL,
                            EXCEPTION STRING NOT NULL,
                            SUCCESS BOOLEAN NOT NULL
                          )
        """
      },
      rejected {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID STRING NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DOMAIN STRING NOT NULL,
                              SCHEMA STRING NOT NULL,
                              ERROR STRING NOT NULL,
                              PATH STRING NOT NULL
                             )
    """
      },
      frequencies {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE STRING NOT NULL,
            CATEGORY STRING NOT NULL,
            COUNT BIGINT NOT NULL,
            FREQUENCY DOUBLE PRECISION NULL,
            JOBID STRING NOT NULL,
            DOMAIN STRING NOT NULL,
            SCHEMA STRING NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      continuous {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE STRING NOT NULL,
            MIN DOUBLE PRECISION NULL,
            MAX DOUBLE PRECISION NULL,
            MEAN DOUBLE PRECISION NULL,
            MISSINGVALUES BIGINT NULL,
            VARIANCE DOUBLE PRECISION NULL,
            STANDARDDEV DOUBLE PRECISION NULL,
            SUM DOUBLE PRECISION NULL,
            SKEWNESS DOUBLE PRECISION NULL,
            KURTOSIS DOUBLE PRECISION NULL,
            PERCENTILE25 DOUBLE PRECISION NULL,
            MEDIAN DOUBLE PRECISION NULL,
            PERCENTILE75 DOUBLE PRECISION NULL,
            COMETMETRIC STRING NOT NULL,
            JOBID STRING NOT NULL,
            DOMAIN STRING NOT NULL,
            SCHEMA STRING NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      discrete {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE STRING NOT NULL,
            COUNTDISTINCT BIGINT NULL,
            MISSINGVALUESDISCRETE BIGINT NULL,
            COMETMETRIC STRING NOT NULL,
            JOBID STRING NOT NULL,
            DOMAIN STRING NOT NULL,
            SCHEMA STRING NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      }
    }
  }
  h2 {
    strategyBuilder = "ai.starlake.job.strategies.JdbcStrategiesBuilder"
    canMerge = true
    preactions = ""
    supportsJson = false
    viewPrefix = ""

    quote = ""
    tables = {
      extract {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              DOMAIN VARCHAR NOT NULL,
                              SCHEMA VARCHAR NOT NULL,
                              LAST_TS TIMESTAMP,
                              LAST_DATE DATE,
                              LAST_LONG INTEGER,
                              LAST_DECIMAL DECIMAL,
                              START_TS TIMESTAMP NOT NULL,
                              END_TS TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MODE VARCHAR NOT NULL,
                              COUNT BIGINT NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              MESSAGE VARCHAR NOT NULL,
                              STEP VARCHAR NOT NULL
                             )
    """
      },
      audit {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{paths}}' AS PATHS,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            {{success}} AS SUCCESS,
            {{count}} AS COUNT,
            {{countAccepted}} AS COUNTACCEPTED,
            {{countRejected}} AS COUNTREJECTED,
            '{{timestamp}}' AS TIMESTAMP,
            {{duration}} AS DURATION,
            '{{message}}' AS MESSAGE,
            '{{step}}' AS STEP,
            '{{database}}' AS DATABASE,
            '{{tenant}}' AS TENANT
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID VARCHAR NOT NULL,
                              PATHS VARCHAR NOT NULL,
                              DOMAIN VARCHAR NOT NULL,
                              SCHEMA VARCHAR NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              COUNT BIGINT NOT NULL,
                              COUNTACCEPTED BIGINT NOT NULL,
                              COUNTREJECTED BIGINT NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MESSAGE VARCHAR NOT NULL,
                              STEP VARCHAR NOT NULL,
                              DATABASE VARCHAR,
                              TENANT VARCHAR
                             )
    """
      },
      expectations {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{database}}' AS DATABASE,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            '{{timestamp}}' AS TIMESTAMP,
            '{{name}}' AS NAME,
            '{{params}}' AS PARAMS,
            '{{sql}}' AS SQL,
            {{count}} AS COUNT,
            '{{exception}}' AS EXCEPTION,
            {{success}} AS SUCCESS
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                            JOBID VARCHAR NOT NULL,
                            DATABASE VARCHAR,
                            DOMAIN VARCHAR NOT NULL,
                            SCHEMA VARCHAR NOT NULL,
                            TIMESTAMP TIMESTAMP NOT NULL,
                            NAME VARCHAR NOT NULL,
                            PARAMS VARCHAR NOT NULL,
                            SQL VARCHAR NOT NULL,
                            COUNT BIGINT NOT NULL,
                            EXCEPTION VARCHAR NOT NULL,
                            SUCCESS BOOLEAN NOT NULL
                          )
        """
      },
      rejected {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID VARCHAR NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DOMAIN VARCHAR NOT NULL,
                              SCHEMA VARCHAR NOT NULL,
                              ERROR VARCHAR NOT NULL,
                              PATH VARCHAR NOT NULL
                             )
    """
      },
      frequencies {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE VARCHAR NOT NULL,
            CATEGORY VARCHAR NOT NULL,
            COUNT BIGINT NOT NULL,
            FREQUENCY DOUBLE PRECISION NULL,
            JOBID VARCHAR NOT NULL,
            DOMAIN VARCHAR NOT NULL,
            SCHEMA VARCHAR NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      continuous {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE VARCHAR NOT NULL,
            MIN DOUBLE PRECISION NULL,
            MAX DOUBLE PRECISION NULL,
            MEAN DOUBLE PRECISION NULL,
            MISSINGVALUES BIGINT NULL,
            VARIANCE DOUBLE PRECISION NULL,
            STANDARDDEV DOUBLE PRECISION NULL,
            SUM DOUBLE PRECISION NULL,
            SKEWNESS DOUBLE PRECISION NULL,
            KURTOSIS DOUBLE PRECISION NULL,
            PERCENTILE25 DOUBLE PRECISION NULL,
            MEDIAN DOUBLE PRECISION NULL,
            PERCENTILE75 DOUBLE PRECISION NULL,
            COMETMETRIC VARCHAR NOT NULL,
            JOBID VARCHAR NOT NULL,
            DOMAIN VARCHAR NOT NULL,
            SCHEMA VARCHAR NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      discrete {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE VARCHAR NOT NULL,
            COUNTDISTINCT BIGINT NULL,
            MISSINGVALUESDISCRETE BIGINT NULL,
            COMETMETRIC VARCHAR NOT NULL,
            JOBID VARCHAR NOT NULL,
            DOMAIN VARCHAR NOT NULL,
            SCHEMA VARCHAR NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      }
    }
  }
  snowflake {
    strategyBuilder = "ai.starlake.job.strategies.JdbcStrategiesBuilder"
    canMerge = true
    preactions = "USE SCHEMA {{schema}};"
    supportsJson = false
    viewPrefix = ""

    quote = ""
    tables = {
      extract {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              DOMAIN VARCHAR NOT NULL,
                              SCHEMA VARCHAR NOT NULL,
                              LAST_TS TIMESTAMP,
                              LAST_DATE DATE,
                              LAST_LONG NUMERIC,
                              LAST_DECIMAL DECIMAL,
                              START_TS TIMESTAMP NOT NULL,
                              END_TS TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MODE VARCHAR NOT NULL,
                              COUNT BIGINT NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              MESSAGE VARCHAR NOT NULL,
                              STEP VARCHAR NOT NULL
                             )
    """
      },
      audit {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{paths}}' AS PATHS,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            {{success}} AS SUCCESS,
            {{count}} AS COUNT,
            {{countAccepted}} AS COUNTACCEPTED,
            {{countRejected}} AS COUNTREJECTED,
            TO_TIMESTAMP('{{timestamp}}') AS TIMESTAMP,
            {{duration}} AS DURATION,
            '{{message}}' AS MESSAGE,
            '{{step}}' AS STEP,
            '{{database}}' AS DATABASE,
            '{{tenant}}' AS TENANT
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID VARCHAR NOT NULL,
                              PATHS TEXT NOT NULL,
                              DOMAIN VARCHAR NOT NULL,
                              SCHEMA VARCHAR NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              COUNT BIGINT NOT NULL,
                              COUNTACCEPTED BIGINT NOT NULL,
                              COUNTREJECTED BIGINT NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MESSAGE VARCHAR NOT NULL,
                              STEP VARCHAR NOT NULL,
                              DATABASE VARCHAR,
                              TENANT VARCHAR
                             )
    """
      },
      expectations {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{database}}' AS DATABASE,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            TO_TIMESTAMP('{{timestamp}}') AS TIMESTAMP,
            '{{name}}' AS NAME,
            '{{params}}' AS PARAMS,
            '{{sql}}' AS SQL,
            {{count}} AS COUNT,
            '{{exception}}' AS EXCEPTION,
            {{success}} AS SUCCESS
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                            JOBID VARCHAR NOT NULL,
                            DATABASE VARCHAR,
                            DOMAIN VARCHAR NOT NULL,
                            SCHEMA VARCHAR NOT NULL,
                            TIMESTAMP TIMESTAMP NOT NULL,
                            NAME VARCHAR NOT NULL,
                            PARAMS VARCHAR NOT NULL,
                            SQL VARCHAR NOT NULL,
                            COUNT BIGINT NOT NULL,
                            EXCEPTION VARCHAR NOT NULL,
                            SUCCESS BOOLEAN NOT NULL
                          )
        """
      },
      rejected {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID VARCHAR NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DOMAIN VARCHAR NOT NULL,
                              SCHEMA VARCHAR NOT NULL,
                              ERROR TEXT NOT NULL,
                              PATH TEXT NOT NULL
                             )
    """
      },
      frequencies {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE VARCHAR NOT NULL,
            CATEGORY VARCHAR NOT NULL,
            COUNT BIGINT NOT NULL,
            FREQUENCY DOUBLE PRECISION NULL,
            JOBID VARCHAR NOT NULL,
            DOMAIN VARCHAR NOT NULL,
            SCHEMA VARCHAR NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      continuous {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE VARCHAR NOT NULL,
            MIN DOUBLE PRECISION NULL,
            MAX DOUBLE PRECISION NULL,
            MEAN DOUBLE PRECISION NULL,
            MISSINGVALUES BIGINT NULL,
            VARIANCE DOUBLE PRECISION NULL,
            STANDARDDEV DOUBLE PRECISION NULL,
            SUM DOUBLE PRECISION NULL,
            SKEWNESS DOUBLE PRECISION NULL,
            KURTOSIS DOUBLE PRECISION NULL,
            PERCENTILE25 DOUBLE PRECISION NULL,
            MEDIAN DOUBLE PRECISION NULL,
            PERCENTILE75 DOUBLE PRECISION NULL,
            COMETMETRIC VARCHAR NOT NULL,
            JOBID VARCHAR NOT NULL,
            DOMAIN VARCHAR NOT NULL,
            SCHEMA VARCHAR NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      discrete {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE VARCHAR NOT NULL,
            COUNTDISTINCT BIGINT NULL,
            MISSINGVALUESDISCRETE BIGINT NULL,
            COMETMETRIC VARCHAR NOT NULL,
            JOBID VARCHAR NOT NULL,
            DOMAIN VARCHAR NOT NULL,
            SCHEMA VARCHAR NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      }
    }
  }
  duckdb {
    strategyBuilder = "ai.starlake.job.strategies.JdbcStrategiesBuilder"
    canMerge = true
    preactions = "USE {{schema}};"
    supportsJson = false
    viewPrefix = ""

    quote = ""
    tables = {
      extract {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              DOMAIN VARCHAR NOT NULL,
                              SCHEMA VARCHAR NOT NULL,
                              LAST_TS TIMESTAMP,
                              LAST_DATE DATE,
                              LAST_LONG LONG,
                              LAST_DECIMAL DECIMAL,
                              START_TS TIMESTAMP NOT NULL,
                              END_TS TIMESTAMP NOT NULL,
                              DURATION LONG NOT NULL,
                              MODE VARCHAR NOT NULL,
                              COUNT BIGINT NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              MESSAGE VARCHAR NOT NULL,
                              STEP VARCHAR NOT NULL
                             )
    """
      },
      audit {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{paths}}' AS PATHS,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            {{success}} AS SUCCESS,
            {{count}} AS COUNT,
            {{countAccepted}} AS COUNTACCEPTED,
            {{countRejected}} AS COUNTREJECTED,
            TIMESTAMP '{{timestamp}}' AS TIMESTAMP,
            {{duration}} AS DURATION,
            '{{message}}' AS MESSAGE,
            '{{step}}' AS STEP,
            '{{database}}' AS DATABASE,
            '{{tenant}}' AS TENANT
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID VARCHAR NOT NULL,
                              PATHS TEXT NOT NULL,
                              DOMAIN VARCHAR NOT NULL,
                              SCHEMA VARCHAR NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              COUNT BIGINT NOT NULL,
                              COUNTACCEPTED BIGINT NOT NULL,
                              COUNTREJECTED BIGINT NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DURATION LONG NOT NULL,
                              MESSAGE VARCHAR NOT NULL,
                              STEP VARCHAR NOT NULL,
                              DATABASE VARCHAR,
                              TENANT VARCHAR
                             )
    """
      },
      expectations {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{database}}' AS DATABASE,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            TIMESTAMP '{{timestamp}}' AS TIMESTAMP,
            '{{name}}' AS NAME,
            '{{params}}' AS PARAMS,
            '{{sql}}' AS SQL,
            {{count}} AS COUNT,
            '{{exception}}' AS EXCEPTION,
            {{success}} AS SUCCESS
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                            JOBID VARCHAR NOT NULL,
                            DATABASE VARCHAR,
                            DOMAIN VARCHAR NOT NULL,
                            SCHEMA VARCHAR NOT NULL,
                            TIMESTAMP TIMESTAMP NOT NULL,
                            NAME VARCHAR NOT NULL,
                            PARAMS VARCHAR NOT NULL,
                            SQL VARCHAR NOT NULL,
                            COUNT BIGINT NOT NULL,
                            EXCEPTION VARCHAR NOT NULL,
                            SUCCESS BOOLEAN NOT NULL
                          )
        """
      },
      rejected {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID VARCHAR NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DOMAIN VARCHAR NOT NULL,
                              SCHEMA VARCHAR NOT NULL,
                              ERROR TEXT NOT NULL,
                              PATH TEXT NOT NULL
                             )
    """
      },
      frequencies {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE VARCHAR NOT NULL,
            CATEGORY VARCHAR NOT NULL,
            COUNT BIGINT NOT NULL,
            FREQUENCY DOUBLE PRECISION NULL,
            JOBID VARCHAR NOT NULL,
            DOMAIN VARCHAR NOT NULL,
            SCHEMA VARCHAR NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      continuous {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE VARCHAR NOT NULL,
            MIN DOUBLE PRECISION NULL,
            MAX DOUBLE PRECISION NULL,
            MEAN DOUBLE PRECISION NULL,
            MISSINGVALUES BIGINT NULL,
            VARIANCE DOUBLE PRECISION NULL,
            STANDARDDEV DOUBLE PRECISION NULL,
            SUM DOUBLE PRECISION NULL,
            SKEWNESS DOUBLE PRECISION NULL,
            KURTOSIS DOUBLE PRECISION NULL,
            PERCENTILE25 DOUBLE PRECISION NULL,
            MEDIAN DOUBLE PRECISION NULL,
            PERCENTILE75 DOUBLE PRECISION NULL,
            COMETMETRIC VARCHAR NOT NULL,
            JOBID VARCHAR NOT NULL,
            DOMAIN VARCHAR NOT NULL,
            SCHEMA VARCHAR NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      discrete {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE VARCHAR NOT NULL,
            COUNTDISTINCT BIGINT NULL,
            MISSINGVALUESDISCRETE BIGINT NULL,
            COMETMETRIC VARCHAR NOT NULL,
            JOBID VARCHAR NOT NULL,
            DOMAIN VARCHAR NOT NULL,
            SCHEMA VARCHAR NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      }
    }
  }
  postgresql {
    strategyBuilder = "ai.starlake.job.strategies.JdbcStrategiesBuilder"
    canMerge = true
    preactions = ""
    viewPrefix = ""
    quote = ""

    supportsJson = false
    tables = {
      extract {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              DOMAIN TEXT NOT NULL,
                              SCHEMA TEXT NOT NULL,
                              LAST_TS TIMESTAMP,
                              LAST_DATE DATE,
                              LAST_LONG NUMERIC,
                              LAST_DECIMAL DECIMAL,
                              START_TS TIMESTAMP NOT NULL,
                              END_TS TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MODE TEXT NOT NULL,
                              COUNT BIGINT NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              MESSAGE TEXT NOT NULL,
                              STEP TEXT NOT NULL
                             )
    """
      },
      audit {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{paths}}' AS PATHS,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            {{success}} AS SUCCESS,
            {{count}} AS COUNT,
            {{countAccepted}} AS COUNTACCEPTED,
            {{countRejected}} AS COUNTREJECTED,
            TO_TIMESTAMP('{{timestamp}}', 'YYYY-MM-DD HH24:MI:SS') AS TIMESTAMP,
            {{duration}} AS DURATION,
            '{{message}}' AS MESSAGE,
            '{{step}}' AS STEP,
            '{{database}}' AS DATABASE,
            '{{tenant}}' AS TENANT
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID TEXT NOT NULL,
                              PATHS TEXT NOT NULL,
                              DOMAIN TEXT NOT NULL,
                              SCHEMA TEXT NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              COUNT BIGINT NOT NULL,
                              COUNTACCEPTED BIGINT NOT NULL,
                              COUNTREJECTED BIGINT NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MESSAGE TEXT NOT NULL,
                              STEP TEXT NOT NULL,
                              DATABASE TEXT,
                              TENANT TEXT
                             )
    """
      },
      expectations {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{database}}' AS DATABASE,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            TO_TIMESTAMP('{{timestamp}}', 'YYYY-MM-DD HH24:MI:SS') AS TIMESTAMP,
            '{{name}}' AS NAME,
            '{{params}}' AS PARAMS,
            '{{sql}}' AS SQL,
            {{count}} AS COUNT,
            '{{exception}}' AS EXCEPTION,
            {{success}} AS SUCCESS
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                            JOBID TEXT NOT NULL,
                            DATABASE TEXT,
                            DOMAIN TEXT NOT NULL,
                            SCHEMA TEXT NOT NULL,
                            TIMESTAMP TIMESTAMP NOT NULL,
                            NAME TEXT NOT NULL,
                            PARAMS TEXT NOT NULL,
                            SQL TEXT NOT NULL,
                            COUNT BIGINT NOT NULL,
                            EXCEPTION TEXT NOT NULL,
                            SUCCESS BOOLEAN NOT NULL
                          )
        """
      },
      rejected {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID TEXT NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DOMAIN TEXT NOT NULL,
                              SCHEMA TEXT NOT NULL,
                              ERROR TEXT NOT NULL,
                              PATH TEXT NOT NULL
                             )
    """
      },
      frequencies {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE TEXT NOT NULL,
            CATEGORY TEXT NOT NULL,
            COUNT BIGINT NOT NULL,
            FREQUENCY DOUBLE PRECISION NULL,
            JOBID TEXT NOT NULL,
            DOMAIN TEXT NOT NULL,
            SCHEMA TEXT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      continuous {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE TEXT NOT NULL,
            MIN DOUBLE PRECISION NULL,
            MAX DOUBLE PRECISION NULL,
            MEAN DOUBLE PRECISION NULL,
            MISSINGVALUES BIGINT NULL,
            VARIANCE DOUBLE PRECISION NULL,
            STANDARDDEV DOUBLE PRECISION NULL,
            SUM DOUBLE PRECISION NULL,
            SKEWNESS DOUBLE PRECISION NULL,
            KURTOSIS DOUBLE PRECISION NULL,
            PERCENTILE25 DOUBLE PRECISION NULL,
            MEDIAN DOUBLE PRECISION NULL,
            PERCENTILE75 DOUBLE PRECISION NULL,
            COMETMETRIC TEXT NOT NULL,
            JOBID TEXT NOT NULL,
            DOMAIN TEXT NOT NULL,
            SCHEMA TEXT NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      discrete {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE TEXT NOT NULL,
            COUNTDISTINCT BIGINT NULL,
            MISSINGVALUESDISCRETE BIGINT NULL,
            COMETMETRIC TEXT NOT NULL,
            JOBID TEXT NOT NULL,
            DOMAIN TEXT NOT NULL,
            SCHEMA TEXT NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      }
    }
  }
  redshift {
    strategyBuilder = "ai.starlake.job.strategies.RedshiftStrategiesBuilder"
    canMerge = false
    preactions = ""
    quote = "\""
    viewPrefix = "#"

    supportsJson = false
    tables = {
      extract {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              DOMAIN TEXT NOT NULL,
                              SCHEMA TEXT NOT NULL,
                              LAST_TS TIMESTAMP,
                              LAST_DATE DATE,
                              LAST_LONG NUMERIC,
                              LAST_DECIMAL DECIMAL,
                              START_TS TIMESTAMP NOT NULL,
                              END_TS TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MODE TEXT NOT NULL,
                              COUNT BIGINT NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              MESSAGE varchar(max) NOT NULL,
                              STEP TEXT NOT NULL
                             )
    """
      },
      audit {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{paths}}' AS PATHS,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            {{success}} AS SUCCESS,
            {{count}} AS COUNT,
            {{countAccepted}} AS COUNTACCEPTED,
            {{countRejected}} AS COUNTREJECTED,
            TO_TIMESTAMP('{{timestamp}}', 'YYYY-MM-DD HH24:MI:SS') AS TIMESTAMP,
            {{duration}} AS DURATION,
            '{{message}}' AS MESSAGE,
            '{{step}}' AS STEP,
            '{{database}}' AS DATABASE,
            '{{tenant}}' AS TENANT
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID TEXT NOT NULL,
                              PATHS varchar(max) NOT NULL,
                              DOMAIN TEXT NOT NULL,
                              SCHEMA TEXT NOT NULL,
                              SUCCESS BOOLEAN NOT NULL,
                              COUNT BIGINT NOT NULL,
                              COUNTACCEPTED BIGINT NOT NULL,
                              COUNTREJECTED BIGINT NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DURATION INTEGER NOT NULL,
                              MESSAGE varchar(max) NOT NULL,
                              STEP TEXT NOT NULL,
                              DATABASE TEXT,
                              TENANT TEXT
                             )
    """
      },
      expectations {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{database}}' AS DATABASE,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            TO_TIMESTAMP('{{timestamp}}', 'YYYY-MM-DD HH24:MI:SS') AS TIMESTAMP,
            '{{name}}' AS NAME,
            '{{params}}' AS PARAMS,
            '{{sql}}' AS SQL,
            {{count}} AS COUNT,
            '{{exception}}' AS EXCEPTION,
            {{success}} AS SUCCESS
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                            JOBID TEXT NOT NULL,
                            DATABASE TEXT,
                            DOMAIN TEXT NOT NULL,
                            SCHEMA TEXT NOT NULL,
                            TIMESTAMP TIMESTAMP NOT NULL,
                            NAME TEXT NOT NULL,
                            PARAMS varchar(max) NOT NULL,
                            SQL varchar(max) NOT NULL,
                            COUNT BIGINT NOT NULL,
                            EXCEPTION varchar(max) NOT NULL,
                            SUCCESS BOOLEAN NOT NULL
                          )
        """
      },
      rejected {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID TEXT NOT NULL,
                              TIMESTAMP TIMESTAMP NOT NULL,
                              DOMAIN TEXT NOT NULL,
                              SCHEMA TEXT NOT NULL,
                              ERROR varchar(max) NOT NULL,
                              PATH varchar(max) NOT NULL
                             )
    """
      },
      frequencies {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE TEXT NOT NULL,
            CATEGORY TEXT NOT NULL,
            COUNT BIGINT NOT NULL,
            FREQUENCY DOUBLE PRECISION NULL,
            JOBID TEXT NOT NULL,
            DOMAIN TEXT NOT NULL,
            SCHEMA TEXT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      continuous {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE TEXT NOT NULL,
            MIN DOUBLE PRECISION NULL,
            MAX DOUBLE PRECISION NULL,
            MEAN DOUBLE PRECISION NULL,
            MISSINGVALUES BIGINT NULL,
            VARIANCE DOUBLE PRECISION NULL,
            STANDARDDEV DOUBLE PRECISION NULL,
            SUM DOUBLE PRECISION NULL,
            SKEWNESS DOUBLE PRECISION NULL,
            KURTOSIS DOUBLE PRECISION NULL,
            PERCENTILE25 DOUBLE PRECISION NULL,
            MEDIAN DOUBLE PRECISION NULL,
            PERCENTILE75 DOUBLE PRECISION NULL,
            COMETMETRIC TEXT NOT NULL,
            JOBID TEXT NOT NULL,
            DOMAIN TEXT NOT NULL,
            SCHEMA TEXT NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      },
      discrete {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE TEXT NOT NULL,
            COUNTDISTINCT BIGINT NULL,
            MISSINGVALUESDISCRETE BIGINT NULL,
            COMETMETRIC TEXT NOT NULL,
            JOBID TEXT NOT NULL,
            DOMAIN TEXT NOT NULL,
            SCHEMA TEXT NOT NULL,
            COUNT BIGINT NOT NULL,
            TIMESTAMP BIGINT NOT NULL
        )
        """
      }
    }
  }
  mssql {
    strategyBuilder = "ai.starlake.job.strategies.JdbcStrategiesBuilder"
    canMerge = true
    preactions = ""
    quote = ""
    viewPrefix = ""

    supportsJson = false
    tables = {
      extract {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              DOMAIN NVARCHAR(MAX) NOT NULL,
                              SCHEMA NVARCHAR(MAX) NOT NULL,
                              LAST_TS DATETIME,
                              LAST_DATE DATE,
                              LAST_LONG INT,
                              LAST_DECIMAL DECIMAL,
                              START_TS DATETIME NOT NULL,
                              END_TS DATETIME NOT NULL,
                              DURATION INT NOT NULL,
                              MODE NVARCHAR(MAX) NOT NULL,
                              COUNT INT NOT NULL,
                              SUCCESS TINYINT NOT NULL,
                              MESSAGE NVARCHAR(MAX) NOT NULL,
                              STEP NVARCHAR(MAX) NOT NULL
                             )
    """
      },
      audit {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{paths}}' AS PATHS,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            {{success}} AS SUCCESS,
            {{count}} AS COUNT,
            {{countAccepted}} AS COUNTACCEPTED,
            {{countRejected}} AS COUNTREJECTED,
            TO_TIMESTAMP('{{timestamp}}') AS TIMESTAMP,
            {{duration}} AS DURATION,
            '{{message}}' AS MESSAGE,
            '{{step}}' AS STEP,
            '{{database}}' AS DATABASE,
            '{{tenant}}' AS TENANT
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID NVARCHAR(MAX) NOT NULL,
                              PATHS NVARCHAR(MAX) NOT NULL,
                              DOMAIN NVARCHAR(MAX) NOT NULL,
                              SCHEMA NVARCHAR(MAX) NOT NULL,
                              SUCCESS TINYINT NOT NULL,
                              COUNT INT NOT NULL,
                              COUNTACCEPTED INT NOT NULL,
                              COUNTREJECTED INT NOT NULL,
                              TIMESTAMP DATETIME NOT NULL,
                              DURATION INT NOT NULL,
                              MESSAGE NVARCHAR(MAX) NOT NULL,
                              STEP NVARCHAR(MAX) NOT NULL,
                              DATABASE NVARCHAR(MAX) NULL,
                              TENANT NVARCHAR(MAX) NULL
                             )
    """
      },
      expectations {
        selectSql = """
          SELECT
            '{{jobid}}' AS JOBID,
            '{{database}}' AS DATABASE,
            '{{domain}}' AS DOMAIN,
            '{{schema}}' AS SCHEMA,
            TO_TIMESTAMP('{{timestamp}}') AS TIMESTAMP,
            '{{name}}' AS NAME,
            '{{params}}' AS PARAMS,
            '{{sql}}' AS SQL,
            {{count}} AS COUNT,
            '{{exception}}' AS EXCEPTION,
            {{success}} AS SUCCESS
        """
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                            JOBID VARCHAR(255) NOT NULL,
                            DATABASE VARCHAR(255),
                            DOMAIN VARCHAR(255) NOT NULL,
                            SCHEMA VARCHAR(255) NOT NULL,
                            TIMESTAMP TIMESTAMP NOT NULL,
                            NAME VARCHAR(255) NOT NULL,
                            PARAMS VARCHAR(255) NOT NULL,
                            SQL VARCHAR(255) NOT NULL,
                            COUNT BIGINT NOT NULL,
                            EXCEPTION VARCHAR(255) NOT NULL,
                            SUCCESS BOOLEAN NOT NULL
                          )
        """
      },
      rejected {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
                              JOBID NVARCHAR(MAX) NOT NULL,
                              TIMESTAMP DATETIME NOT NULL,
                              DOMAIN NVARCHAR(MAX) NOT NULL,
                              SCHEMA NVARCHAR(MAX) NOT NULL,
                              ERROR NVARCHAR(MAX) NOT NULL,
                              PATH NVARCHAR(MAX) NOT NULL
                             )
    """
      },
      frequencies {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE NVARCHAR(MAX) NOT NULL,
            CATEGORY NTEXT,
            COUNT INT NOT NULL,
            FREQUENCY DOUBLE,
            JOBID NVARCHAR(MAX) NOT NULL,
            DOMAIN NVARCHAR(MAX) NOT NULL,
            SCHEMA NVARCHAR(MAX) NOT NULL,
            TIMESTAMP INT NOT NULL
        )
        """
      },
      continuous {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE NVARCHAR(MAX) NOT NULL,
            MIN DOUBLE,
            MAX DOUBLE,
            MEAN DOUBLE,
            MISSINGVALUES INT,
            VARIANCE DOUBLE,
            STANDARDDEV DOUBLE,
            SUM DOUBLE,
            SKEWNESS DOUBLE,
            KURTOSIS DOUBLE,
            PERCENTILE25 DOUBLE,
            MEDIAN DOUBLE,
            PERCENTILE75 DOUBLE,
            COMETMETRIC NVARCHAR(MAX) NOT NULL,
            JOBID NVARCHAR(MAX) NOT NULL,
            DOMAIN NVARCHAR(MAX) NOT NULL,
            SCHEMA NVARCHAR(MAX) NOT NULL,
            COUNT INT NOT NULL,
            TIMESTAMP INT NOT NULL
        )
        """
      },
      discrete {
        createSql = """CREATE TABLE IF NOT EXISTS {{table}} (
            ATTRIBUTE NVARCHAR(MAX) NOT NULL,
            COUNTDISTINCT INT,
            MISSINGVALUESDISCRETE BIGINT,
            COMETMETRIC NVARCHAR(MAX) NOT NULL,
            JOBID NVARCHAR(MAX) NOT NULL,
            DOMAIN NVARCHAR(MAX) NOT NULL,
            SCHEMA NVARCHAR(MAX) NOT NULL,
            COUNT INT NOT NULL,
            TIMESTAMP INT NOT NULL
        )
        """
      }
    }
  }
}
