file-system = "file://"
file-system = ${?COMET_FS}

metadata-file-system = ${file-system}
metadata-file-system = ${?COMET_METADATA_FS}

validate-on-load = false
validate-on-load = ${?COMET_VALIDATE_ON_LOAD}

root = "/tmp"
root = ${?COMET_ROOT}

root-serve = ${root}"/out"
root-serve = ${?COMET_ROOT_SERVE}

datasets = ${root}"/datasets"
datasets = ${?COMET_DATASETS}

metadata = ${root}"/metadata"
metadata = ${?COMET_METADATA}

dsv-options {
  # any option listed here https://spark.apache.org/docs/latest/sql-data-sources-csv.html
}


area {
  pending = "pending"
  pending = ${?COMET_AREA_PENDING}
  unresolved = "unresolved"
  unresolved = ${?COMET_AREA_UNRESOLVED}
  archive = "archive"
  archive = ${?COMET_AREA_ARCHIVE}
  ingesting = "ingesting"
  ingesting = ${?COMET_AREA_INGESTING}
  accepted = "accepted"
  accepted = ${?COMET_AREA_ACCEPTED}
  rejected = "rejected"
  rejected = ${?COMET_AREA_REJECTED}
  business = "business"
  business = ${?COMET_AREA_BUSINESS}
  replay = "replay"
  replay = ${?COMET_AREA_REPLAY}
  hive-database = "${domain}_${area}"
  hive-database = ${?COMET_AREA_HIVE_DATABASE}
}

tmpdir = ${root}"/comet_tmp"
tmpdir = ${?COMET_TMPDIR}

archive = true
archive = ${?COMET_ARCHIVE}

default-file-extensions = "json,csv,dsv,psv,dat,txt,xml"
default-file-extensions = ${?COMET_DEFAULT_FILE_EXTENSIONS}

force-file-extensions =  "json,csv,dsv,psv,dat,txt,xml,plt"
force-file-extensions = ${?COMET_FORCE_FILE_EXTENSIONS}

default-format = parquet
default-format = ${?COMET_DEFAULT_WRITE_FORMAT}
default-format = ${?COMET_DEFAULT_FORMAT}

default-rejected-write-format = parquet
default-rejected-write-format = ${?COMET_DEFAULT_REJECTED_WRITE_FORMAT}

default-audit-write-format = parquet
default-audit-write-format = ${?COMET_DEFAULT_AUDIT_WRITE_FORMAT}

reject-all-on-error = false
reject-all-on-error = ${?COMET_REJECT_ALL_ON_ERROR}

hive = false
hive = ${?COMET_HIVE}


analyze = true
analyze = ${?COMET_ANALYZE}

launcher = airflow
launcher = simple
launcher = ${?COMET_LAUNCHER}

lock {
  path = ${root}"/locks"
  path = ${?COMET_LOCK_PATH}

  timeout = -1
  time-out = ${?COMET_LOCK_TIMEOUT}
}

grouped = false
grouped = ${?COMET_GROUPED}

grouped-max = 1000000
grouped-max = ${?COMET_GROUPED_MAX}

load-strategy-class = "ai.starlake.job.load.IngestionTimeStrategy"
load-strategy-class = ${?COMET_LOAD_STRATEGY}

sink-to-file = false
sink-to-file = ${?COMET_SINK_TO_FILE}

sink-replay-to-file = false
sink-replay-to-file = ${?COMET_SINK_REPLAY_TO_FILE}

# Save Format in CSV with coalesce(1)
csv-output = false
csv-output = ${?COMET_CSV_OUTPUT}

csv-output-ext = ""
csv-output-ext = ${?COMET_CSV_OUTPUT_EXT}

max-par-copy = 1

scheduling {
  max-jobs = 1
  mode = "FIFO"
  file = ""
  pool-name = "default"
}

privacy {
  options {
    "none": "ai.starlake.privacy.No",
    "hide": "ai.starlake.privacy.Hide",
    "hide10X": "ai.starlake.privacy.Hide(\"X\",10)",
    "approxLong20": "ai.starlake.privacy.ApproxLong(20)",
    "md5": "ai.starlake.privacy.Md5",
    "sha1": "ai.starlake.privacy.Sha1",
    "sha256": "ai.starlake.privacy.Sha256",
    "sha512": "ai.starlake.privacy.Sha512",
    "initials": "ai.starlake.privacy.Initials"
  }
}

privacy-only = false
privacy-only = ${?COMET_PRIVACY_ONLY}

merge-force-distinct = false
merge-force-distinct = ${?COMET_MERGE_FORCE_DISTINCT}

merge-optimize-partition-write = false
merge-optimize-partition-write = ${?COMET_MERGE_OPTIMIZE_PARTITION_WRITE}

udfs = ${?COMET_UDFS}

chewer-prefix = "comet.chewer"
chewer-prefix = ${?COMET_CHEWER_PREFIX}

row-validator-class = "ai.starlake.job.validator.FlatRowValidator"
row-validator-class = ${?COMET_ROW_VALIDATOR_CLASS}

tree-validator-class = "ai.starlake.job.validator.TreeRowValidator"
tree-validator-class = ${?COMET_TREE_VALIDATOR_CLASS}

env = prod
env = ${?COMET_ENV}



sql-parameter-pattern = "\\$\\{\\s*%s\\s*\\}"

hadoop {
}


access-policies {
  apply = true
  apply = ${?COMET_ACCESS_POLICIES_APPLY}
  location = "invalid_location" // eu or us or ...
  location = ${?COMET_ACCESS_POLICIES_LOCATION}
  project-id = "invalid_project"
  project-id = ${?GOOGLE_CLOUD_PROJECT}
  project-id = ${?GCLOUD_PROJECT}
  project-id = ${?COMET_ACCESS_POLICIES_PROJECT_ID}

  taxonomy = "invalid_taxonomy"
  taxonomy = ${?COMET_ACCESS_POLICIES_TAXONOMY}
}

include "reference-audit"
include "reference-metrics"
include "reference-assertions"
include "reference-elasticsearch"
include "reference-atlas"
include "reference-spark"
include "reference-airflow"
include "reference-kafka"
include "reference-connections"
include "reference-service"


internal {
  # See https://spark.apache.org/docs/latest/api/java/index.html?org/apache/spark/storage/StorageLevel.html
  cache-storage-level = "MEMORY_AND_DISK"
  cache-storage-level = ${?COMET_INTERNAL_CACHE_STORAGE_LEVEL}
  # Parquet is the default format : https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-parquet
  # other values include orc & avro. When using avro, spark-avro dependency should be included at runtime.
  # If you want to use orc or avro format, you should be aware of this
  # For orc format (All fields in the detected schema are NULLABLE) : https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-orc
  # For avro format : https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-avro
  intermediate-bigquery-format = "parquet"
  intersumediate-bigquery-format = ${?COMET_INTERMEDIATE_BQ_FORMAT}
  substitute-vars = true
  substitute-vars = ${?COMET_INTERNAL_SUBSTITUTE_VARS}
  temporary-gcs-bucket = ${?TEMPORARY_GCS_BUCKET}
  temporary-gcs-bucket = ${?COMET_TEMPORARY_GCS_BUCKET}
}

extra {

}

