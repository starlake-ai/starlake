{% include 'templates/dags/__common__.py.j2' %}
from ai.starlake.job import StarlakeJobFactory

import os

import sys

sl_job = StarlakeJobFactory.create_job(
    filename=os.path.basename(__file__), 
    module_name=f"{__name__}", 
    orchestrator=orchestrator,
    execution_environment=execution_environment,
    options=dict(options, **sys.modules[__name__].__dict__.get('jobs', {}))
    #optional variable jobs as a dict of all options to apply by job
    #eg jobs = {"task1 domain.task1 name": {"options": "task1 transform options"}, "task2 domain.task2 name": {"options": "task2 transform options"}}
)

cron = "{{ context.cron }}"

from ai.starlake.orchestration import StarlakeDependencies, StarlakeDependency, StarlakeDependencyType, OrchestrationFactory, AbstractTaskGroup, AbstractTask, TreeNodeMixin as TreeNode

from typing import List, Optional, Set, Union

dependencies=StarlakeDependencies(dependencies="""{{ context.dependencies }}""")

with OrchestrationFactory.create_orchestration(job=sl_job) as orchestration:
    with orchestration.sl_create_pipeline(dependencies=dependencies) as pipeline:

        graphs: Set[TreeNode] = pipeline.graphs

        start = pipeline.start_task()
        pre_tasks = pipeline.pre_tasks()
        if pre_tasks:
            start >> pre_tasks

        end = pipeline.end_task()
        post_tasks = pipeline.post_tasks()
        all_done = None
        if post_tasks:
            all_done = pipeline.sl_dummy_op(task_id="all_done")
            all_done >> post_tasks >> end

        def generate_tasks_for_graph(graph: TreeNode):
          parent_tasks: List[AbstractTask] = list()
          for parent in graph.parents:
              parent_task = pipeline.dependency_to_task(parent.node)
              parent_tasks.append(parent_task)
          task = pipeline.dependency_to_task(graph.node)
          if pre_tasks:
              if len(parent_tasks) > 0:
                  task << parent_tasks
                  pre_tasks >> parent_tasks
              else:
                  pre_tasks >> task
          else:
              if len(parent_tasks) > 0:
                  start >> parent_tasks
                  task << parent_tasks
              else:
                  start >> task
          if all_done:
              task >> all_done
          else:
              task >> end
        
        for graph in graphs:
            generate_tasks_for_graph(graph)

pipelines = [pipeline]