{% if quotedPartitionPruningKey != '' %}
DECLARE incomingPartitionKeys DEFAULT (select array_agg(distinct {{ quotedPartitionPruningKey }}) from ({{ selectStatement }}));
{% endif %}
MERGE INTO {{ tableFullName  }} SL_EXISTING
USING (
  WITH
  sl_incoming_data AS (
    SELECT {{ tableColumnsCsv }}
    FROM ({{ selectStatement }})
  ),
  sl_existing_keys AS (
    select distinct {{ strategyKeyCsv }} from {{ tableFullName  }}{% if quotedPartitionPruningKey != '' %} where {{ quotedPartitionPruningKey }} IN unnest(incomingPartitionKeys){% endif %}
  ),
  line_action as(
    select
      sid.* except({{ strategyKeyCsv }}),
      {% for mergeKey in quotedStrategyKey %}coalesce(sid.{{ mergeKey }}, sek.{{ mergeKey }}) as {{ mergeKey }}, {%endfor%}
      case
        when sid.{{ quotedStrategyKey | first }} IS NULL then 'KEEP'
        else 'INSERT' -- DELETE THEN INSERT CASE OR NEW KEYS CASE
      end
      as sl_merge_action
    from sl_incoming_data sid FULL OUTER JOIN sl_existing_keys sek using({{ strategyKeyCsv }})
  )
  select * from line_action
) SL_INCOMING
ON {% if quotedPartitionPruningKey != '' %}FALSE{% else %}{% for mergeKey in quotedStrategyKey %}SL_EXISTING.{{ mergeKey }} = SL_INCOMING.{{ mergeKey }} AND {%endfor%}SL_INCOMING.sl_merge_action = 'KEEP'{% endif %}
WHEN NOT MATCHED BY SOURCE{% if quotedPartitionPruningKey != '' %} AND SL_EXISTING.{{ quotedPartitionPruningKey }} IN unnest(incomingPartitionKeys){% endif %} THEN DELETE
WHEN NOT MATCHED THEN {{ tableInsert }}