{% macro expect_column_kl_divergence_to_be_less_than(table_name, column_name, reference_distribution, threshold) %} 
-- This macro generates a SQL query that calculates the Kullback-Leibler (KL) divergence between the distribution of values
-- in the specified column and a reference distribution. It checks if the KL divergence is less than a specified threshold.
--
-- Returns:
-- The KL divergence value if it is less than the specified threshold.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to calculate the distribution for.
-- reference_distribution: A dictionary representing the reference distribution {value: probability}.
-- threshold: The maximum acceptable KL divergence.

WITH ColumnDistribution AS (
    SELECT {{ column_name }},
           COUNT(*) * 1.0 / SUM(COUNT(*)) OVER () AS probability
    FROM {{ table_name }}
    GROUP BY {{ column_name }}
),
ReferenceDistribution AS (
    {% for value, prob in reference_distribution.items() %}
    SELECT {{ value }} AS value, {{ prob }} AS probability
    {% if not loop.last %}
    UNION ALL
    {% endif %}
    {% endfor %}
),
KLDivergence AS (
    SELECT SUM(cd.probability * LOG(cd.probability / rd.probability)) AS kl_divergence
    FROM ColumnDistribution cd
    JOIN ReferenceDistribution rd ON cd.{{ column_name }} = rd.value
)
SELECT 
    CASE 
        WHEN kl_divergence < {{ threshold }} THEN 0  
        ELSE 1                                       
    END AS is_valid
FROM KLDivergence;
{% endmacro %}

{% macro expect_column_max_to_be_between(table_name, column_name, lower_bound, upper_bound) %}
-- This macro generates a SQL query that checks if the maximum value in the specified column is between a given range.
--
-- Returns:
-- The maximum value in the specified column if it is between the given range.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to find the maximum value for.
-- lower_bound: The lower bound of the range.
-- upper_bound: The upper bound of the range.

SELECT 
    CASE 
        WHEN MAX({{ column_name }}) BETWEEN {{ lower_bound }} AND {{ upper_bound }} 
        THEN 0 ELSE 1 
    END AS is_valid
FROM {{ table_name }};
{% endmacro %}

{% macro expect_column_mean_to_be_between(table_name, column_name, lower_bound, upper_bound) %}
-- This macro generates a SQL query that checks if the mean value of the specified column is between a given range.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to calculate the mean value for.
-- lower_bound: The lower bound of the range.
-- upper_bound: The upper bound of the range.
--
-- Returns:
-- The mean value of the specified column if it is between the given range.

SELECT 
    CASE 
        WHEN AVG({{ column_name }}) BETWEEN {{ lower_bound }} AND {{ upper_bound }} 
        THEN 0 ELSE 1 
    END AS is_valid
FROM {{ table_name }};
{% endmacro %}

{% macro expect_column_median_to_be_between(table_name, column_name, lower_bound, upper_bound) %}
-- This macro generates a SQL query that checks if the median value of the specified column is between a given range.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to calculate the median value for.
-- lower_bound: The lower bound of the range.
-- upper_bound: The upper bound of the range.
--
-- Returns:
-- The median value of the specified column if it is between the given range.

WITH MedianCalculation AS (
    SELECT {{ column_name }},
           ROW_NUMBER() OVER (ORDER BY {{ column_name }}) AS row_num,
           COUNT(*) OVER () AS total_rows
    FROM {{ table_name }}
)
SELECT 
    CASE 
        WHEN AVG({{ column_name }}) BETWEEN {{ lower_bound }} AND {{ upper_bound }} 
        THEN 0 
        ELSE 1 
    END AS is_valid
FROM MedianCalculation
WHERE row_num IN (FLOOR((total_rows + 1) / 2), CEIL((total_rows + 1) / 2));
{% endmacro %}

{% macro expect_column_min_to_be_between(table_name, column_name, lower_bound, upper_bound) %}
-- This macro generates a SQL query that checks if the minimum value in the specified column is between a given range.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to find the minimum value for.
-- lower_bound: The lower bound of the range.
-- upper_bound: The upper bound of the range.
--
-- Returns:
-- The minimum value in the specified column if it is between the given range.

SELECT 
    CASE 
        WHEN MIN({{ column_name }}) BETWEEN {{ lower_bound }} AND {{ upper_bound }} 
        THEN 0 
        ELSE 1 
    END AS is_valid
FROM {{ table_name }};
{% endmacro %}

{% macro expect_column_most_common_value_to_be_in_set(table_name, column_name, values) %}
-- This macro generates a SQL query that checks if the most common value in the specified column is within a given set.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to find the most common value for.
-- values: A list of values to check if the most common value is within.
--
-- Returns:
-- The most common value in the specified column if it is within the given set.

WITH ValueCounts AS (
    SELECT {{ column_name }}, COUNT(*) AS value_count
    FROM {{ table_name }}
    GROUP BY {{ column_name }}
),
MostCommonValue AS (
    SELECT {{ column_name }}
    FROM ValueCounts
    ORDER BY value_count DESC
    LIMIT 1
)
SELECT 
    CASE 
        WHEN {{ column_name }} IN ({{ values | join(', ') }}) 
        THEN 0 
        ELSE 1 
    END AS is_valid
FROM MostCommonValue;
{% endmacro %}

{% macro expect_column_pair_values_a_to_be_greater_than_b(table_name, column_a, column_b) %}
-- This macro generates a SQL query that checks if the values in column A are greater than the values in column B for each row.
-- If the result set is empty, it means all values in column A are greater than the values in column B.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_a: The name of column A.
-- column_b: The name of column B.
--
-- Returns:
-- A result set containing rows where the values in column A are not greater than the values in column B.
-- If the result set is empty, it means all values in column A are greater than the values in column B.

SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1
            FROM {{ table_name }}
            WHERE {{ column_a }} <= {{ column_b }}
            LIMIT 1
        ) THEN 1
        ELSE 0
    END AS result
{% endmacro %}

{% macro expect_column_pair_values_to_be_equal(table_name, column_a, column_b) %}
-- This macro generates a SQL query that checks if the values in two specified columns are equal for each row.
-- If any row has unequal values in the specified columns, it will be returned by the query.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_a: The name of the first column.
-- column_b: The name of the second column.
--
-- Returns:
-- A result set containing rows where the values in the specified columns are not equal.
-- If the result set is empty, it means all values in the specified columns are equal.

SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1
            FROM {{ table_name }}
            WHERE {{ column_a }} <> {{ column_b }}
            LIMIT 1
        ) THEN 1
        ELSE 0
    END AS result;
{% endmacro %}

{% macro expect_column_pair_values_to_be_in_set(table_name, column_a, column_b, value_pairs) %}
-- This macro generates a SQL query that checks if the values in two specified columns are within a given set for each row.
-- If any row has values in the specified columns that are not within the set, it will be returned by the query.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_a: The name of the first column.
-- column_b: The name of the second column.
-- value_pairs: A list of tuples representing the allowed pairs of values.
--
-- Returns:
-- A result set containing rows where the values in the specified columns are not within the given set.
-- If the result set is empty, it means all values in the specified columns are within the given set.

SELECT CASE
    WHEN EXISTS (
        SELECT 1
        FROM {{ table_name }}
        WHERE ({{ column_a }}, {{ column_b }}) IN (
            {% for pair in value_pairs %}
            ({{ pair[0] }}, {{ pair[1] }})
            {% if not loop.last %}
            ,
            {% endif %}
            {% endfor %}
        )
    ) THEN 1
    ELSE 0
END AS result;
{% endmacro %}

{% macro expect_column_quantile_values_to_be_between(table_name, column_name, quantiles, lower_bounds, upper_bounds) %}
-- This macro generates a SQL query that checks if the quantile values of a specified column are between given ranges.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to calculate the quantile values for.
-- quantiles: A list of quantiles to check.
-- lower_bounds: A list of lower bounds for the quantiles.
-- upper_bounds: A list of upper bounds for the quantiles.
--
-- Returns:
-- The quantile values of the specified column if they are between the given ranges.

WITH Sorted AS (
    SELECT {{ column_name }}
    FROM {{ table_name }}
    ORDER BY {{ column_name }}
),
Quantiles AS (
    SELECT 
        (SELECT {{ column_name }} 
         FROM Sorted 
         LIMIT 1 OFFSET (SELECT ROUND(COUNT(*) * {{ quantiles[0] }} / 100) FROM Sorted)) AS percentile_25,
        (SELECT {{ column_name }} 
         FROM Sorted 
         LIMIT 1 OFFSET (SELECT ROUND(COUNT(*) * {{ quantiles[1] }} / 100) FROM Sorted)) AS percentile_75
)
SELECT CASE
    WHEN percentile_25 >= {{ lower_bounds[0] }} 
         AND percentile_25 <= {{ upper_bounds[0] }}
         AND percentile_75 >= {{ lower_bounds[1] }} 
         AND percentile_75 <= {{ upper_bounds[1] }}
    THEN 0
    ELSE 1
END AS result
FROM Quantiles;
{% endmacro %}

{% macro expect_column_stdev_to_be_between(table_name, column_name, lower_bound, upper_bound) %}
-- This macro generates a SQL query that checks if the standard deviation of a specified column is between a given range.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to calculate the standard deviation for.
-- lower_bound: The lower bound of the range.
-- upper_bound: The upper bound of the range.
--
-- Returns:
-- The standard deviation of the specified column if it is between the given range.

WITH stats AS (
    SELECT
        AVG({{ column_name }}) AS mean_value,
        COUNT({{ column_name }}) AS count_value
    FROM {{ table_name }}
),
variance AS (
    SELECT
        SUM(({{ column_name }} - mean_value) * ({{ column_name }} - mean_value)) / (count_value - 1) AS variance_value
    FROM {{ table_name }}, stats
)
SELECT CASE
    WHEN ROUND(SQRT(variance_value), 2) BETWEEN {{ lower_bound }} AND {{ upper_bound }}
    THEN 0
    ELSE 1
END AS result
FROM variance;
{% endmacro %}

{% macro expect_column_sum_to_be_between(table_name, column_name, lower_bound, upper_bound) %}
-- This macro generates a SQL query that checks if the sum of values in a specified column is between a given range.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to calculate the sum for.
-- lower_bound: The lower bound of the range.
-- upper_bound: The upper bound of the range.
--
-- Returns:
-- The sum of values in the specified column if it is between the given range.

SELECT 
    CASE 
        WHEN SUM({{ column_name }}) BETWEEN {{ lower_bound }} AND {{ upper_bound }} 
        THEN 0 
        ELSE 1 
    END AS result
FROM {{ table_name }};
{% endmacro %}

{% macro expect_column_value_z_scores_to_be_less_than(table_name, column_name, threshold) %}
-- This macro generates a SQL query that checks if the z-scores of values in a specified column are less than a given threshold.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to calculate z-scores for.
-- threshold: The z-score threshold.
--
-- Returns:
-- The values in the specified column and their z-scores that are less than the given threshold.

WITH Mean AS (
    SELECT 
        AVG({{ column_name }}) AS mean_value
    FROM {{ table_name }}
),
Stats AS (
    SELECT 
        Mean.mean_value,
        SQRT(
            SUM(({{ column_name }} - Mean.mean_value) * ({{ column_name }} - Mean.mean_value))
            / (COUNT({{ column_name }}) - 1)
        ) AS stdev_value
    FROM {{ table_name }}, Mean
),
ZScores AS (
    SELECT 
        {{ column_name }},
        ({{ column_name }} - Stats.mean_value) / Stats.stdev_value AS z_score
    FROM {{ table_name }}, Stats
)
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM ZScores WHERE z_score < {{ threshold }} AND z_score != 0) THEN 0
        ELSE 1
    END AS result;
{% endmacro %}

{% macro expect_column_values_to_be_between(table_name, column_name, lower_bound, upper_bound) %}
-- This macro generates a SQL query that checks if the values in a specified column are between a given range.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to check the values for.
-- lower_bound: The lower bound of the range.
-- upper_bound: The upper bound of the range.
--
-- Returns:
-- The values in the specified column that are not between the given range.

SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1
            FROM {{ table_name }}
            WHERE {{ column_name }} NOT BETWEEN {{ lower_bound }} AND {{ upper_bound }}
        ) THEN 0
        ELSE 1
    END AS result;
{% endmacro %}

{% macro expect_column_values_to_be_in_set(table_name, column_name, values) %}
-- This macro generates a SQL query that checks if the values in a specified column are within a given set.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to check the values for.
-- values: A list of values that the column values should be within.
--
-- Returns:
-- The values in the specified column that are not within the given set.

SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1 
            FROM {{ table_name }}
            WHERE {{ column_name }} NOT IN ({{ values | join(', ') }})
        ) THEN 0
        ELSE 1
    END AS result;
{% endmacro %}

{% macro expect_column_values_to_not_be_in_set(table_name, column_name, values) %}
-- This macro generates a SQL query that checks if the values in a specified column are not within a given set.
--
-- Parameters:
-- table_name: The name of the table to query.
-- column_name: The name of the column to check the values for.
-- values: A list of values that the column values should not be within.
--
-- Returns:
-- The values in the specified column that are within the given set.

SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1 
            FROM {{ table_name }}
            WHERE {{ column_name }} IN ({{ values | map('string') | join(', ') }})
        ) THEN 0
        ELSE 1
    END AS result;
{% endmacro %}

{% macro expect_multicolumn_sum_to_equal(table_name, columns, expected_sum) %}
-- This macro generates a SQL query that checks if the sum of values across multiple specified columns equals a given value for each row.
--
-- Parameters:
-- table_name: The name of the table to query.
-- columns: A list of columns to sum the values for.
-- expected_sum: The expected sum of the values across the specified columns.
--
-- Returns:
-- The rows where the sum of values across the specified columns equals the given value.

SELECT 
    CASE 
        WHEN EXISTS (
            SELECT 1 
            FROM {{ table_name }}
            WHERE ({{ columns | join(' + ') }}) != {{ expected_sum }}
        ) THEN 1
        ELSE 0
    END AS result;
{% endmacro %}