<%@ val task: ai.starlake.schema.model.AutoTaskInfo %>
<%@ val schemaHandler: ai.starlake.schema.handlers.SchemaHandler %>
<%@ val relationsSVG: String %>
<%@ val aclSVG: String %>
<%@ val sql: String %>
<%@ val python: String %>


# ${ task.getTableName() }

${ task.comment.getOrElse("No description provided") }

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';


<Tabs groupId="table">
<TabItem value="general" label="General">

| Property | Value |
| --- | ----------- |
| Name | ${ task.name } |
| Write Strategy | <ul><li>types: ${ task.writeStrategy.flatMap(_.types.map(_.toList.map(t => "<li>" + t._1 + ": " + t._2 + "</li>").mkString("<ul>", "", "</ul>"))).getOrElse("")}</li><li>type: ${ task.writeStrategy.map(_.`type`.toString).getOrElse("")}</li><li>key: ${ task.writeStrategy.map(_.key.toList.mkString(", ")).getOrElse("")}</li><li>key: ${ task.writeStrategy.flatMap(_.timestamp).getOrElse("")}</li><li>queryFilter: ${ task.writeStrategy.flatMap(_.queryFilter).getOrElse("")}</li><li>on: ${ task.writeStrategy.flatMap(_.on.map(_.toString)).getOrElse("")}</li><li>startTs: ${ task.writeStrategy.flatMap(_.startTs).getOrElse("")}</li><li>endTs: ${ task.writeStrategy.flatMap(_.endTs).getOrElse("")}</li></ul> |
| Tags | ${ task.tags.toList.sorted.mkString(",") } |

</TabItem>

#if (sql != "")
<TabItem value="sql" label="SQL">

```sql
${unescape(sql)}
```

</TabItem>
#end


#if (python != "")
<TabItem value="python" label="Python">

```python
${unescape(python)}
```

</TabItem>
#end


<TabItem value="relations" label="Relations">

![Exemple de bannière](./${relationsSVG})

![Exemple de bannière](./${aclSVG})



</TabItem>
</Tabs>
