<%@ val domains: scala.collection.immutable.List[ai.starlake.schema.model.Domain] %>


<%
    val azureContainer = sys.env.get("SL_AZURE_CONTAINER").getOrElse("STARLAKE_CONTAINER")
    val azureTenant = sys.env.get("SL_AZURE_TENANT").getOrElse("STARLAKE_TENANT")
    val azureAccount = sys.env.get("SL_AZURE_ACCOUNT").getOrElse("STARLAKE_ACCOUNT")
    val azureIntegration = sys.env.get("SL_AZURE_INTEGRATION").getOrElse("STARLAKE_INTEGRATION")
    val azureNotificationIntegration = sys.env.get("SL_AZURE_NOTIFICATION_INTEGRATION").getOrElse("STARLAKE_NOTIFICATION_INTEGRATION")
    val azureGroup = sys.env.get("SL_AZURE_GROUP").getOrElse("STARLAKE_GROUP")
    val azureLocation = sys.env.get("SL_AZURE_LOCATION").getOrElse("francecentral")
    val azureStorageAccount = sys.env.get("SL_AZURE_STORAGE_ACCOUNT").getOrElse("STARLAKE_STORAGE_ACCOUNT")
    val azureStorageQueue = sys.env.get("SL_AZURE_STORAGE_QUEUE").getOrElse("STARLAKE_STORAGE_QUEUE")
    val azureEventSubscription = sys.env.get("SL_AZURE_EVENT_SUBSCRIPTION").getOrElse("STARLAKE_EVENT_SUBSCRIPTION")
%>
<%
    var result = ""
    val urls = domains.map { domain =>
                    val domainName = domain.finalName
                    s"'azure://${azureAccount}.blob.core.windows.net/${azureContainer}/${domainName}/'"
    }
    result = result + s"""
        |CREATE OR REPLACE STORAGE INTEGRATION $azureIntegration
        |  TYPE = EXTERNAL_STAGE
        |  STORAGE_PROVIDER = 'AZURE'
        |  ENABLED = TRUE
        |  AZURE_TENANT_ID = '${azureTenant}'
        |  STORAGE_ALLOWED_LOCATIONS = (${urls.mkString(",")});
        |DESC STORAGE INTEGRATION $azureIntegration;
    """.stripMargin

    domains.foreach { domain =>
        val domainName = domain.finalName
        result = result + s"""
            |CREATE STAGE ${domainName.toUpperCase()}_STAGE
            |  URL = 'azure://$azureAccount.blob.core.windows.net/$azureContainer/$domainName/'
            |  STORAGE_INTEGRATION = $azureIntegration;
        """.stripMargin
    }

    result = result + s"""
        |CREATE NOTIFICATION INTEGRATION $azureNotificationIntegration
        |  ENABLED = true
        |  TYPE = QUEUE
        |  NOTIFICATION_PROVIDER = AZURE_STORAGE_QUEUE
        |  AZURE_STORAGE_QUEUE_PRIMARY_URI = 'https://STARLAKE.queue.core.windows.net/STARLAKE_QUEUE'
        |  AZURE_TENANT_ID = '$azureTenant';
        |DESC NOTIFICATION INTEGRATION $azureNotificationIntegration;
        """.stripMargin


    domains.foreach { domain =>
        val domainName = domain.finalName
        result = result + s"""
            |CREATE OR REPLACE STORAGE INTEGRATION ${domainName}_integration
            |  TYPE = EXTERNAL_STAGE
            |  STORAGE_PROVIDER = 'AZURE'
            |  ENABLED = TRUE
            |  AZURE_TENANT_ID = '${azureTenant}'
            |  STORAGE_ALLOWED_LOCATIONS = ('azure://${azureAccount}.blob.core.windows.net/${azureContainer}/${domainName}/');
            |DESC STORAGE INTEGRATION ${domainName}_integration;
        """.stripMargin
        domain.tables.foreach { table =>
            val tableName = table.finalName
            result = result + s"""
                |CREATE OR REPLACE PIPE ${domainName.toUpperCase()}_${tableName.toUpperCase()}_pipe
                |  AUTO_INGEST = TRUE
                |  INTEGRATION = '$azureNotificationIntegration'
                |  AS
                |  COPY INTO ${tableName}
                |  FROM @${domainName.toUpperCase()}_STAGE
                |  FILE_FORMAT = (TYPE = 'JSON');
            """.stripMargin
        }
    }
%>


${result}




<%
    val azResult = s"""
        |az login
        |az provider register --namespace Microsoft.EventGrid
        |az provider show --namespace Microsoft.EventGrid --query "registrationState"
        |az group create --name $azureGroup --location $azureLocation
        |az storage account create --resource-group $azureGroup --name $azureStorageAccount --sku Standard_LRS --location $azureLocation --kind StorageV2 --access-tier Hot
        |az storage account create --resource-group $azureGroup --name $azureStorageAccount --sku Standard_LRS --location $azureLocation --kind StorageV2 --access-tier Hot
        |az storage account keys list --resource-group $azureGroup --account-name $azureStorageAccount
        |# Get key1 value (base64)
        |az storage queue create --account-key 000000== --account-name $azureStorageAccount --name $azureStorageQueue
        |
        |export storageid=$$(az storage account show --name $azureStorageAccount --resource-group $azureGroup --query id --output tsv)
        |export queuestorageid=$$(az storage account show --name $azureStorageAccount --resource-group $azureGroup --query id --output tsv)
        |export queueid="$$queuestorageid/queueservices/default/queues/$azureStorageQueue"
        |
        |az extension add --name eventgrid
        |az eventgrid event-subscription create --source-resource-id $$storageid --name $azureEventSubscription --endpoint-type storagequeue --endpoint $$queueid --advanced-filter data.api stringin CopyBlob PutBlob PutBlockList FlushWithClose SftpCommit
        |
        |export queueurl=https://$azureStorageAccount.queue.core.windows.net/$azureStorageQueue
    """.stripMargin
%>
/*
${azResult}
*/
