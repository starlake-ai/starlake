run_storage:
  module: dagster_postgres.run_storage
  class: PostgresRunStorage
  config:
    postgres_db:
      username:
        env: DAGSTER_PG_USERNAME
      password:
        env: DAGSTER_PG_PASSWORD
      hostname:
        env: DAGSTER_PG_HOST
      db_name:
        env: DAGSTER_PG_DB
      port: 5432
event_log_storage:
  module: dagster_postgres.event_log
  class: PostgresEventLogStorage
  config:
    postgres_db:
      username:
        env: DAGSTER_PG_USERNAME
      password:
        env: DAGSTER_PG_PASSWORD
      hostname:
        env: DAGSTER_PG_HOST
      db_name:
        env: DAGSTER_PG_DB
      port: 5432
schedule_storage:
  module: dagster_postgres.schedule_storage
  class: PostgresScheduleStorage
  config:
    postgres_db:
      username:
        env: DAGSTER_PG_USERNAME
      password:
        env: DAGSTER_PG_PASSWORD
      hostname:
        env: DAGSTER_PG_HOST
      db_name:
        env: DAGSTER_PG_DB
      port: 5432
# run_coordinator:
#   module: dagster.core.run_coordinator
#   class: QueuedRunCoordinator
#   config:
#     max_concurrent_runs: 5
telemetry:
  enabled: false
nux:
  enabled: false

# storage:
#   postgres:
#     postgres_db:
#       username:
#         env: DAGSTER_PG_USERNAME
#       password:
#         env: DAGSTER_PG_PASSWORD
#       hostname:
#         env: DAGSTER_PG_HOST
#       db_name:
#         env: DAGSTER_PG_DB
#       port: 5432
# run_launcher:
#   module: dagster_docker
#   class: DockerRunLauncher
# retention:
#   schedule:
#     purge_after_days: 90 # sets retention policy for schedule ticks of all types
#   sensor:
#     purge_after_days:
#       skipped: 7
#       failure: 30
#       success: -1 # keep success ticks indefinitely
# sensors:
#   use_threads: true
#   num_workers: 8
# schedules:
#   use_threads: true
#   num_workers: 8