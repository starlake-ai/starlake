"use strict";(self.webpackChunkstarlake=self.webpackChunkstarlake||[]).push([[6015],{15680:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>f});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(r),d=n,f=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return r?a.createElement(f,l(l({ref:t},u),{},{components:r})):a.createElement(f,l({ref:t},u))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},96875:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=r(9668),n=(r(96540),r(15680));const o={},l="Parallel extraction",i={unversionedId:"guides/extract/parallel",id:"guides/extract/parallel",title:"Parallel extraction",description:"To make extraction faster, we can parallelize the extraction process.",source:"@site/docs/0300-guides/100-extract/120-parallel.mdx",sourceDirName:"0300-guides/100-extract",slug:"/guides/extract/parallel",permalink:"/docs/next/guides/extract/parallel",draft:!1,editUrl:"https://github.com/starlake-ai/starlake/edit/master/docs/docs/0300-guides/100-extract/120-parallel.mdx",tags:[],version:"current",sidebarPosition:120,frontMatter:{},sidebar:"starlakeSidebar",previous:{title:"Incremental extraction",permalink:"/docs/next/guides/extract/incremental"},next:{title:"Monitoring",permalink:"/docs/next/guides/extract/monitoring"}},c={},s=[],u={toc:s},p="wrapper";function m(e){let{components:t,...r}=e;return(0,n.yg)(p,(0,a.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"parallel-extraction"},"Parallel extraction"),(0,n.yg)("p",null,"To make extraction faster, we can parallelize the extraction process.\nThis is done by setting the ",(0,n.yg)("inlineCode",{parentName:"p"},"numPartitions")," attribute."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'{7,8,9} title="metadata/extract/my_extract_config.sl.yml"',"{7,8,9}":!0,title:'"metadata/extract/my_extract_config.sl.yml"'},'extract:\n  connectionRef: "duckdb" # The database connection to use\n  jdbcSchemas:\n    - schema: "starbake"\n      tables:\n        - name: "order"               # table names or  "*" to extract all tables\n          fullExport: true            # (optional) set to false to use incremental extraction\n          partitionColumn: "order_id" # (optional) column to use for partitioning\n          numPartitions: 4            # Level of parallelism (defaults to 1 aka no parallelism)\n  ...\n')),(0,n.yg)("p",null,"Note that when using parallel extraction,"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"the ",(0,n.yg)("inlineCode",{parentName:"li"},"partitionColumn")," attribute must be set to the column to use for partitioning and"),(0,n.yg)("li",{parentName:"ul"},"the ",(0,n.yg)("inlineCode",{parentName:"li"},"numPartitions")," attribute must be set to the number of partitions to use.")),(0,n.yg)("p",null,"If incremental extraction is used (fullExport set to false),\nthe partitionColumn used for parallel extraction is also the column used for incremental extraction:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'{7,8,9} title="metadata/extract/my_extract_config.sl.yml"',"{7,8,9}":!0,title:'"metadata/extract/my_extract_config.sl.yml"'},'extract:\n  connectionRef: "duckdb" # The database connection to use\n  jdbcSchemas:\n    - schema: "starbake"\n      tables:\n        - name: "order"               # table names or  "*" to extract all tables\n          fullExport: false            # (optional) set to false to use incremental extraction\n          partitionColumn: "order_id" # (optional) column to use for partitioning\n          numPartitions: 4            # Level of parallelism (defaults to 1 aka no parallelism)\n  ...\n')))}m.isMDXComponent=!0}}]);