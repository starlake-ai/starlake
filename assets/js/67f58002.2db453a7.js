"use strict";(self.webpackChunkstarlake=self.webpackChunkstarlake||[]).push([[4177],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},49619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={},i="Expectations",l={unversionedId:"user-guide/expectations",id:"version-1.0.0/user-guide/expectations",title:"Expectations",description:"Expectations are available for your load and transform jobs. They are used to validate the data that is being loaded into your data warehouse. Expectations are defined in the expectations section of your job configuration file and",source:"@site/versioned_docs/version-1.0.0/0400-user-guide/450-expectations.mdx",sourceDirName:"0400-user-guide",slug:"/user-guide/expectations",permalink:"/starlake/docs/user-guide/expectations",draft:!1,editUrl:"https://github.com/starlake-ai/starlake/edit/master/docs/versioned_docs/version-1.0.0/0400-user-guide/450-expectations.mdx",tags:[],version:"1.0.0",sidebarPosition:450,frontMatter:{},sidebar:"starlakeSidebar",previous:{title:"About Metrics",permalink:"/starlake/docs/user-guide/metrics"},next:{title:"Documentation",permalink:"/starlake/docs/user-guide/docusausrus"}},s={},c=[],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"expectations"},"Expectations"),(0,r.kt)("p",null,"Expectations are available for your load and transform jobs. They are used to validate the data that is being loaded into your data warehouse. Expectations are defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"expectations")," section of your job configuration file and\nare based on jinja macros libraries defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata/expectations")," directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"{7,8}","{7,8}":!0},'\ntable:\n  name: "locations"\n  pattern: "locations.*.json"\n  attributes:\n  ...\n  expectations:\n    - "col_value_count_greater_than(\'id\', 1) => count == 0"\n    - "row_count_to_be_between(1000, 2000) => result(0) == 1"\n\n')),(0,r.kt)("p",null,"In the example above:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"count")," refers to the number of rows returned by the query. ",(0,r.kt)("inlineCode",{parentName:"li"},"count")," is of type ",(0,r.kt)("inlineCode",{parentName:"li"},"Long")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"result")," refers to the first row retruned by the query. Useful for count queries.\nto access the first column of the second row, use ",(0,r.kt)("inlineCode",{parentName:"li"},"results(1)(0)"),".\n",(0,r.kt)("inlineCode",{parentName:"li"},"result")," is of type ",(0,r.kt)("inlineCode",{parentName:"li"},"Seq[Any]"),". ",(0,r.kt)("inlineCode",{parentName:"li"},"results")," is of type ",(0,r.kt)("inlineCode",{parentName:"li"},"Seq[Seq[Any]]"),". Both can have their elements cast to the appropriate type")),(0,r.kt)("p",null,"You may write any scala code in the condition part of the expectation.\nThe code will be evaluated and the result will be used to determine if the expectation is met or not.\nThe result of the evaluation must be a boolean."),(0,r.kt)("p",null,"The above example will validate that the number of rows loaded into the ",(0,r.kt)("inlineCode",{parentName:"p"},"locations")," table is between 1000 and 2000. If the expectation is not met, the job will fail and the error will be reported in the audit tables."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"is_row_count_to_be_between")," is a macro defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata/expectations/my_lib1.j2")," file.\nYou can define your own macros in the ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata/expectations")," directory.\nThe macros are defined in jinja2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="metadata/expectations/my_lib1.j2"',title:'"metadata/expectations/my_lib1.j2"'},"{% macro is_row_count_to_be_between(min_value, max_value, table_name = 'SL_THIS') -%}\n    select \n        case \n            when count(*) between {{min_value}} and {{max_value}} then 1 \n            else 0 \n        end\n    from {{table_name}}\n{%- endmacro %}\n\n{% macro col_value_count_greater_than(col, count, table_name='SL_THIS') %}\n    SELECT {{ col }}, count(*) FROM {{ table_name }}\n    GROUP BY {{ col }}\n    HAVING count(*) > {{ count }}\n{% endmacro %}\n\n\n")))}d.isMDXComponent=!0}}]);