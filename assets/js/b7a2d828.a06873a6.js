"use strict";(self.webpackChunkstarlake_docs=self.webpackChunkstarlake_docs||[]).push([[9282],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,k=c["".concat(o,".").concat(d)]||c[d]||m[d]||l;return a?n.createElement(k,s(s({ref:t},u),{},{components:a})):n.createElement(k,s({ref:t},u))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,s=new Array(l);s[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<l;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},16478:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_position:30},s="Transform",i={unversionedId:"reference/transform",id:"reference/transform",title:"Transform",description:"Job",source:"@site/docs/050-reference/030.transform.mdx",sourceDirName:"050-reference",slug:"/reference/transform",permalink:"/starlake/docs/next/reference/transform",draft:!1,editUrl:"https://github.com/starlake-ai/starlake/edit/master/docs/docs/050-reference/030.transform.mdx",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"starlakeSidebar",previous:{title:"Load",permalink:"/starlake/docs/next/reference/load"},next:{title:"Examples",permalink:"/starlake/docs/next/reference/examples"}},o={},p=[{value:"Job",id:"job",level:2},{value:"Task",id:"task",level:2},{value:"Partitioning",id:"partitioning",level:2},{value:"Clustering",id:"clustering",level:2},{value:"Views",id:"views",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"transform"},"Transform"),(0,r.kt)("h2",{id:"job"},"Job"),(0,r.kt)("p",null,"A job is a set of transform tasks executed using the specified engine."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"name: String\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Required"),". Job logical name."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"tasks: List[Task]\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Required"),". List of transform tasks to execute."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"area : String\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Required"),". Area where the data is located."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When using the BigQuery engine, teh area corresponds to the dataset name we will be working on in this job."),(0,r.kt)("li",{parentName:"ul"},'When using the Spark engine, this is folder where the data should be store. Default value is "business"')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"format: String\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Optional"),'. output file format when using Spark engine. Ingored for BigQuery. Default value is "parquet".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"coalesce: Boolean\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Optional"),". When outputting files, should we coalesce it to a single file. Useful when CSV is the output format."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"udf : String\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Optional"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Register UDFs written in this JVM class when using Spark engine"),(0,r.kt)("li",{parentName:"ul"},"Register UDFs stored at this location when using BigQuery engine")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"views : Map[String,String]\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Optional"),". Create temporary views using where the key is the view name and the map the SQL request corresponding to this view using the SQL engine supported syntax."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"engine : String\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Optional"),". SPARK or BQ. Default value is SPARK."),(0,r.kt)("h2",{id:"task"},"Task"),(0,r.kt)("p",null,"Task executed in the context of a job. Each task is executed in its own session."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"sql: String\n")),(0,r.kt)("p",null,"Main SQL request to exexute (do not forget to prefix table names with the database name to avoid conflicts)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"domain: String\n")),(0,r.kt)("p",null,"Output domain in output Area (Will be the Database name in Hive or Dataset in BigQuery)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"dataset: String\n")),(0,r.kt)("p",null,"Dataset Name in output Area (Will be the Table name in Hive & BigQuery)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"write: String\n")),(0,r.kt)("p",null,"Append to or overwrite existing data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"area: String\n")),(0,r.kt)("p",null,"Target Area where domain / dataset will be stored."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"partition: List[String]\n")),(0,r.kt)("p",null,"List of columns used for partitioning the outtput."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"presql: List[String]\n")),(0,r.kt)("p",null,"List of SQL requests to executed before the main SQL request is run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"postsql: List[String]\n")),(0,r.kt)("p",null,"List of SQL requests to executed after the main SQL request is run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"sink: Sink\n")),(0,r.kt)("p",null,"Where to sink the data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"rls: List[RowLevelSecurity]\n")),(0,r.kt)("p",null,"Row level security policy to apply too the output data."),(0,r.kt)("h2",{id:"partitioning"},"Partitioning"),(0,r.kt)("h2",{id:"clustering"},"Clustering"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://deepsense.ai/optimize-spark-with-distribute-by-and-cluster-by/"},"https://deepsense.ai/optimize-spark-with-distribute-by-and-cluster-by/")),(0,r.kt)("h2",{id:"views"},"Views"))}m.isMDXComponent=!0}}]);