"use strict";(self.webpackChunkstarlake=self.webpackChunkstarlake||[]).push([[23],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>m});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),g=r,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},20313:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(9668),r=(n(96540),n(15680));const o={},i="Expectations",l={unversionedId:"guides/load/expectations",id:"guides/load/expectations",title:"Expectations",description:"Expectations allow to test if the resulting table contains the expected data.",source:"@site/docs/0300-guides/200-load/210-expectations.mdx",sourceDirName:"0300-guides/200-load",slug:"/guides/load/expectations",permalink:"/starlake/docs/next/guides/load/expectations",draft:!1,editUrl:"https://github.com/starlake-ai/starlake/edit/master/docs/docs/0300-guides/200-load/210-expectations.mdx",tags:[],version:"current",sidebarPosition:210,frontMatter:{},sidebar:"starlakeSidebar",previous:{title:"Access control",permalink:"/starlake/docs/next/guides/load/security"},next:{title:"Orchestration",permalink:"/starlake/docs/next/guides/load/orchestration"}},c={},s=[{value:"Writing expectation queries",id:"writing-expectation-queries",level:2}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"expectations"},"Expectations"),(0,r.yg)("p",null,"Expectations allow to test if the resulting table contains the expected data."),(0,r.yg)("p",null,"They are defined using the ",(0,r.yg)("inlineCode",{parentName:"p"},"expectations")," attribute as follows:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"\ntable:\n    ...\n    attributes:\n       - name: id\n        type: integer\n        ...\n    expectations:\n      - \"is_col_value_not_unique('id') => result(0) == 1\"\n\n")),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"expectations")," attribute is a list of strings, each string representing an expectation. The expectation is defined as a string with the following format:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"<query_name>(<param>*) => <condition>\n")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<query_name>")," is the name of the expectation to be tested. The available expectations are defined in the ",(0,r.yg)("inlineCode",{parentName:"p"},"expectations")," directory. An query is a SELECT statement run against the target table and the result is used to test the expectation."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<param>")," is the parameter to be passed to the expectation. It is a value that can be read as the expected type by the expectation. Parameters are separated by commas."),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"<condition>")," is the condition to be tested. It is a string that can be parsed to a boolean by the expectation and that will be used to test the expectation:"),(0,r.yg)("p",null,"The following variables are available in the condition:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Variable"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"count"),(0,r.yg)("td",{parentName:"tr",align:null},"Long"),(0,r.yg)("td",{parentName:"tr",align:null},"The number of rows in the result")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"result"),(0,r.yg)("td",{parentName:"tr",align:null},"Seq","[Any]"),(0,r.yg)("td",{parentName:"tr",align:null},"The first row in the result as a collection of values (one per column)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"results"),(0,r.yg)("td",{parentName:"tr",align:null},"Seq[Seq","[Any]","]"),(0,r.yg)("td",{parentName:"tr",align:null},"The result as a collection of rows, each row as a collection of values (one per column)")))),(0,r.yg)("h2",{id:"writing-expectation-queries"},"Writing expectation queries"),(0,r.yg)("p",null,"Expectation queries are mainly jinja macro templates that are used to generate SQL queries."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-jinja"},"{% macro is_col_value_not_unique(col, table='SL_THIS') %}\n    SELECT max(cnt)\n    FROM (SELECT {{ col }}, count(*) as cnt FROM {{ table }}\n    GROUP BY {{ col }}\n    HAVING cnt > 1)\n{% endmacro %}\n\n{% macro is_row_count_to_be_between(min_value, max_value, table_name = 'SL_THIS') -%}\n    select\n        case\n            when count(*) between {{min_value}} and {{max_value}} then 1\n        else\n            0\n        end\n    from {{table_name}}\n{%- endmacro %}\n\n{% macro col_value_count_greater_than(col, table_name='SL_THIS') %}\n    SELECT {{ col }}, count(*) FROM {{ table_name }}\n    GROUP BY {{ col }}\n    HAVING count(*) > {{ count }}\n{% endmacro %}\n\n\n{% macro count_by_value(col, value, table='SL_THIS') %}\n    SELECT count(*)\n    FROM {{ table }}\n    WHERE {{ col }} LIKE '{{ value }}'\n{% endmacro %}\n\n\n{% macro column_occurs(col, times, table='SL_THIS') %}\n    SELECT max(cnt)\n    FROM  (\n        SELECT {{ col }}, count(*) as cnt FROM {{ table }}\n        GROUP BY {{ col }}\n        HAVING cnt == {{ times }}\n    )\n{% endmacro %}\n")),(0,r.yg)("p",null,"Put the queries in the ",(0,r.yg)("inlineCode",{parentName:"p"},"expectations")," directory and use the ",(0,r.yg)("inlineCode",{parentName:"p"},".j2")," extension.\nYou may organize your queries in subdirectories."))}d.isMDXComponent=!0}}]);