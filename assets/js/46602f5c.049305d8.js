"use strict";(self.webpackChunkstarlake=self.webpackChunkstarlake||[]).push([[5357],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},w="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),w=d(a),u=r,m=w["".concat(o,".").concat(u)]||w[u]||h[u]||i;return a?n.createElement(m,l(l({ref:t},p),{},{components:a})):n.createElement(m,l({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[w]="string"==typeof e?e:r,l[1]=s;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},72507:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const i={},l="Write strategies",s={unversionedId:"guides/load/strategies",id:"guides/load/strategies",title:"Write strategies",description:"When loading a file to a database table you can specify how to data is written to the table.",source:"@site/docs/0300-guides/200-load/160-strategies.mdx",sourceDirName:"0300-guides/200-load",slug:"/guides/load/strategies",permalink:"/starlake/docs/next/guides/load/strategies",draft:!1,editUrl:"https://github.com/starlake-ai/starlake/edit/master/docs/docs/0300-guides/200-load/160-strategies.mdx",tags:[],version:"current",sidebarPosition:160,frontMatter:{},sidebar:"starlakeSidebar",previous:{title:"Load strategies",permalink:"/starlake/docs/next/guides/load/load-strategies"},next:{title:"Native load",permalink:"/starlake/docs/next/guides/load/native"}},o={},d=[{value:"APPEND strategy",id:"append-strategy",level:2},{value:"OVERWRITE strategy",id:"overwrite-strategy",level:2},{value:"OVERWRITE_BY_KEY strategy",id:"overwrite_by_key-strategy",level:2},{value:"OVERWRITE_BY_KEY_AND_TIMESTAMP strategy",id:"overwrite_by_key_and_timestamp-strategy",level:2},{value:"OVERWRITE_BY_PARTITION strategy",id:"overwrite_by_partition-strategy",level:2},{value:"SCD2 strategy",id:"scd2-strategy",level:2}],p={toc:d},w="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(w,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"write-strategies"},"Write strategies"),(0,r.kt)("p",null,"When loading a file to a database table you can specify how to data is written to the table.\nThat's what the `metadata.writeStrategy' property is for."),(0,r.kt)("p",null,"The following strategies are available:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"APPEND")," (default): Insert all rows into the table. If the table already contains data, the new rows will be appended."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OVERWRITE"),": Replace all rows in the table with the new rows. This will delete all existing rows and insert the new ones."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OVERWRITE_BY_KEY"),": Merge the new rows with the existing rows. If a row with the same key already exists in the table,\nthe new row will overwrite the old one otherwise it will be appended."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OVERWRITE_BY_KEY_AND_TIMESTAMP"),": Merge the new rows with the existing rows. If a row with the same key and an older timestamp already exists in the table, the new row will overwrite the old one otherwise it will be appended."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OVERWRITE_BY_PARTITION"),": Merge the new rows with the existing rows. All existing partitions present in the new data will be overwritten. All other partitions will be left untouched and new partitions will be appended."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SCD2"),": Merge the new rows with the existing rows using the ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Slowly_changing_dimension"},"Slowly Changing Dimension Type 2")," strategy. This will keep track of the history of the rows in the table.")),(0,r.kt)("h2",{id:"append-strategy"},"APPEND strategy"),(0,r.kt)("p",null,"If the table does not exist, it will be created. If the table already contains data, the new rows will be appended."),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Append to the table."',title:'"Append',to:!0,the:!0,'table."':!0},'table:\n  pattern: "<table>.*.csv"\n  metadata:\n    format: "DSV"\n    withHeader: true\n    separator: ";"\n    writeStrategy:\n      type: "APPEND"\n  attributes:\n    - ...\n')),(0,r.kt)("h2",{id:"overwrite-strategy"},"OVERWRITE strategy"),(0,r.kt)("p",null,"If the table does not exist, it will be created.\nReplace all rows in the table with the new rows. This will delete all existing rows and insert the new ones."),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Overwrite the table."',title:'"Overwrite',the:!0,'table."':!0},'table:\n  pattern: "<table>.*.csv"\n  metadata:\n    format: "DSV"\n    withHeader: true\n    separator: ";"\n    writeStrategy:\n      type: "OVERWRITE"\n  attributes:\n    - ...\n')),(0,r.kt)("h2",{id:"overwrite_by_key-strategy"},"OVERWRITE_BY_KEY strategy"),(0,r.kt)("p",null,"If the table does not exist, it will be created.\nMerge the new rows with the existing rows.\nIf a row with the same key already exists in the table,\nthe new row will overwrite the old one otherwise it will be appended."),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=\"Overwrite by key. The column 'id' is used as key.\"",title:'"Overwrite',by:!0,"key.":!0,The:!0,column:!0,"'id'":!0,is:!0,used:!0,as:!0,'key."':!0},'table:\n  pattern: "<table>.*.csv"\n  metadata:\n    format: "DSV"\n    withHeader: true\n    separator: ";"\n    writeStrategy:\n      type: "OVERWRITE_BY_KEY"\n      key: ["id"]\n      on: TARGET\n  attributes:\n    - ...\n')),(0,r.kt)("h2",{id:"overwrite_by_key_and_timestamp-strategy"},"OVERWRITE_BY_KEY_AND_TIMESTAMP strategy"),(0,r.kt)("p",null,"If the table does not exist, it will be created.\nMerge the new rows with the existing rows. If a row with the same key and an older timestamp already exists in the table, the new row will overwrite the old one otherwise it will be appended."),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=\"Overwrite by key and timestamp. The column 'id' is used as key.\"",title:'"Overwrite',by:!0,key:!0,and:!0,"timestamp.":!0,The:!0,column:!0,"'id'":!0,is:!0,used:!0,as:!0,'key."':!0},'table:\n  pattern: "<table>.*.csv"\n  metadata:\n    format: "DSV"\n    withHeader: true\n    separator: ";"\n    writeStrategy:\n      type: "OVERWRITE_BY_KEY_AND_TIMESTAMP"\n      key: ["id"]\n      timestamp: "valid_from"\n      on: TARGET\n  attributes:\n    - ...\n')),(0,r.kt)("h2",{id:"overwrite_by_partition-strategy"},"OVERWRITE_BY_PARTITION strategy"),(0,r.kt)("p",null,"If the table does not exist, it will be created.\nMerge the new rows with the existing rows. All existing partitions present in the new data will be overwritten. All other partitions will be left untouched and new partitions will be appended."),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Overwrite by partition. Require the partition property to be set in the metadata.sink section."',title:'"Overwrite',by:!0,"partition.":!0,Require:!0,the:!0,partition:!0,property:!0,to:!0,be:!0,set:!0,in:!0,"metadata.sink":!0,'section."':!0},'table:\n  pattern: "<table>.*.csv"\n  metadata:\n    format: "DSV"\n    withHeader: true\n    separator: ";"\n    writeStrategy:\n      type: "OVERWRITE_BY_PARTITION"\n      on: TARGET\n  attributes:\n    - ...\n')),(0,r.kt)("h2",{id:"scd2-strategy"},"SCD2 strategy"),(0,r.kt)("p",null,"If the table does not exist, it will be created.\nMerge the new rows with the existing rows using the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Slowly_changing_dimension"},"Slowly Changing Dimension Type 2")," strategy. This will keep track of the history of the rows in the table."),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=\"Slow changing dimension Type 2. The column 'id' is used as key and the column 'date' is used as timestamp.\"",title:'"Slow',changing:!0,dimension:!0,Type:!0,"2.":!0,The:!0,column:!0,"'id'":!0,is:!0,used:!0,as:!0,key:!0,and:!0,the:!0,"'date'":!0,'timestamp."':!0},'table:\n  pattern: "<table>.*.csv"\n  metadata:\n    format: "DSV"\n    withHeader: true\n    separator: ";"\n    writeStrategy:\n      type: "SCD2"\n      key: ["id"]\n      timestamp: "date"\n      start_ts: "valid_from"\n      end_ts: "valid_to"\n      on: BOTH\n  attributes:\n    - ...\n')),(0,r.kt)("br",null),"the `start_ts` and `end_ts` properties are used to specify the names of the columns that will be used to store the start and end timestamps of the rows.",(0,r.kt)("p",null,"They may be omitted. In that case, the default values ",(0,r.kt)("inlineCode",{parentName:"p"},"sl_start_ts")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sl_end_ts")," will be used."),(0,r.kt)("p",null,"These default values may be changed in the ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata/application.sl.yml")," file by setting the following global variables ."),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'application:\n  ...\n  scd2StartTimestamp: "sl_start_ts"\n  scd2EndTimestamp: "sl_end_ts"\n')))}h.isMDXComponent=!0}}]);