"use strict";(self.webpackChunkstarlake=self.webpackChunkstarlake||[]).push([[5434],{29431:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>r});var i=a(74848),t=a(28453);const o={},l="Load",d={id:"guides/load/load",title:"Load",description:"You'll use Load instead of Autoload when:",source:"@site/docs/0300-guides/200-load/106-load.mdx",sourceDirName:"0300-guides/200-load",slug:"/guides/load/load",permalink:"/starlake/docs/next/guides/load/load",draft:!1,unlisted:!1,editUrl:"https://github.com/starlake-ai/starlake/edit/master/docs/docs/0300-guides/200-load/106-load.mdx",tags:[],version:"current",sidebarPosition:106,frontMatter:{},sidebar:"starlakeSidebar",previous:{title:"Autoload",permalink:"/starlake/docs/next/guides/load/autoload"},next:{title:"Load DSV files",permalink:"/starlake/docs/next/guides/load/csv"}},s={},r=[{value:"Domain configuration",id:"domain-configuration",level:2},{value:"Table configuration",id:"table-configuration",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"load",children:"Load"}),"\n",(0,i.jsx)(n.p,{children:"You'll use Load instead of Autoload when:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You want to load data from a file when the separator cannot be detected easily (e.g. a file with a multichar separator)"}),"\n",(0,i.jsxs)(n.li,{children:["You want to load the data from a folders that are not in the standard ",(0,i.jsx)(n.code,{children:"incoming"})," folder or that are not named after the domain name"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You may use a different folder location for your incoming files by setting the ",(0,i.jsx)(n.code,{children:"application.incoming"}),"  variable in the ",(0,i.jsx)(n.code,{children:"metadata/application.sl.yml"})," file."]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="metadata/application.sl.yml"',children:"application:\n  incoming: /path/to/incoming\n"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.p,{children:["You may also use a different incoming location per environment by setting the ",(0,i.jsx)(n.code,{children:"incoming_path"})," variable in the ",(0,i.jsx)(n.code,{children:"metadata/env.<env>.yml"})," file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="metadata/env.<env>.yml"',children:"incoming_path: /path/to/incoming\n"})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="metadata/application.sl.yml"',children:"application:\n  incoming: {{incoming_path}}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"domain-configuration",children:"Domain configuration"}),"\n",(0,i.jsxs)(n.p,{children:["We first need to define for each domain where the files will be loaded from.\nThis is done by creating a domain configuration file that describe where the ",(0,i.jsx)(n.code,{children:"load"})," command should look for the files to load"]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.p,{children:["In this case the load command will look in the directory ",(0,i.jsx)(n.code,{children:"{{incoming_path}}/starbake"})," where ",(0,i.jsx)(n.code,{children:"{{incoming_path}}"})," is an environment variable\ndefined in the ",(0,i.jsx)(n.code,{children:"metadata/env.sl.yml"})," file and that may be redefined for each environment (dev, test, prod) in the ",(0,i.jsx)(n.code,{children:"metadata/env.dev.yml"})," file for example."]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",metastring:'title="metadata/load/<domain>/_config.sl.yml"',children:'load:\n  metadata:\n    directory: "{{incoming_path}}/starbake"\n'})}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.p,{children:"Since the directory is set at the domain level, this means that all files loaded for this domain, will be loaded from this directory."}),"\n",(0,i.jsx)(n.h2,{id:"table-configuration",children:"Table configuration"}),"\n",(0,i.jsxs)(n.p,{children:["We then need to define for each table the file format and the file name pattern that the ",(0,i.jsx)(n.code,{children:"load"})," command should look for:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"csv",children:"Load CSV files"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"json",children:"Load JSON files"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"xml",children:"Load XML files"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"position",children:"Load fixed position files"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>d});var i=a(96540);const t={},o=i.createContext(t);function l(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);