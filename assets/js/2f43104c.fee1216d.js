"use strict";(self.webpackChunkstarlake=self.webpackChunkstarlake||[]).push([[3248],{12990:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=n(74848),s=n(28453);const a={},r="Load JSON Files",o={id:"guides/load/json",title:"Load JSON Files",description:"Loading a JSON file is similar to loading a CSV file except that JSON attributes may have nested attributes.",source:"@site/versioned_docs/version-1.2.0/0300-guides/200-load/120-json.mdx",sourceDirName:"0300-guides/200-load",slug:"/guides/load/json",permalink:"/starlake/docs/guides/load/json",draft:!1,unlisted:!1,editUrl:"https://github.com/starlake-ai/starlake/edit/master/docs/versioned_docs/version-1.2.0/0300-guides/200-load/120-json.mdx",tags:[],version:"1.2.0",sidebarPosition:120,frontMatter:{},sidebar:"starlakeSidebar",previous:{title:"Load DSV files",permalink:"/starlake/docs/guides/load/csv"},next:{title:"Load XML files",permalink:"/starlake/docs/guides/load/xml"}},d={},l=[{value:"Infer schema",id:"infer-schema",level:2},{value:"Parsing JSON",id:"parsing-json",level:2},{value:"Attributes validation",id:"attributes-validation",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"load-json-files",children:"Load JSON Files"}),"\n",(0,i.jsx)(t.p,{children:"Loading a JSON file is similar to loading a CSV file except that JSON attributes may have nested attributes."}),"\n",(0,i.jsx)(t.h2,{id:"infer-schema",children:"Infer schema"}),"\n",(0,i.jsxs)(t.p,{children:["The very first step is to infer the schema of the file from a data file as described in the ",(0,i.jsx)(t.a,{href:"autoload#how-autoload-detects-the-format-of-the-files",children:"autoload section"})," before you start customizing your configuration. This is done using the ",(0,i.jsx)(t.code,{children:"infer-schema"})," command. This will bootstrap the configuration file for the table."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"\nstarlake infer-schema --input-path incoming/starbake\n\n"})}),"\n",(0,i.jsx)(t.h2,{id:"parsing-json",children:"Parsing JSON"}),"\n",(0,i.jsxs)(t.p,{children:["Like other file formats, JSON Parsing options are defined in the ",(0,i.jsx)(t.code,{children:"metadata"})," section of the configuration file."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"format"}),"attribute may be set to one of the values below:"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Format"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"JSON"}),(0,i.jsx)(t.td,{children:"The JSON file is parsed as a list of objects, one object per line"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"JSON_FLAT"}),(0,i.jsx)(t.td,{children:"The JSON objects do not contain any repeated or nested fields. Using this format instead of JSON makes file parsing faster"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"JSON_ARRAY"}),(0,i.jsx)(t.td,{children:"The JSON file is parsed as a single array of objects"})]})]})]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",metastring:'title="metadata/load/<domain>/<table>.sl.yml - parsing section"',children:'table:\n  pattern: "order_line.*.csv"\n  metadata:\n    format: "JSON" # or "JSON_FLAT" since the JSON objects do not contain any repeated or nested fields\n    ...\n  attributes:\n    - ...\n'})}),"\n",(0,i.jsx)(t.h2,{id:"attributes-validation",children:"Attributes validation"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"attributes"})," section of the configuration file is used to define the attributes of the JSON file.\nThe ",(0,i.jsx)(t.code,{children:"attributes"})," section is a list of objects, each object representing an attribute of the JSON file.\nIn addition to the common attributes, the ",(0,i.jsx)(t.code,{children:"attributes"})," section may contain the following attributes:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"'array' (optional): The attribute is an array of objects. The value of this attribute is a list of objects, each object representing an attribute of the array."}),"\n",(0,i.jsx)(t.li,{children:"'struct' (optional): The attribute is an object containing other attributes."}),"\n"]}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.p,{children:"Given the Json record below:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-json",children:'{\n  "order_id": 1,\n  "order_date": "2021-01-01",\n  "order_lines": [\n    {\n      "line_id": 1,\n      "product_id": 1,\n      "quantity": 2\n    },\n    {\n      "line_id": 2,\n      "product_id": 2,\n      "quantity": 3\n    }\n  ]\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"attributes"})," section of the configuration file would be:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",metastring:'title="metadata/load/<domain>/<table>.sl.yml - attributes section"',children:'table:\n  pattern: "order_line.*.csv"\n  metadata:\n    format: "JSON"\n    ...\n  attributes:\n    - name: "order_id"\n      type: "integer"\n    - name: "order_date"\n      type: "date"\n    - name: "order_lines"\n      type: "struct"\n      array: true\n      attributes:\n        - name: "line_id"\n          type: "integer"\n        - name: "product_id"\n          type: "integer"\n        - name: "quantity"\n          type: "integer"\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var i=n(96540);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);