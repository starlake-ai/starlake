"use strict";(self.webpackChunkstarlake=self.webpackChunkstarlake||[]).push([[1321],{34443:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>_,frontMatter:()=>o,metadata:()=>d,toc:()=>h});var s=n(74848),r=n(28453),a=n(11470),i=n(19365);const o={toc_min_heading_level:2,toc_max_heading_level:4},l="Customizing DAG generation",d={id:"guides/orchestrate/customization",title:"Customizing DAG generation",description:"Starlake comes with out of the box DAG templates. These templates can be customized to fit your specific needs for any scheduler of your choice.",source:"@site/versioned_docs/version-1.2.0/0300-guides/500-orchestrate/200-customization.mdx",sourceDirName:"0300-guides/500-orchestrate",slug:"/guides/orchestrate/customization",permalink:"/starlake/docs/guides/orchestrate/customization",draft:!1,unlisted:!1,editUrl:"https://github.com/starlake-ai/starlake/edit/master/docs/versioned_docs/version-1.2.0/0300-guides/500-orchestrate/200-customization.mdx",tags:[],version:"1.2.0",sidebarPosition:200,frontMatter:{toc_min_heading_level:2,toc_max_heading_level:4},sidebar:"starlakeSidebar",previous:{title:"Tutorial",permalink:"/starlake/docs/guides/orchestrate/tutorial"},next:{title:"Deploy",permalink:"/starlake/docs/category/deploy"}},c={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Command",id:"command",level:2},{value:"Configuration",id:"configuration",level:2},{value:"References",id:"references",level:3},{value:"DAG configuration for loading data",id:"dag-configuration-for-loading-data",level:4},{value:"DAG configuration for transforming data",id:"dag-configuration-for-transforming-data",level:4},{value:"Properties",id:"properties",level:3},{value:"Comment",id:"comment",level:4},{value:"Template",id:"template",level:4},{value:"Filename",id:"filename",level:4},{value:"Options",id:"options",level:4},{value:"Starlake env vars",id:"starlake-env-vars",level:5},{value:"Pre-load strategy",id:"pre-load-strategy",level:5},{value:"NONE",id:"none",level:6},{value:"IMPORTED",id:"imported",level:6},{value:"PENDING",id:"pending",level:6},{value:"ACK",id:"ack",level:6},{value:"Load dependencies",id:"load-dependencies",level:5},{value:"Additional options",id:"additional-options",level:3},{value:"IStarlakeJob",id:"istarlakejob",level:4},{value:"Concrete factory classes",id:"concrete-factory-classes",level:4},{value:"StarlakeDagsterShellJob",id:"starlakedagstershelljob",level:6},{value:"StarlakeDagsterDataprocJob",id:"starlakedagsterdataprocjob",level:6},{value:"StarlakeDagsterCloudRunJob",id:"starlakedagstercloudrunjob",level:6},{value:"Templates",id:"templates",level:2},{value:"Starlake templates",id:"starlake-templates",level:3},{value:"Data loading",id:"data-loading",level:4},{value:"Data transformation",id:"data-transformation",level:4},{value:"Customize existing templates",id:"customize-existing-templates",level:3},{value:"Transform parameters",id:"transform-parameters",level:4},{value:"jobs variable",id:"jobs-variable",level:5},{value:"Airflow user defined macros",id:"airflow-user-defined-macros",level:4},{value:"Dataproc cluster configuration",id:"dataproc-cluster-configuration",level:4},{value:"Spark configuration",id:"spark-configuration",level:4},{value:"Dependencies",id:"dependencies",level:2},{value:"Inline",id:"inline",level:3},{value:"External state change",id:"external-state-change",level:3},{value:"Airflow Data-aware scheduling",id:"airflow-data-aware-scheduling",level:4}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"customizing-dag-generation",children:"Customizing DAG generation"}),"\n","\n",(0,s.jsx)(t.p,{children:"Starlake comes with out of the box DAG templates. These templates can be customized to fit your specific needs for any scheduler of your choice."}),"\n",(0,s.jsxs)(t.p,{children:["You just need to be comfortable with ",(0,s.jsx)(t.strong,{children:"Jinja2"})," templating language and ",(0,s.jsx)(t.strong,{children:"Python"})," programming language."]}),"\n",(0,s.jsxs)(t.p,{children:["starlake is not an orchestration tool, but it can be used to generate your DAG based on templates and to run your transforms in the right\norder on your tools of choice for scheduling and monitoring batch oriented workflows.",(0,s.jsx)("br",{})]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(t.p,{children:"Starlake DAG generation relies on:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"starlake"})," command line tool"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"DAG"})," ",(0,s.jsx)(t.strong,{children:"configuration"}),"(s) and their ",(0,s.jsx)(t.strong,{children:"references"})," within the loads and tasks"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"template"}),"(s) that may be customized"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"starlake-orchestration"})," framework to dynamically generate the tasks that will be run"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"managing dependencies"})," between tasks to execute transforms in the ",(0,s.jsx)(t.strong,{children:"correct order"})]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(t.p,{children:"Before using Starlake dag generation, ensure the following minimum versions are installed on your system:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"starlake"}),": 1.0.1 or higher"]}),"\n"]}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsxs)(i.A,{label:"Airflow",value:"airflow",default:!0,children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Additional requirements for Airflow"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Apache Airflow"}),": 2.4.0 or higher (2.6.0 or higher is recommended with cloud-run)"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"starlake-airflow"}),": 0.1.2.1 or higher"]}),"\n"]})]}),(0,s.jsxs)(i.A,{label:"Dagster",value:"dagster",children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Additional requirements for Dagster"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Dagster"}),": 1.6.0 or higher"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"starlake-dagster"}),": 0.1.2 or higher"]}),"\n"]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"command",children:"Command"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"starlake dag-generate [options]\n"})}),"\n",(0,s.jsx)(t.p,{children:"where options are:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"parameter"}),(0,s.jsx)(t.th,{children:"cardinality"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["--outputDir ",(0,s.jsx)(t.code,{children:"<value>"})]}),(0,s.jsx)(t.td,{children:"optional"}),(0,s.jsxs)(t.td,{children:["Path for saving the resulting DAG file(s) (",(0,s.jsx)(t.em,{children:"${SL_ROOT}/metadata/dags/generated"})," by default)."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"--clean"}),(0,s.jsx)(t.td,{children:"optional"}),(0,s.jsxs)(t.td,{children:["Should the existing DAG file(s) be removed first (",(0,s.jsx)(t.em,{children:"false"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"--domains"}),(0,s.jsx)(t.td,{children:"optional"}),(0,s.jsxs)(t.td,{children:["Wether to generate DAG file(s) to load schema(s) or not (",(0,s.jsx)(t.em,{children:"true"})," by default if ",(0,s.jsx)(t.em,{children:"--tasks"})," option has not been specified)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"--tasks"}),(0,s.jsx)(t.td,{children:"optional"}),(0,s.jsxs)(t.td,{children:["Whether to generate DAG file(s) for tasks or not  (",(0,s.jsx)(t.em,{children:"true"})," by default if ",(0,s.jsx)(t.em,{children:"--domains"})," option has not been specified)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{children:["--tags ",(0,s.jsx)(t.code,{children:"<value>"})]}),(0,s.jsx)(t.td,{children:"optional"}),(0,s.jsx)(t.td,{children:"Whether to generate DAG file(s) for the specified tags only (no tags by default)"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(t.p,{children:["All DAG configuration files are located in ",(0,s.jsx)(t.em,{children:"${SL_ROOT}/metadata/dags"})," directory. The root element is ",(0,s.jsx)(t.strong,{children:"dag"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"references",children:"References"}),"\n",(0,s.jsx)(t.p,{children:"We reference a DAG configuration by using the configuration file name without its extension"}),"\n",(0,s.jsx)(t.h4,{id:"dag-configuration-for-loading-data",children:"DAG configuration for loading data"}),"\n",(0,s.jsxs)(t.admonition,{title:"DAG configuration for loading data",type:"note",children:[(0,s.jsxs)(t.p,{children:["The configuration files to use for ",(0,s.jsx)(t.em,{children:"loading"})," data can be defined:"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["at the ",(0,s.jsx)(t.strong,{children:"project"})," level, in the ",(0,s.jsx)(t.strong,{children:"application"})," file ",(0,s.jsx)(t.em,{children:"${SL_ROOT}/metadata/application.sl.yml"})," under the ",(0,s.jsx)(t.em,{children:"application.dagRef.load"})," property.",(0,s.jsx)("br",{}),"\nIn this case the same configuration file will be used as the default DAG configuration for all the tables in the project."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"application:\n  dagRef:\n    load: load_cloud_run_domain\n#...\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["at the ",(0,s.jsx)(t.strong,{children:"domain"})," level, in the ",(0,s.jsx)(t.strong,{children:"domain"})," configuration file ",(0,s.jsx)(t.em,{children:"${SL_ROOT}/metadata/load/{domain}/_config.sl.yml"})," under the ",(0,s.jsx)(t.em,{children:"load.metadata.dagRef"})," property.",(0,s.jsx)("br",{}),"\nIn this case the configuration file will be used as the default DAG configuration for all the tables in the domain."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"load:\n  metadata:\n    dagRef:load_dataproc_domain\n#...\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["at the ",(0,s.jsx)(t.strong,{children:"table"})," level, in the ",(0,s.jsx)(t.strong,{children:"table"})," configuration file ",(0,s.jsx)(t.em,{children:"${SL_ROOT}/metadata/load/{domain}/{table}.sl.yml"})," under the ",(0,s.jsx)(t.em,{children:"table.metadata.dagRef"})," property.",(0,s.jsx)("br",{}),"\nIn this case the configuration file will be used as the default DAG configuration for the table only."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"table:\n  metadata:\n    dagRef:load_bash_domain\n#...\n"})})]}),"\n",(0,s.jsx)(t.h4,{id:"dag-configuration-for-transforming-data",children:"DAG configuration for transforming data"}),"\n",(0,s.jsxs)(t.admonition,{title:"DAG configuration for transforming data",type:"note",children:[(0,s.jsxs)(t.p,{children:["The configuration files to use for ",(0,s.jsx)(t.em,{children:"transforming"})," data can be defined"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["at the ",(0,s.jsx)(t.strong,{children:"project"})," level, in the ",(0,s.jsx)(t.strong,{children:"application"})," file ",(0,s.jsx)(t.em,{children:"${SL_ROOT}/metadata/application.sl.yml"})," under the ",(0,s.jsx)(t.em,{children:"application.dagRef.transform"})," property.",(0,s.jsx)("br",{}),"\nIn this case the same configuration file will be used as the default DAG configuration for all the transformations in the project."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"application:\n  dagRef:\n    transform: norm_cloud_run_domain\n#...\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["at the ",(0,s.jsx)(t.strong,{children:"transformation"})," level, in the ",(0,s.jsx)(t.strong,{children:"transformation"})," configuration file ",(0,s.jsx)(t.em,{children:"${SL_ROOT}/metadata/transform/{domain}/{transformation}.sl.yml"})," under the ",(0,s.jsx)(t.em,{children:"task.dagRef"})," property.",(0,s.jsx)("br",{}),"\nIn this case the configuration file will be used as the default DAG configuration for the transformation only."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"task:\n  dagRef: agr_cloud_run_domain\n#...\n"})})]}),"\n",(0,s.jsx)(t.h3,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(t.p,{children:["A DAG configuration defines four properties: ",(0,s.jsx)(t.a,{href:"#comment",children:"comment"}),", ",(0,s.jsx)(t.a,{href:"#template",children:"template"}),", ",(0,s.jsx)(t.a,{href:"#filename",children:"filename"})," and ",(0,s.jsx)(t.a,{href:"#options",children:"options"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'dag:\n  comment: "dag for transforming tables for domain {\\{domain\\}} with cloud run" # will appear as a description of the dag\n  template: "custom_scheduled_task_cloud_run.py.j2" # the dag template to use\n  filename: "{\\{domain\\}}_norm_cloud_run.py" # the relative path to the outputDir specified as a parameter of the `dag-generate` command where the generated dag file will be copied\n  options:\n    sl_env_var: "{\\"SL_ROOT\\": \\"${root_path}\\", \\"SL_DATASETS\\": \\"${root_path}/datasets\\", \\"SL_TIMEZONE\\": \\"Europe/Paris\\"}"\n\n #...\n'})}),"\n",(0,s.jsx)(t.h4,{id:"comment",children:"Comment"}),"\n",(0,s.jsx)(t.admonition,{title:"Comment",type:"note",children:(0,s.jsxs)(t.p,{children:["A short ",(0,s.jsx)(t.strong,{children:"description"})," to describe the generated DAG."]})}),"\n",(0,s.jsx)(t.h4,{id:"template",children:"Template"}),"\n",(0,s.jsxs)(t.admonition,{title:"Template",type:"note",children:[(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"path"})," to the template that will generate the DAG(s), either:"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["an ",(0,s.jsx)(t.strong,{children:"absolute"})," path"]}),"\n",(0,s.jsxs)(t.li,{children:["a ",(0,s.jsx)(t.strong,{children:"relative"})," path name to the ",(0,s.jsx)(t.em,{children:"${SL_ROOT}metadata/dags/template"})," directory"]}),"\n",(0,s.jsxs)(t.li,{children:["a ",(0,s.jsx)(t.strong,{children:"relative"})," path name to the ",(0,s.jsx)(t.em,{children:"src/main/templates/dags"})," starlake resource directory"]}),"\n"]})]}),"\n",(0,s.jsx)(t.h4,{id:"filename",children:"Filename"}),"\n",(0,s.jsxs)(t.admonition,{title:"Filename",type:"note",children:[(0,s.jsxs)(t.p,{children:["The filename defines the ",(0,s.jsx)(t.strong,{children:"relative path"})," to the DAG(s) that will be generated. The specified path is relative to the ",(0,s.jsx)(t.strong,{children:"outputDir"})," option that was specified on the command line (or its default value if not specified)."]}),(0,s.jsxs)(t.p,{children:["The value of this property may include ",(0,s.jsx)(t.strong,{children:"special variable"}),"s that will have a direct ",(0,s.jsx)(t.strong,{children:"impact"})," on the ",(0,s.jsx)(t.strong,{children:"number of dags"})," that will be ",(0,s.jsx)(t.strong,{children:"generated"}),":"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"domain"}),": a single DAG for all tables within the domain affected by this configuration"]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'dag:\n  filename: "{\\{domain\\}}_norm_cloud_run.py" # one DAG per domain\n #...\n'})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"table"})," : as many dags as there are tables in the domain affected by this configuration"]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'dag:\n  filename: "{\\{domain\\}}_{\\{table\\}}_norm_cloud_run.py" # one DAG per table\n #...\n'})}),(0,s.jsx)(t.p,{children:"Otherwise, a single DAG will be generated for all tables affected by this configuration."})]}),"\n",(0,s.jsx)(t.h4,{id:"options",children:"Options"}),"\n",(0,s.jsx)(t.admonition,{title:"Options",type:"note",children:(0,s.jsxs)(t.p,{children:["This property allows you to pass a certain number of options to the template in the form of a ",(0,s.jsx)(t.em,{children:"dictionary"}),"."]})}),"\n",(0,s.jsxs)(t.p,{children:["Some of these ",(0,s.jsx)(t.strong,{children:"options"})," are ",(0,s.jsx)(t.strong,{children:"common"})," to all templates."]}),"\n",(0,s.jsx)(t.h5,{id:"starlake-env-vars",children:"Starlake env vars"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"sl_en_var"})," defines starlake environment variables passed as an encoded json string"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'dag:\n  options:\n    sl_env_var: "{\\"SL_ROOT\\": \\"${root_path}\\", \\"SL_DATASETS\\": \\"${root_path}/datasets\\", \\"SL_TIMEZONE\\": \\"Europe/Paris\\"}"\n #...\n'})}),"\n",(0,s.jsx)(t.h5,{id:"pre-load-strategy",children:"Pre-load strategy"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"pre_load_strategy"})," defines the strategy that can be used to conditionaly load the tables of a domain within the DAG."]}),"\n",(0,s.jsx)(t.p,{children:"Four possible strategies:"}),"\n",(0,s.jsx)(t.h6,{id:"none",children:"NONE"}),"\n",(0,s.jsx)(t.admonition,{title:"NONE",type:"note",children:(0,s.jsx)(t.p,{children:"The load of the domain will not be conditionned and no pre-load tasks will be executed (the default strategy)."})}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsx)(i.A,{label:"Airflow",value:"airflow",default:!0,children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(28429).A+"",width:"1288",height:"726"})})}),(0,s.jsx)(i.A,{label:"Dagster",value:"dagster",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(71189).A+"",width:"1988",height:"742"})})})]}),"\n",(0,s.jsx)(t.h6,{id:"imported",children:"IMPORTED"}),"\n",(0,s.jsxs)(t.admonition,{title:"IMPORTED",type:"note",children:[(0,s.jsxs)(t.p,{children:["This strategy implies that at least one file is present in the ",(0,s.jsx)(t.strong,{children:"landing area"})," (",(0,s.jsx)(t.em,{children:"${SL_ROOT}/incoming/{domain}"})," by default, if option ",(0,s.jsx)(t.strong,{children:"incoming_path"})," has not been specified). If there is one or more files to load, the method ",(0,s.jsx)(t.strong,{children:"sl_import"})," will be called to import the domain before loading it, otherwise the loading of the domain will be skipped."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'dag:\n  options:\n    pre_load_strategy: "imported"\n #...\n'})})]}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsx)(i.A,{label:"Airflow",value:"airflow",default:!0,children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(18639).A+"",width:"2026",height:"242"})})}),(0,s.jsx)(i.A,{label:"Dagster",value:"dagster",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(14487).A+"",width:"1138",height:"1054"})})})]}),"\n",(0,s.jsx)(t.h6,{id:"pending",children:"PENDING"}),"\n",(0,s.jsxs)(t.admonition,{title:"PENDING",type:"note",children:[(0,s.jsxs)(t.p,{children:["This strategy implies that at least one file is present in the ",(0,s.jsx)(t.strong,{children:"pending"})," ",(0,s.jsx)(t.strong,{children:"datasets area"})," of the ",(0,s.jsx)(t.strong,{children:"domain"})," (",(0,s.jsx)(t.em,{children:"${SL_ROOT}/datasets/pending/{domain}"})," by default if option ",(0,s.jsx)(t.strong,{children:"pending_path"})," has not been specified), otherwise the loading of the domain will be skipped."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'dag:\n  options:\n    pre_load_strategy: "pending"\n #...\n'})})]}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsx)(i.A,{label:"Airflow",value:"airflow",default:!0,children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(98930).A+"",width:"1798",height:"242"})})}),(0,s.jsx)(i.A,{label:"Dagster",value:"dagster",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(41258).A+"",width:"1138",height:"868"})})})]}),"\n",(0,s.jsx)(t.h6,{id:"ack",children:"ACK"}),"\n",(0,s.jsxs)(t.admonition,{title:"ACK",type:"note",children:[(0,s.jsxs)(t.p,{children:["This strategy implies that an ",(0,s.jsx)(t.strong,{children:"ack file"})," is present at the specified path (",(0,s.jsx)(t.em,{children:"${SL_ROOT}/datasets/pending/{domain}/{{{{ds}}}}.ack"})," by default if option ",(0,s.jsx)(t.strong,{children:"global_ack_file_path"})," has not been specified), otherwise the loading of the domain will be skipped."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'dag:\n  options:\n    pre_load_strategy: "ack"\n #...\n'})})]}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsx)(i.A,{label:"Airflow",value:"airflow",default:!0,children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(74696).A+"",width:"1970",height:"242"})})}),(0,s.jsx)(i.A,{label:"Dagster",value:"dagster",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(38496).A+"",width:"1138",height:"1022"})})})]}),"\n",(0,s.jsx)(t.h5,{id:"load-dependencies",children:"Load dependencies"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"load_dependencies"})," defines wether or not we want to ",(0,s.jsx)(t.strong,{children:"generate recursively"})," all the ",(0,s.jsx)(t.strong,{children:"dependencies"})," associated to each task for which the transformation DAG was generated (",(0,s.jsx)(t.em,{children:"False"})," by default)."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"dag:\n  options:\n    load_dependencies: True\n #...\n"})}),"\n",(0,s.jsx)(t.h3,{id:"additional-options",children:"Additional options"}),"\n",(0,s.jsxs)(t.p,{children:["Depending on the ",(0,s.jsx)(t.strong,{children:"template"})," chosen, a specific ",(0,s.jsx)(t.strong,{children:"concrete"})," factory class extending ",(0,s.jsx)(t.code,{children:"ai.starlake.job.IStarlakeJob"})," will be instantiated for which additional options may be required."]}),"\n",(0,s.jsx)(t.h4,{id:"istarlakejob",children:"IStarlakeJob"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ai.starlake.job.IStarlakeJob"})," is the ",(0,s.jsx)(t.strong,{children:"generic factory interface"})," responsible for ",(0,s.jsx)(t.strong,{children:"generating"})," the ",(0,s.jsx)(t.strong,{children:"tasks"})," that will run the starlake's ",(0,s.jsx)(t.a,{href:"../../cli/stage",children:"stage"}),", ",(0,s.jsx)(t.a,{href:"../../category/load",children:"load"})," and ",(0,s.jsx)(t.a,{href:"../../category/transform",children:"transform"})," commands:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"sl_import"})," will generate the task that will run the starlake ",(0,s.jsx)(t.a,{href:"../../cli/stage",children:"stage"})," command."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def sl_import(\n    self, \n    task_id: str, \n    domain: str, \n    **kwargs) -> BaseOperator:\n    #...\n"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"name"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"task_id"}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional task id (",(0,s.jsx)(t.code,{children:"\\{domain\\}_import"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"domain"}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the required domain to import"})]})]})]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"sl_load"})," will generate the task that will run the starlake ",(0,s.jsx)(t.a,{href:"../../cli/load",children:"load"})," command."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def sl_load(\n    self, \n    task_id: str, \n    domain: str, \n    table: str, \n    spark_config: StarlakeSparkConfig=None,\n    **kwargs) -> BaseOperator:\n    #...\n"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"name"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"task_id"}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional task id (",(0,s.jsx)(t.code,{children:"\\{domain\\}_\\{table\\}_load"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"domain"}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the required domain of the table to load"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"table"}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the required table to load"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"spark_config"}),(0,s.jsx)(t.td,{children:"StarlakeSparkConfig"}),(0,s.jsxs)(t.td,{children:["the optional ",(0,s.jsx)(t.code,{children:"ai.starlake.job.StarlakeSparkConfig"})]})]})]})]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"sl_transform"})," will generate the task that will run the starlake ",(0,s.jsx)(t.a,{href:"../../cli/transform",children:"transform"})," command."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def sl_transform(\n    self, \n    task_id: str, \n    transform_name: str, \n    transform_options: str=None, \n    spark_config: StarlakeSparkConfig=None, **kwargs) -> BaseOperator:\n    #...\n"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"name"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"task_id"}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional task id (",(0,s.jsx)(t.code,{children:"{transform_name}"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"transform_name"}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the transform to run"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"transform_options"}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the optional transform options"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"spark_config"}),(0,s.jsx)(t.td,{children:"StarlakeSparkConfig"}),(0,s.jsxs)(t.td,{children:["the optional ",(0,s.jsx)(t.code,{children:"ai.starlake.job.StarlakeSparkConfig"})]})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["Ultimately, all of these methods will call the ",(0,s.jsx)(t.strong,{children:"sl_job"})," method that needs to be ",(0,s.jsx)(t.strong,{children:"implemented"})," in all ",(0,s.jsx)(t.strong,{children:"concrete"})," factory classes."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"def sl_job(\n    self, \n    task_id: str, \n    arguments: list, \n    spark_config: StarlakeSparkConfig=None, \n    **kwargs) -> BaseOperator:\n    #...\n"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"name"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"task_id"}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the required task id"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"arguments"}),(0,s.jsx)(t.td,{children:"list"}),(0,s.jsx)(t.td,{children:"The required arguments of the starlake command to run"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"spark_config"}),(0,s.jsx)(t.td,{children:"StarlakeSparkConfig"}),(0,s.jsxs)(t.td,{children:["the optional ",(0,s.jsx)(t.code,{children:"ai.starlake.job.StarlakeSparkConfig"})]})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"concrete-factory-classes",children:"Concrete factory classes"}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsxs)(i.A,{value:"airflow",label:"Airflow",children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Apache Airflow Concrete factory classes"})}),(0,s.jsxs)(t.p,{children:["Each ",(0,s.jsx)(t.strong,{children:"concrete"})," factory class extends ",(0,s.jsx)(t.code,{children:"ai.starlake.airflow.StarlakeAirflowJob"})," and implements the ",(0,s.jsx)(t.strong,{children:"sl_job"})," method that will generate the ",(0,s.jsx)(t.strong,{children:"Airflow task"})," that will run the corresponding starlake command."]}),(0,s.jsx)(t.admonition,{title:"Default pool",type:"note",children:(0,s.jsxs)(t.p,{children:["For all templates instantiating ",(0,s.jsx)(t.code,{children:"StarlakeAirflowJob"})," class, the\n",(0,s.jsx)(t.strong,{children:"default_pool"})," option defines the Airflow pool to use for all tasks executed within the DAG."]})}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'dag:\n  options:\n    default_pool: "custom_default_pool"\n #...\n'})}),(0,s.jsx)(t.admonition,{title:"Bash",type:"note",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ai.starlake.airflow.bash.StarlakeAirflowBashJob"})," is a concrete implementation of ",(0,s.jsx)(t.code,{children:"StarlakeAirflowJob"})," that generates tasks using ",(0,s.jsx)(t.code,{children:"airflow.operators.bash.BashOperator"}),". Usefull for ",(0,s.jsx)(t.strong,{children:"on premise"})," execution."]})}),(0,s.jsxs)(t.p,{children:["An additional ",(0,s.jsx)(t.strong,{children:"SL_STARLAKE_PATH"})," option is required to specify the ",(0,s.jsx)(t.strong,{children:"path"})," to the ",(0,s.jsx)(t.strong,{children:"starlake executable"}),"."]}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(78841).A+"",width:"1970",height:"574"})}),(0,s.jsx)(t.admonition,{title:"Dataproc",type:"note",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ai.starlake.airflow.gcp.StarlakeAirflowDataprocJob"})," is another implementation of ",(0,s.jsx)(t.code,{children:"StarlakeAirflowJob"})," that overrides the ",(0,s.jsx)(t.code,{children:"sl_job"})," method that will run the starlake command by submitting ",(0,s.jsx)(t.strong,{children:"Dataproc job"})," to the configured ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"}),"."]})}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"StarlakeAirflowDataprocJob"})," delegates to an instance of ",(0,s.jsx)(t.code,{children:"ai.starlake.airflow.gcp.StarlakeAirflowDataprocCluster"})," class the responsibility to :"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"create"})," the ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"})," by instantiating ",(0,s.jsx)(t.code,{children:"airflow.providers.google.cloud.operators.dataproc.DataprocCreateClusterOperator"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"submit"})," the ",(0,s.jsx)(t.strong,{children:"Dataproc job"})," to the latter by instantiating ",(0,s.jsx)(t.code,{children:"airflow.providers.google.cloud.operators.dataproc.DataprocSubmitJobOperator"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"delete"})," the ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"})," by instantiating ",(0,s.jsx)(t.code,{children:"airflow.providers.google.cloud.operators.dataproc.DataprocDeleteClusterOperator"})]}),"\n"]}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"creation"})," of the ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"})," can be performed by calling the ",(0,s.jsx)(t.code,{children:"create_cluster"})," method of the ",(0,s.jsx)(t.em,{children:"cluster"})," property or by calling the ",(0,s.jsx)(t.code,{children:"pre_tasks"})," method of the StarlakeAirflowDataprocJob (the call to the ",(0,s.jsx)(t.code,{children:"pre_load"})," method will, behind the scene, call the ",(0,s.jsx)(t.code,{children:"pre_tasks"})," method and add the optional resulting task to the group of Airflow tasks)."]}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"submission"})," of the ",(0,s.jsx)(t.strong,{children:"Dataproc job"})," can be performed by calling the ",(0,s.jsx)(t.code,{children:"submit_job"})," method of the ",(0,s.jsx)(t.em,{children:"cluster"})," property or by calling the ",(0,s.jsx)(t.code,{children:"sl_job"})," method of the StarlakeAirflowDataprocJob."]}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"deletion"})," of the ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"})," can be performed by calling the ",(0,s.jsx)(t.code,{children:"delete_cluster"})," method of the ",(0,s.jsx)(t.em,{children:"cluster"})," property or by calling the ",(0,s.jsx)(t.code,{children:"post_tasks"})," method of the StarlakeAirflowDataprocJob."]}),(0,s.jsxs)(t.p,{children:["Bellow is the list of ",(0,s.jsx)(t.strong,{children:"additional options"})," used to configure the ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"}),":"]}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"name"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"cluster_id"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the optional unique id of the cluster that will participate in the definition of the Dataproc cluster name (if not specified)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_name"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the optional dataproc name of the cluster that will participate in the definition of the Dataproc cluster name (if not specified)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_project_id"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the optional dataproc project id (the project id on which the composer has been instantiated by default)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_region"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional region (",(0,s.jsx)(t.code,{children:"europe-west1"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_subnet"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional subnet (the ",(0,s.jsx)(t.code,{children:"default"})," subnet if not specified)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_service_account"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional service account (",(0,s.jsx)(t.code,{children:"service-{self.project_id}@dataproc-accounts.iam.gserviceaccount.com"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_image_version"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the image version of the dataproc cluster (",(0,s.jsx)(t.code,{children:"2.2-debian1"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_master_machine_type"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional master machine type (",(0,s.jsx)(t.code,{children:"n1-standard-4"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_master_disk_type"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional master disk type (",(0,s.jsx)(t.code,{children:"pd-standard"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_master_disk_size"})}),(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:["the optional master disk size (",(0,s.jsx)(t.code,{children:"1024"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_worker_machine_type"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional worker machine type (",(0,s.jsx)(t.code,{children:"n1-standard-4"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_worker_disk_type"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional worker disk size (",(0,s.jsx)(t.code,{children:"pd-standard"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_worker_disk_size"})}),(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:["the optional worker disk size (",(0,s.jsx)(t.code,{children:"1024"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_num_workers"})}),(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:["the optional number of workers (",(0,s.jsx)(t.code,{children:"4"})," by default)"]})]})]})]}),(0,s.jsxs)(t.p,{children:["All of these options will be used by default if no ",(0,s.jsx)(t.em,{children:"StarlakeAirflowDataprocClusterConfig"})," was defined when instantiating ",(0,s.jsx)(t.em,{children:"StarlakeAirflowDataprocCluster"})," or if the latter was not defined when instantiating ",(0,s.jsx)(t.em,{children:"StarlakeAirflowDataprocJob"}),"."]}),(0,s.jsxs)(t.p,{children:["Bellow is the list of ",(0,s.jsx)(t.strong,{children:"additional options"})," used to configure the ",(0,s.jsx)(t.strong,{children:"Dataproc job"}),":"]}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"name"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_jar_list"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the required list of spark jars to be used (using ",(0,s.jsx)(t.code,{children:","})," as separator)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_bucket"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the required bucket to use for spark and biqquery temporary storage"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_job_main_class"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional main class of the spark job (",(0,s.jsx)(t.code,{children:"ai.starlake.job.Main"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_executor_memory"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional amount of memory to use per executor process (",(0,s.jsx)(t.code,{children:"11g"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_executor_cores"})}),(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:["the optional number of cores to use on each executor (",(0,s.jsx)(t.code,{children:"4"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_executor_instances"})}),(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:["the optional number of executor instances (",(0,s.jsx)(t.code,{children:"1"})," by default)"]})]})]})]}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"spark_executor_memory"}),", ",(0,s.jsx)(t.code,{children:"spark_executor_cores"})," and ",(0,s.jsx)(t.code,{children:"spark_executor_instances"})," options will be used by default if no ",(0,s.jsx)(t.strong,{children:"StarlakeSparkConfig"})," was passed to the ",(0,s.jsx)(t.code,{children:"sl_load"})," and ",(0,s.jsx)(t.code,{children:"sl_transform"})," methods."]}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(35115).A+"",width:"2020",height:"536"})}),(0,s.jsx)(t.admonition,{title:"Cloud run",type:"note",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ai.starlake.airflow.gcp.StarlakeAirflowCloudRunJob"})," class is a concrete implementation of ",(0,s.jsx)(t.code,{children:"StarlakeAirflowJob"})," that overrides the ",(0,s.jsx)(t.code,{children:"sl_job"})," method that will run the starlake command by executing ",(0,s.jsx)(t.strong,{children:"Cloud Run job"}),"."]})}),(0,s.jsxs)(t.p,{children:["Bellow is the list of ",(0,s.jsx)(t.strong,{children:"additional options"})," used to configure the ",(0,s.jsx)(t.strong,{children:"Cloud run job"}),":"]}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"name"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"cloud_run_project_id"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the optional cloud run project id (the project id on which the composer has been instantiated by default)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"cloud_run_job_name"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the required name of the cloud run job"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"cloud_run_region"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional region (",(0,s.jsx)(t.code,{children:"europe-west1"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"cloud_run_async"})}),(0,s.jsx)(t.td,{children:"bool"}),(0,s.jsxs)(t.td,{children:["the optional flag to run the cloud run job asynchronously (",(0,s.jsx)(t.code,{children:"True"})," by default)`"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"retry_on_failure"})}),(0,s.jsx)(t.td,{children:"bool"}),(0,s.jsxs)(t.td,{children:["the optional flag to retry the cloud run job on failure (",(0,s.jsx)(t.code,{children:"False"})," by default)`"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"retry_delay_in_seconds"})}),(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:["the optional delay in seconds to wait before retrying the cloud run job (",(0,s.jsx)(t.code,{children:"10"})," by default)`"]})]})]})]}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(87526).A+"",width:"1894",height:"676"})}),(0,s.jsxs)(t.p,{children:["If the execution has been parameterized to be ",(0,s.jsx)(t.strong,{children:"asynchronous"}),", an ",(0,s.jsx)(t.code,{children:"ai.starlake.airflow.gcp.CloudRunJobCompletionSensor"})," which extends ",(0,s.jsx)(t.code,{children:"airflow.sensors.bash.BashSensor"})," will be instantiated to ",(0,s.jsx)(t.strong,{children:"wait"})," for the ",(0,s.jsx)(t.strong,{children:"completion"})," of the ",(0,s.jsx)(t.strong,{children:"Cloud run job execution"}),"."]}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(44961).A+"",width:"2066",height:"676"})})]}),(0,s.jsxs)(i.A,{value:"dagster",label:"Dagster",children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Dagster Concrete factory classes"})}),(0,s.jsxs)(t.p,{children:["Each ",(0,s.jsx)(t.strong,{children:"concrete"})," factory class extends ",(0,s.jsx)(t.code,{children:"ai.starlake.dagster.StarlakeDagsterJob"})," and implements the ",(0,s.jsx)(t.strong,{children:"sl_job"})," method that will generate the ",(0,s.jsx)(t.strong,{children:"Dagster op"})," that will run the corresponding starlake command."]}),(0,s.jsx)(t.h6,{id:"starlakedagstershelljob",children:"StarlakeDagsterShellJob"}),(0,s.jsx)(t.admonition,{title:"Shell",type:"note",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ai.starlake.dagster.shell.StarlakeDagsterShellJob"})," is a concrete implementation of ",(0,s.jsx)(t.code,{children:"StarlakeDagsterJob"})," that generates nodes using dagster-shell library. Usefull for ",(0,s.jsx)(t.strong,{children:"on premise"})," execution."]})}),(0,s.jsxs)(t.p,{children:["An additional ",(0,s.jsx)(t.strong,{children:"SL_STARLAKE_PATH"})," option is required to specify the ",(0,s.jsx)(t.strong,{children:"path"})," to the ",(0,s.jsx)(t.strong,{children:"starlake executable"}),"."]}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(71333).A+"",width:"2002",height:"796"})}),(0,s.jsx)(t.h6,{id:"starlakedagsterdataprocjob",children:"StarlakeDagsterDataprocJob"}),(0,s.jsx)(t.admonition,{title:"Dataproc",type:"note",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ai.starlake.dagster.gcp.StarlakeDagsterDataprocJob"})," concrete factory class executes starlake's commands by submitting ",(0,s.jsx)(t.strong,{children:"Dataproc job"})," to the configured ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"}),"."]})}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"StarlakeDagsterDataprocJob"})," delegates to an instance of the ",(0,s.jsx)(t.code,{children:"dagster_gcp.DataprocResource"})," class the responsibility to :"]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"create"})," the ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"submit"})," the ",(0,s.jsx)(t.strong,{children:"Dataproc job"})," to the latter"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"delete"})," the ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"})]}),"\n"]}),(0,s.jsxs)(t.p,{children:["This instance is available through the ",(0,s.jsx)(t.code,{children:"__dataproc__"})," property of the ",(0,s.jsx)(t.code,{children:"StarlakeDagsterDataprocJob"})," class and is configured using the ",(0,s.jsx)(t.code,{children:"ai.starlake.gcp.StarlakeDataprocClusterConfig"})," class."]}),(0,s.jsxs)(t.p,{children:["The creation of the ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"})," can be performed by calling the ",(0,s.jsx)(t.code,{children:"pre_tasks"})," method of the StarlakeDagsterDataprocJob."]}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"submission"})," of the ",(0,s.jsx)(t.strong,{children:"Dataproc job"})," can be performed by calling the ",(0,s.jsx)(t.code,{children:"sl_job"})," method of the StarlakeDagsterDataprocJob."]}),(0,s.jsxs)(t.p,{children:["The deletion of the ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"})," can be performed by calling the ",(0,s.jsx)(t.code,{children:"post_tasks"})," method of the StarlakeDagsterDataprocJob."]}),(0,s.jsxs)(t.p,{children:["Bellow is the list of ",(0,s.jsx)(t.strong,{children:"additional options"})," used to configure the ",(0,s.jsx)(t.strong,{children:"Dataproc cluster"}),":"]}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"name"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"cluster_id"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the optional unique id of the cluster that will participate in the definition of the Dataproc cluster name (if not specified)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_name"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the optional dataproc name of the cluster that will participate in the definition of the Dataproc cluster name (if not specified)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_project_id"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the optional dataproc project id (the project id on which the composer has been instantiated by default)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_region"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional region (",(0,s.jsx)(t.code,{children:"europe-west1"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_subnet"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional subnet (the ",(0,s.jsx)(t.code,{children:"default"})," subnet if not specified)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_service_account"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional service account (",(0,s.jsx)(t.code,{children:"service-{self.project_id}@dataproc-accounts.iam.gserviceaccount.com"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_image_version"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the image version of the dataproc cluster (",(0,s.jsx)(t.code,{children:"2.2-debian1"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_master_machine_type"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional master machine type (",(0,s.jsx)(t.code,{children:"n1-standard-4"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_master_disk_type"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional master disk type (",(0,s.jsx)(t.code,{children:"pd-standard"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_master_disk_size"})}),(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:["the optional master disk size (",(0,s.jsx)(t.code,{children:"1024"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_worker_machine_type"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional worker machine type (",(0,s.jsx)(t.code,{children:"n1-standard-4"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_worker_disk_type"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional worker disk size (",(0,s.jsx)(t.code,{children:"pd-standard"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_worker_disk_size"})}),(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:["the optional worker disk size (",(0,s.jsx)(t.code,{children:"1024"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"dataproc_num_workers"})}),(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:["the optional number of workers (",(0,s.jsx)(t.code,{children:"4"})," by default)"]})]})]})]}),(0,s.jsxs)(t.p,{children:["All of these options will be used by default if no ",(0,s.jsx)(t.em,{children:"StarlakeDataprocClusterConfig"})," was defined when instantiating ",(0,s.jsx)(t.em,{children:"StarlakeDagsterDataprocJob"}),"."]}),(0,s.jsxs)(t.p,{children:["Bellow is the list of ",(0,s.jsx)(t.strong,{children:"additional options"})," used to configure the ",(0,s.jsx)(t.strong,{children:"Dataproc job"}),":"]}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"name"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_jar_list"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the required list of spark jars to be used (using ",(0,s.jsx)(t.code,{children:","})," as separator)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_bucket"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the required bucket to use for spark and biqquery temporary storage"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_job_main_class"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional main class of the spark job (",(0,s.jsx)(t.code,{children:"ai.starlake.job.Main"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_executor_memory"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional amount of memory to use per executor process (",(0,s.jsx)(t.code,{children:"11g"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_executor_cores"})}),(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:["the optional number of cores to use on each executor (",(0,s.jsx)(t.code,{children:"4"})," by default)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"spark_executor_instances"})}),(0,s.jsx)(t.td,{children:"int"}),(0,s.jsxs)(t.td,{children:["the optional number of executor instances (",(0,s.jsx)(t.code,{children:"1"})," by default)"]})]})]})]}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"spark_executor_memory"}),", ",(0,s.jsx)(t.code,{children:"spark_executor_cores"})," and ",(0,s.jsx)(t.code,{children:"spark_executor_instances"})," options will be used by default if no ",(0,s.jsx)(t.strong,{children:"StarlakeSparkConfig"})," was passed to the ",(0,s.jsx)(t.code,{children:"sl_load"})," and ",(0,s.jsx)(t.code,{children:"sl_transform"})," methods."]}),(0,s.jsx)(t.h6,{id:"starlakedagstercloudrunjob",children:"StarlakeDagsterCloudRunJob"}),(0,s.jsx)(t.admonition,{title:"Cloud run",type:"note",children:(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"ai.starlake.dagster.gcp.StarlakeDagsterCloudRunJob"})," class is a concrete implementation of ",(0,s.jsx)(t.code,{children:"StarlakeDagsterJob"})," that overrides the ",(0,s.jsx)(t.code,{children:"sl_job"})," method that will run the starlake command by executing ",(0,s.jsx)(t.strong,{children:"Cloud Run job"}),"."]})}),(0,s.jsxs)(t.p,{children:["Bellow is the list of ",(0,s.jsx)(t.strong,{children:"additional options"})," used to configure the ",(0,s.jsx)(t.strong,{children:"Cloud run job"}),":"]}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"name"}),(0,s.jsx)(t.th,{children:"type"}),(0,s.jsx)(t.th,{children:"description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"cloud_run_project_id"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the optional cloud run project id (the project id on which the composer has been instantiated by default)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"cloud_run_job_name"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsx)(t.td,{children:"the required name of the cloud run job"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"cloud_run_region"})}),(0,s.jsx)(t.td,{children:"str"}),(0,s.jsxs)(t.td,{children:["the optional region (",(0,s.jsx)(t.code,{children:"europe-west1"})," by default)"]})]})]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"templates",children:"Templates"}),"\n",(0,s.jsx)(t.h3,{id:"starlake-templates",children:"Starlake templates"}),"\n",(0,s.jsxs)(t.p,{children:["Starlake templates are listed under the ",(0,s.jsx)(t.strong,{children:"src/main/resources/template/dags"})," resource directory. There are ",(0,s.jsx)(t.strong,{children:"two types"})," of templates, those for ",(0,s.jsx)(t.strong,{children:"loading"})," data and others for ",(0,s.jsx)(t.strong,{children:"transforming"})," data."]}),"\n",(0,s.jsx)(t.h4,{id:"data-loading",children:"Data loading"}),"\n",(0,s.jsx)(t.admonition,{title:"Data loading",type:"note",children:(0,s.jsxs)(t.p,{children:["Starlake templates for ",(0,s.jsx)(t.strong,{children:"data loading"})," are listed under the ",(0,s.jsx)(t.strong,{children:"load"})," subdirectory."]})}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsxs)(i.A,{value:"airflow",label:"Airflow",children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Apache Airflow Templates for data loading"})}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.em,{children:"__airflow_scheduled_table_tpl.py.j2"})," is the ",(0,s.jsx)(t.strong,{children:"abstract template"})," to generate Airflow DAGs for ",(0,s.jsx)(t.strong,{children:"data loading"})," which ",(0,s.jsx)(t.strong,{children:"requires"})," the instantiation of a ",(0,s.jsx)(t.strong,{children:"concrete factory class"})," that implements ",(0,s.jsx)(t.em,{children:"ai.starlake.airflow.StarlakeAirflowJob"})]}),(0,s.jsxs)(t.p,{children:["Currently, there are ",(0,s.jsx)(t.strong,{children:"three Airflow concrete templates"})," for data loading."]}),(0,s.jsxs)(t.p,{children:["All extend this abstract template by instantiating the corresponding concrete factory class using ",(0,s.jsx)(t.strong,{children:"include statements"}),"."]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"airflow_scheduled_table_bash.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeAirflowBashJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/load/airflow_scheduled_table_bash.py.j2"',children:"# This template executes individual bash jobs and requires the following dag generation options set:\n# - SL_STARLAKE_PATH: the path to the starlake executable [OPTIONAL]\n# ...\n{% include 'templates/dags/__starlake_airflow_bash_job.py.j2' %}\n{% include 'templates/dags/load/__airflow_scheduled_table_tpl.py.j2' %}\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"airflow_scheduled_table_cloud_run.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeAirflowCloudRunJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/load/airflow_scheduled_table_cloud_run.py.j2"',children:"# This template executes individual cloud run jobs and requires the following dag generation options set:\n# - cloud_run_project_id: the project id where the job is located (if not set, the project id of the composer environment will be used) [OPTIONAL]\n# - cloud_run_job_region: the region where the job is located (if not set, europe-west1 will be used) [OPTIONAL]\n# - cloud_run_job_name: the name of the job to execute [REQUIRED]\n# ...\n{% include 'templates/dags/__starlake_airflow_cloud_run_job.py.j2' %}\n{% include 'templates/dags/load/__airflow_scheduled_table_tpl.py.j2' %}\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"airflow_scheduled_table_dataproc.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeAirflowDataprocJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/load/airflow_scheduled_table_dataproc.py.j2"',children:"# This template executes individual dataproc jobs and requires the following dag generation options set:\n# - dataproc_project_id: the project id of the dataproc cluster (if not set, the project id of the composer environment will be used) [OPTIONAL]\n# - dataproc_region: the region of the dataproc cluster (if not set, europe-west1 will be used) [OPTIONAL]\n# - dataproc_subnet: the subnetwork of the dataproc cluster (if not set, the default subnetwork will be used) [OPTIONAL]\n# - dataproc_service_account: the service account of the dataproc cluster (if not set, the default service account will be used) [OPTIONAL]\n# - dataproc_image_version: the image version of the dataproc cluster (if not set, 2.2-debian12 will be used) [OPTIONAL]\n# ...\n{% include 'templates/dags/__starlake_airflow_dataproc_job.py.j2' %}\n{% include 'templates/dags/load/__airflow_scheduled_table_tpl.py.j2' %}\n"})})]}),(0,s.jsxs)(i.A,{value:"dagster",label:"Dagster",children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Dagster Templates for data loading"})}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.em,{children:"__dagster_scheduled_table_tpl.py.j2"})," is the ",(0,s.jsx)(t.strong,{children:"abstract template"})," to generate Dagster DAGs for ",(0,s.jsx)(t.strong,{children:"data loading"})," which ",(0,s.jsx)(t.strong,{children:"requires"})," the instantiation of a ",(0,s.jsx)(t.strong,{children:"concrete factory class"})," that implements ",(0,s.jsx)(t.em,{children:"ai.starlake.dagster.StarlakeDagsterJob"})]}),(0,s.jsxs)(t.p,{children:["Currently, there are ",(0,s.jsx)(t.strong,{children:"three Dagster concrete templates"})," for data loading."]}),(0,s.jsxs)(t.p,{children:["All extend this abstract template by instantiating the corresponding concrete factory class using ",(0,s.jsx)(t.strong,{children:"include statements"}),"."]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"dagster_scheduled_table_shell.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeDagsterShellJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/load/dagster_scheduled_table_shell.py.j2"',children:"# This template executes individual shell jobs and requires the following dag generation options set:\n# - SL_STARLAKE_PATH: the path to the starlake executable [OPTIONAL]\n# ...\n{% include 'templates/dags/__starlake_dahster_shell_job.py.j2' %}\n{% include 'templates/dags/load/__dagster_scheduled_table_tpl.py.j2' %}\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"dagster_scheduled_table_cloud_run.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeDagsterCloudRunJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/load/dagster_scheduled_table_cloud_run.py.j2"',children:"# This template executes individual cloud run jobs and requires the following dag generation options set:\n# - cloud_run_project_id: the project id where the job is located (if not set, the project id of the composer environment will be used) [OPTIONAL]\n# - cloud_run_job_region: the region where the job is located (if not set, europe-west1 will be used) [OPTIONAL]\n# - cloud_run_job_name: the name of the job to execute [REQUIRED]\n# ...\n{% include 'templates/dags/__starlake_dagster_cloud_run_job.py.j2' %}\n{% include 'templates/dags/load/__airflow_scheduled_table_tpl.py.j2' %}\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"dagster_scheduled_table_dataproc.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeDagsterDataprocJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/load/dagster_scheduled_table_dataproc.py.j2"',children:"# This template executes individual dataproc jobs and requires the following dag generation options set:\n# - dataproc_project_id: the project id of the dataproc cluster (if not set, the project id of the composer environment will be used) [OPTIONAL]\n# - dataproc_region: the region of the dataproc cluster (if not set, europe-west1 will be used) [OPTIONAL]\n# - dataproc_subnet: the subnetwork of the dataproc cluster (if not set, the default subnetwork will be used) [OPTIONAL]\n# - dataproc_service_account: the service account of the dataproc cluster (if not set, the default service account will be used) [OPTIONAL]\n# - dataproc_image_version: the image version of the dataproc cluster (if not set, 2.2-debian12 will be used) [OPTIONAL]\n# ...\n{% include 'templates/dags/__starlake_dagster_dataproc_job.py.j2' %}\n{% include 'templates/dags/load/__dagster_scheduled_table_tpl.py.j2' %}\n"})})]})]}),"\n",(0,s.jsx)(t.h4,{id:"data-transformation",children:"Data transformation"}),"\n",(0,s.jsx)(t.admonition,{title:"Data transformation",type:"note",children:(0,s.jsxs)(t.p,{children:["Starlake templates for data transformation are listed under the ",(0,s.jsx)(t.strong,{children:"transform"})," subdirectory."]})}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsxs)(i.A,{value:"airflow",label:"Airflow",children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Apache Airflow Templates for data transformation"})}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.em,{children:"__airflow_scheduled_task_tpl.py.j2"})," is the ",(0,s.jsx)(t.strong,{children:"abstract template"})," to generate Airflow DAGs for ",(0,s.jsx)(t.strong,{children:"data transformation"})," which ",(0,s.jsx)(t.strong,{children:"requires"}),", in the same way, the instantiation of a ",(0,s.jsx)(t.strong,{children:"concrete factory class"})," that implements ",(0,s.jsx)(t.em,{children:"ai.starlake.airflow.StarlakeAirflowJob"})]}),(0,s.jsxs)(t.p,{children:["Currently, there are ",(0,s.jsx)(t.strong,{children:"three Airflow concrete templates"})," for data transformation."]}),(0,s.jsxs)(t.p,{children:["All extend this abstract template by instantiating the corresponding concrete factory class using ",(0,s.jsx)(t.strong,{children:"include statements"}),"."]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"airflow_scheduled_task_bash.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeAirflowBashJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/transform/airflow_scheduled_task_bash.py.j2"',children:"# ...\n{% include 'templates/dags/__starlake_airflow_bash_job.py.j2' %}\n{% include 'templates/dags/load/__airflow_scheduled_task_tpl.py.j2' %}\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"airflow_scheduled_task_cloud_run.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeAirflowCloudRunJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/transform/airflow_scheduled_task_cloud_run.py.j2"',children:"# ...\n{% include 'templates/dags/__starlake_airflow_cloud_run_job.py.j2' %}\n{% include 'templates/dags/load/__airflow_scheduled_table_tpl.py.j2' %}\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"airflow_scheduled_task_dataproc.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeAirflowDataprocJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/transform/airflow_scheduled_task_dataproc.py.j2"',children:"# ...\n{% include 'templates/dags/__starlake_airflow_dataproc_job.py.j2' %}\n{% include 'templates/dags/load/__airflow_scheduled_table_tpl.py.j2' %}\n"})})]}),(0,s.jsxs)(i.A,{value:"dagster",label:"Dagster",children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Dagster Templates for data transformation"})}),(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.em,{children:"__dagster_scheduled_task_tpl.py.j2"})," is the ",(0,s.jsx)(t.strong,{children:"abstract template"})," to generate Dagster DAGs for ",(0,s.jsx)(t.strong,{children:"data transformation"})," which ",(0,s.jsx)(t.strong,{children:"requires"}),", in the same way, the instantiation of a ",(0,s.jsx)(t.strong,{children:"concrete factory class"})," that implements ",(0,s.jsx)(t.em,{children:"ai.starlake.dagster.StarlakeDagsterJob"})]}),(0,s.jsxs)(t.p,{children:["Currently, there are ",(0,s.jsx)(t.strong,{children:"three Dagster concrete templates"})," for data transformation."]}),(0,s.jsxs)(t.p,{children:["All extend this abstract template by instantiating the corresponding concrete factory class using ",(0,s.jsx)(t.strong,{children:"include statements"}),"."]}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"dagster_scheduled_task_shell.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeDagsterShellJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/transform/dagster_scheduled_task_shell.py.j2"',children:"# ...\n{% include 'templates/dags/__starlake_dagster_shell_job.py.j2' %}\n{% include 'templates/dags/load/__dagster_scheduled_task_tpl.py.j2' %}\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"dagster_scheduled_task_cloud_run.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeDagsterCloudRunJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/transform/dagster_scheduled_task_cloud_run.py.j2"',children:"# ...\n{% include 'templates/dags/__starlake_dagster_cloud_run_job.py.j2' %}\n{% include 'templates/dags/load/__dagster_scheduled_table_tpl.py.j2' %}\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"dagster_scheduled_task_dataproc.py.j2"})," instantiates a ",(0,s.jsx)(t.code,{children:"StarlakeDagsterDataprocJob"})," class."]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/templates/dags/transform/dagster_scheduled_task_dataproc.py.j2"',children:"# ...\n{% include 'templates/dags/__starlake_dagster_dataproc_job.py.j2' %}\n{% include 'templates/dags/load/__dagster_scheduled_table_tpl.py.j2' %}\n"})})]})]}),"\n",(0,s.jsx)(t.h3,{id:"customize-existing-templates",children:"Customize existing templates"}),"\n",(0,s.jsxs)(t.p,{children:["Although the options are useful for customizing the generated DAGs, there are situations where we need to be able to ",(0,s.jsx)(t.strong,{children:"dynamically"})," apply some of them ",(0,s.jsx)(t.strong,{children:"at runtime"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"transform-parameters",children:"Transform parameters"}),"\n",(0,s.jsx)(t.admonition,{title:"Transform parameters",type:"note",children:(0,s.jsxs)(t.p,{children:["Often data transformation requires ",(0,s.jsx)(t.strong,{children:"parameterized SQL queries"})," whose ",(0,s.jsx)(t.strong,{children:"parameters"})," should be ",(0,s.jsx)(t.strong,{children:"evaluated at runtime"}),"."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"-- ...\nstep1 as(\n  SELECT * FROM step0\n  # highlight-next-line\n  WHERE DAT_EXTRACTION >= '{{date_param_min}}' and DAT_EXTRACTION <= '{{date_param_max}}'\n)\n-- ...\n"})}),"\n",(0,s.jsx)(t.h5,{id:"jobs-variable",children:"jobs variable"}),"\n",(0,s.jsxs)(t.p,{children:["All Starlake DAG templates for data transformation offer the ability of ",(0,s.jsx)(t.strong,{children:"injecting parameter values"})," via the optional definition of a ",(0,s.jsx)(t.strong,{children:"dictionary"}),"-like ",(0,s.jsx)(t.strong,{children:"Python variable"})," named ",(0,s.jsx)(t.strong,{children:"jobs"})," where each ",(0,s.jsx)(t.strong,{children:"key"})," represents the ",(0,s.jsx)(t.strong,{children:"name of a transformation"})," and its ",(0,s.jsx)(t.strong,{children:"value"})," the ",(0,s.jsx)(t.strong,{children:"parameters"})," to be passed to the transformation.\nEach entry of this dictionary will be added to the ",(0,s.jsx)(t.strong,{children:"options"})," of the corresponding DAG."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/template/dags/__starlake_airflow_cloud_run_job.py.j2"',children:'#...\n#optional variable jobs as a dict of all parameters to apply by job\n#eg jobs = {"task1 domain.task1 name": {"options": "task1 transform options"}, "task2 domain.task2 name": {"options": "task2 transform options"}}\n# highlight-next-line\nsl_job = StarlakeAirflowCloudRunJob(options=dict(options, **sys.modules[__name__].__dict__.get(\'jobs\', {})))\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="ai.starlake.job.IStarlakeJob"',children:'#...\n    def sl_transform(self, task_id: str, transform_name: str, transform_options: str=None, spark_config: StarlakeSparkConfig=None, **kwargs) -> T:\n        """Transform job.\n        Generate the scheduler task that will run the starlake `transform` command.\n\n    Args:\n            task_id (str): The optional task id.\n            transform_name (str): The transform to run.\n            transform_options (str): The optional transform options to use.\n            spark_config (StarlakeSparkConfig): The optional spark configuration to use.\n\n    Returns:\n            T: The scheduler task.\n        """\n        task_id = f"{transform_name}" if not task_id else task_id\n        arguments = ["transform", "--name", transform_name]\n        # highlight-next-line\n        transform_options = transform_options if transform_options else self.__class__.get_context_var(transform_name, {}, self.options).get("options", "")\n        if transform_options:\n            arguments.extend(["--options", transform_options])\n        return self.sl_job(task_id=task_id, arguments=arguments, spark_config=spark_config, **kwargs)\n#...\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Because this variable has to be defined in the ",(0,s.jsx)(t.strong,{children:"same module"})," as that of the ",(0,s.jsx)(t.strong,{children:"generated DAG"})," (",(0,s.jsx)(t.code,{children:"options=dict(options, **sys.modules[__name__].__dict__.get('jobs', {}))"}),"), we need to create a ",(0,s.jsx)(t.strong,{children:"customized DAG template"})," that should ",(0,s.jsx)(t.strong,{children:"extend"})," the existing one(s), including our specific code."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="metadata/dags/templates/__custom_jobs.py.j2"',children:"#...\n\n# highlight-next-line\njobs = #...\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="metadata/dags/templates/custom_scheduled_task_cloud_run.py.j2"',children:"#...\n{% include 'dags/templates/__custom_jobs.py.j2' %} # our custom code\n{% include 'templates/dags/transform/airflow_scheduled_task_cloud_run.py.j2' %} # the template to extend\n"})}),"\n",(0,s.jsx)(t.h4,{id:"airflow-user-defined-macros",children:"Airflow user defined macros"}),"\n",(0,s.jsx)(t.admonition,{title:"Airflow user defined macros",type:"note",children:(0,s.jsxs)(t.p,{children:["Because the ",(0,s.jsx)(t.strong,{children:"SQL parameters"})," may be closely related to ",(0,s.jsx)(t.strong,{children:"Airflow context variable"}),"(s), their ",(0,s.jsx)(t.strong,{children:"evaluation"})," may rely on some ",(0,s.jsx)(t.strong,{children:"Airflow user defined macros"}),"."]})}),"\n",(0,s.jsxs)(t.p,{children:["All ",(0,s.jsx)(t.strong,{children:"starlake DAG templates"})," for data transformation offer the ability to specify ",(0,s.jsx)(t.strong,{children:"User defined macros"})," through the optional definition of a ",(0,s.jsx)(t.strong,{children:"dictionary"}),"-like ",(0,s.jsx)(t.strong,{children:"Python variable"})," named ",(0,s.jsx)(t.strong,{children:"user_defined_macros"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'#...\n# [START instantiate_dag]\nwith DAG(dag_id=os.path.basename(__file__).replace(".py", "").replace(".pyc", "").lower(),\n         schedule_interval=None if cron == "None" else cron,\n         schedule=schedule,\n         default_args=sys.modules[__name__].__dict__.get(\'default_dag_args\', DEFAULT_DAG_ARGS),\n         catchup=False,\n         # highlight-next-line\n         user_defined_macros=sys.modules[__name__].__dict__.get(\'user_defined_macros\', None),\n         user_defined_filters=sys.modules[__name__].__dict__.get(\'user_defined_filters\', None),\n         tags=set([tag.upper() for tag in tags]),\n         description=description) as dag:\n#...\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Again, because this variable has to be defined in the ",(0,s.jsx)(t.strong,{children:"same module"})," as that of the ",(0,s.jsx)(t.strong,{children:"generated DAG"})," (",(0,s.jsx)(t.code,{children:"user_defined_macros=sys.modules[__name__].__dict__.get('user_defined_macros', None)"}),"), we need to create a ",(0,s.jsx)(t.strong,{children:"customized DAG template"})," that should ",(0,s.jsx)(t.strong,{children:"extend"})," the existing one(s), including our specific code."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="metadata/dags/templates/__custom_jobs.py.j2"',children:'from custom import get_days_interval,get_month_periode_depending_on_start_day_params\n\n# highlight-start\nuser_defined_macros = {\n    "days_interval": get_days_interval,\n    "month_periode_depending_on_start_day": get_month_periode_depending_on_start_day_params\n}\n# highlight-end\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="metadata/dags/templates/custom_scheduled_task_cloud_run.py.j2"',children:"#...\n{% include 'dags/templates/__custom_jobs.py.j2' %} # relative to the project metadata folder\n{% include 'templates/dags/transform/airflow_scheduled_task_cloud_run.py.j2' %} # relative to src/main/resources starlake resource directory\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In addition, a ",(0,s.jsx)(t.strong,{children:"good practice"})," is to inject those variables using ",(0,s.jsx)(t.strong,{children:"terraform variables"})," ..."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="metadata/dags/templates/__custom_jobs.py.j2"',children:'#...\n\nimport json\n\n# highlight-next-line\njobs = json.loads("""${jobs}""")\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.em,{children:"variables.tf"})}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-terraform",children:'variable "jobs" {\n  type = list(object({\n    name    = string\n    options = string\n  }))\n  default = []\n}\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.em,{children:"main.tf"})}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-terraform",children:'locals {\n  jobs = tomap({\n    for job in var.jobs :\n      "${job.name}" => {options=job.options}\n  })\n\n#...\n}\n\nresource "google_storage_bucket_object" "composer_storage_objects" {\n  for_each = local.composer_storage_objects\n  name     = each.value\n  content  = templatefile(\n    "${path.module}/${each.value}",\n    merge(local.composer_storage_variables, {jobs=jsonencode(local.jobs)}, {clusters=jsonencode(var.clusters)})\n  )\n  bucket   = var.composer_bucket\n}\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.em,{children:"vars_dev.tfvars"})}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-terraform",children:"jobs = [\n    {\n        name    = \"Products.TopSellingProducts\"\n        options = \"{{ days_interval(data_interval_end | ds, var.value.get('TOP_SELLING_PRODUCTS_DELTA', '30')) }}\"\n    },\n\n...\n    {\n        name   = \"Products.MonthlySalesPerProduct\"\n        options = \"{{ month_periode_depending_on_start_day(data_interval_end | ds, var.value.get('SALES_PER_PRODUCT_START_DAY', '1')) }}\"\n    }\n]\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Finally, we will have to define a specific ",(0,s.jsx)(t.strong,{children:"DAG configuration"})," that will make use of our ",(0,s.jsx)(t.strong,{children:"customized DAG template"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",metastring:'title="metadata/dags/custom_transform_cloud_run.yml"',children:'---\ndag:\n  comment: "agregation dag for domain {\\{domain\\}} with cloud run" # will appear as a description of the dag\n  # highlight-next-line\n  template: "custom_scheduled_task_cloud_run.py.j2" # the dag template to use\n  filename: "{\\{domain\\}}_agr_cloud_run.py" # the relative path to the outputDir specified as a parameter of the `dag-generate` command where the generated dag file will be copied\n  options:\n    sl_env_var: "{\\"SL_ROOT\\": \\"${root_path}\\", \\"SL_DATASETS\\": \\"${root_path}/datasets\\", \\"SL_TIMEZONE\\": \\"Europe/Paris\\"}"\n    cloud_run_project_id: "${project_id}"\n    cloud_run_job_name: "${job_name}-transform" # cloud run job name for auto jobs\n    cloud_run_job_region: "${region}"\n    cloud_run_async: False # whether or not to use asynchronous cloud run job execution\n# retry_on_failure: True # when asynchronous job execution has been selected, it specifies whether or not we want to use a bash sensor with automatic retry for a specific exit code (implies airflow v2.6+)\n    tags: "{\\{domain\\}} {\\{domain\\}}_CLOUD_RUN" # tags that will be added to the dag\n    load_dependencies: False # whether or not to add all dependencies as airflow tasks within the resulting dag\n    default_pool: "custom_default_pool" # pool to use for all tasks defined within the dag\n'})}),"\n",(0,s.jsx)(t.h4,{id:"dataproc-cluster-configuration",children:"Dataproc cluster configuration"}),"\n",(0,s.jsx)(t.admonition,{title:"Dataproc cluster configuration",type:"note",children:(0,s.jsxs)(t.p,{children:["All starlake ",(0,s.jsx)(t.strong,{children:"DAG templates for dataproc"})," offer the ability to ",(0,s.jsx)(t.strong,{children:"customize"})," the ",(0,s.jsx)(t.strong,{children:"configuration"})," of the ",(0,s.jsx)(t.strong,{children:"dataproc cluster"})," through the implementation of optional ",(0,s.jsx)(t.strong,{children:"Python functions"})," that will return instances of ",(0,s.jsx)(t.em,{children:"ai.starlake.gcp.StarlakeDataprocMachineConfig"})," given the name of the config to apply, which, by default, will be evaluated to the name of the dag (if the option ",(0,s.jsx)(t.strong,{children:"cluster_config_name"})," has not been specified)."]})}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsx)(i.A,{value:"airflow",label:"Airflow",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/template/dags/__starlake_airflow_dataproc_job.py.j2"',children:'#...\n#optional get_dataproc_master_config function that returns an instance of StarlakeAirflowDataprocMasterConfig per dag name\ndataproc_master_config = getattr(sys.modules[__name__], "get_dataproc_master_config", default_dataproc_master_config)\n\n#optional get_dataproc_worker_config function that returns an instance of StarlakeAirflowDataprocWorkerConfig per dag name\ndataproc_worker_config = getattr(sys.modules[__name__], "get_dataproc_worker_config", default_dataproc_worker_config)\n\n#optional get_dataproc_secondary_worker_config function that returns an instance of StarlakeAirflowDataprocWorkerConfig per dag name\ndataproc_secondary_worker_config = getattr(sys.modules[__name__], "get_dataproc_secondary_worker_config", lambda dag_name: None)\n\ncluster_config_name = StarlakeAirflowOptions.get_context_var("cluster_config_name", os.path.basename(__file__).replace(".py", "").replace(".pyc", "").lower(), options)\n\n#optional variable jobs as a dict of all options to apply by job\n#eg jobs = {"task1 domain.task1 name": {"options": "task1 transform options"}, "task2 domain.task2 name": {"options": "task2 transform options"}}\nsl_job = StarlakeAirflowDataprocJob(\n    cluster = StarlakeAirflowDataprocCluster(\n        cluster_config=StarlakeAirflowDataprocClusterConfig(\n            cluster_id=sys.modules[__name__].__dict__.get(\'cluster_id\', cluster_config_name),\n            dataproc_name=sys.modules[__name__].__dict__.get(\'dataproc_name\', None),\n            # highlight-start\n            master_config = dataproc_master_config(cluster_config_name, **sys.modules[__name__].__dict__.get(\'dataproc_master_properties\', {})),\n            worker_config = dataproc_worker_config(cluster_config_name, **sys.modules[__name__].__dict__.get(\'dataproc_worker_properties\', {})),\n            secondary_worker_config = dataproc_secondary_worker_config(cluster_config_name),\n            # highlight-end\n            idle_delete_ttl=sys.modules[__name__].__dict__.get(\'dataproc_idle_delete_ttl\', None),\n            single_node=sys.modules[__name__].__dict__.get(\'dataproc_single_node\', None),\n            options=options,\n            **sys.modules[__name__].__dict__.get(\'dataproc_cluster_properties\', {})\n        ),\n        pool=sys.modules[__name__].__dict__.get(\'pool\', None),\n        options=options\n    ),\n    options=dict(options, **sys.modules[__name__].__dict__.get(\'jobs\', {}))\n)\n'})})}),(0,s.jsx)(i.A,{value:"dagster",label:"Dagster",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/template/dags/__starlake_dagster_dataproc_job.py.j2"',children:'#...\n#optional get_dataproc_master_config function that returns an instance of StarlakeDataprocWorkerConfig per dag name\ndataproc_master_config = getattr(sys.modules[__name__], "get_dataproc_master_config", default_dataproc_master_config)\n\n#optional get_dataproc_worker_config function that returns an instance of StarlakeDataprocWorkerConfig per dag name\ndataproc_worker_config = getattr(sys.modules[__name__], "get_dataproc_worker_config", default_dataproc_worker_config)\n\n#optional get_dataproc_secondary_worker_config function that returns an instance of StarlakeDataprocWorkerConfig per dag name\ndataproc_secondary_worker_config = getattr(sys.modules[__name__], "get_dataproc_secondary_worker_config", lambda dag_name: None)\n\ncluster_config_name = StarlakeOptions.get_context_var("cluster_config_name", os.path.basename(__file__).replace(".py", "").replace(".pyc", "").lower(), options)\n\n#optional variable jobs as a dict of all options to apply by job\n#eg jobs = {"task1 domain.task1 name": {"options": "task1 transform options"}, "task2 domain.task2 name": {"options": "task2 transform options"}}\nsl_job = StarlakeDagsterDataprocJob(\n    cluster_config=StarlakeDataprocClusterConfig(\n        cluster_id=sys.modules[__name__].__dict__.get(\'cluster_id\', cluster_config_name),\n        dataproc_name=sys.modules[__name__].__dict__.get(\'dataproc_name\', None),\n        # highlight-start\n        master_config = dataproc_master_config(cluster_config_name, **sys.modules[__name__].__dict__.get(\'dataproc_master_properties\', {})),\n        worker_config = dataproc_worker_config(cluster_config_name, **sys.modules[__name__].__dict__.get(\'dataproc_worker_properties\', {})),\n        secondary_worker_config = dataproc_secondary_worker_config(cluster_config_name),\n        idle_delete_ttl=sys.modules[__name__].__dict__.get(\'dataproc_idle_delete_ttl\', None),\n        # highlight-end\n        single_node=sys.modules[__name__].__dict__.get(\'dataproc_single_node\', None),\n        options=options,\n        **sys.modules[__name__].__dict__.get(\'dataproc_cluster_properties\', {})\n    ), \n    pool=sys.modules[__name__].__dict__.get(\'pool\', None),\n    options=dict(options, **sys.modules[__name__].__dict__.get(\'jobs\', {}))\n)\n'})})})]}),"\n",(0,s.jsxs)(t.p,{children:["Again, because those functions should be implemented in the ",(0,s.jsx)(t.strong,{children:"same module"})," as that of the ",(0,s.jsx)(t.strong,{children:"generated DAG"})," (",(0,s.jsx)(t.code,{children:'dataproc_master_config = getattr(sys.modules[__name__], "get_dataproc_master_config", default_dataproc_master_config)'}),", ...), we need to create a ",(0,s.jsx)(t.strong,{children:"customized DAG template"})," that will allow us to implement those methods."]}),"\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.strong,{children:"good practice"})," is to inject those configurations via the use of ",(0,s.jsx)(t.strong,{children:"Terraform variables"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="metadata/dags/templates/__custom_dataproc.py.j2"',children:'import json\n\nfrom ai.starlake.job.airflow import AirflowStarlakeOptions\nfrom ai.starlake.job.airflow.gcp import StarlakeDataprocWorkerConfig\n\nclusters:dict = json.loads("""${clusters}""") # Terraform variable\n\n# ...\n\ndef get_dataproc_worker_config(cluster_config_name: str, **kwargs):\n    # lookup a specific configuration given the name of the cluster configuration\n    worker_config = AirflowStarlakeOptions.get_context_var(cluster_config_name.upper().replace(\'-\', \'_\'), clusters.get(cluster_config_name, None), options, deserialize_json=True)\n    if worker_config:\n        return StarlakeDataprocWorkerConfig(\n            num_instances=int(worker_config.get(\'numWorkers\', 0)),\n            machine_type=worker_config.get(\'workerType\', None),\n            disk_type=None,\n            disk_size=None,\n            options=options,\n            **kwargs\n        )\n    else:\n        return None\n\n# additional dataproc cluster properties\ndataproc_cluster_properties = {\n    "spark:spark.driver.maxResultSize": "15360m",\n    "spark:spark.driver.memory": "30720m",\n}\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="metadata/dags/templates/custom_scheduled_task_dataproc.py.j2"',children:"# our customized DAG template for data transformation using dataproc\n\n{% include 'dags/templates/__custom_jobs.py.j2' %} # specific code to inject jobs parameters\n{% include 'dags/templates/__custom_dataproc.py.j2' %} # specific code to customize the configuration of our dataproc cluster\n{% include 'templates/dags/transform/scheduled_task_dataproc.py.j2' %} # the base Starlake DAG template that needs to be extended\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",metastring:'title="metadata/dags/custom_transform_dataproc.yml"',children:'---\n# norm_dataproc_domain.sl.yml our DAG configuration using our customized DAG template\n\ndag:\n  comment: "dag for transforming tables for domain {\\{domain\\}} with dataproc" # will appear as a description of the dag\n  # highlight-next-line\n  template: "custom_scheduled_task_dataproc.py.j2" # the dag template to use\n  filename: "{\\{domain\\}}_norm_dataproc.py" # the relative path to the outputDir specified as a parameter of the `dag-generate` command where the generated dag file will be copied\n  options:\n    sl_env_var: "{\\"SL_ROOT\\": \\"${root_path}\\", \\"SL_DATASETS\\": \\"${root_path}/datasets\\", \\"SL_TIMEZONE\\": \\"Europe/Paris\\"}"\n\n    dataproc_name: "${dataproc_name}"\n    dataproc_project_id: "${project_id}"\n    dataproc_region: "${region}"\n    dataproc_subnet: "${subnet}"\n    dataproc_service_account: "${dataproc_service_account}"\n    dataproc_image_version: "${dataproc_image_version}"\n    dataproc_master_machine_type: "${dataproc_master_machine_type}"\n    dataproc_worker_machine_type: "${dataproc_worker_machine_type}"\n    dataproc_num_workers: "${dataproc_num_workers}"\n    cluster_config_name: "{{domain|lower|replace(\'_\', \'-\')}}-norms"# the name of the cluster configuration that will be looked up\n    spark_config_name: "{{domain|lower|replace(\'_\', \'-\')}}-norms"\n    spark_jar_list: "gs://${artefacts_bucket}/${main_jar}" #gs://${artefacts_bucket}/org.yaml/snakeyaml/2.2/jars/snakeyaml-2.2.jar gs://spark-lib/bigquery/spark-3.5-bigquery-0.35.1.jar gs://${artefacts_bucket}/com.google.cloud.spark/spark-bigquery-with-dependencies_2.12/${spark_bq_version}/spark-bigquery-with-dependencies_2.12-${spark_bq_version}.jar\n    spark_bucket: "${datastore_bucket}"\n\n    tags: "{\\{domain\\}} {\\{domain\\}}_DATAPROC" # tags that will be added to the dag\n    load_dependencies: False # whether or not to add all dependencies as airflow tasks within the resulting dag\n    default_pool: "custom_default_pool" # pool to use for all tasks defined within the dag\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.em,{children:"variables.tf"})}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-terraform",children:'variable "clusters" {\n  type = map(object({\n    workerType             = string\n    numWorkers             = string\n    sparkExecutorInstances = string\n    numVcpu                = string\n    memAlloc               = string\n  }))\n  default = {}\n}\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.em,{children:"main.tf"})}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-terraform",children:'resource "google_storage_bucket_object" "composer_storage_objects" {\n  for_each = local.composer_storage_objects\n  name     = each.value\n  content  = templatefile(\n    "${path.module}/${each.value}",\n    merge(local.composer_storage_variables, {jobs=jsonencode(local.jobs)}, {clusters=jsonencode(var.clusters)})\n  )\n  bucket   = var.composer_bucket\n}\n'})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.em,{children:"vars_dev.tfvars"})}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-terraform",children:'clusters = {\n    products-norms = {\n        workerType             = ""\n        numWorkers             = "0"\n        sparkExecutorInstances = "0"\n        numVcpu                = "0"\n        memAlloc               = ""\n    },\n    customers-norms = {\n        workerType             = "n1-standard-4"\n        numWorkers             = "4"\n        sparkExecutorInstances = "3"\n        numVcpu                = "16"\n        memAlloc               = "30g"\n    },\n}\n'})}),"\n",(0,s.jsx)(t.h4,{id:"spark-configuration",children:"Spark configuration"}),"\n",(0,s.jsx)(t.admonition,{title:"Spark configuration",type:"note",children:(0,s.jsxs)(t.p,{children:["As for the configuration of the dataproc cluster, it is possible to ",(0,s.jsx)(t.strong,{children:"customize"})," the ",(0,s.jsx)(t.strong,{children:"spark configuration"})," thanks to the optional implementation of a ",(0,s.jsx)(t.strong,{children:"Python function"})," named ",(0,s.jsx)(t.strong,{children:"get_spark_config"})," that will return an instance of ",(0,s.jsx)(t.em,{children:"StarlakeSparkConfig"})," given the name of a spark configuration to apply, which by default is the name of the transformation (if the option ",(0,s.jsx)(t.strong,{children:"spark_config_name"})," has not been defined)."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/template/dags/__common_airflow.py.j2"',children:'#...\nspark_config = getattr(sys.modules[__name__], "get_spark_config", default_spark_config)\n'})}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsx)(i.A,{value:"airflow",label:"Airflow",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/template/dags/transform/__airflow_scheduled_task_tpl.py.j2"',children:"#...\n    def create_task(airflow_task_id: str, task_name: str, task_type: str):\n        spark_config_name=StarlakeAirflowOptions.get_context_var('spark_config_name', task_name.lower(), options)\n        if (task_type == 'task'):\n            return sl_job.sl_transform(\n                task_id=airflow_task_id, \n                transform_name=task_name,\n                # highlight-next-line\n                spark_config=spark_config(spark_config_name, **sys.modules[__name__].__dict__.get('spark_properties', {}))\n            )\n        else:\n            load_domain_and_table = task_name.split(\".\",1)\n            domain = load_domain_and_table[0]\n            table = load_domain_and_table[1]\n            return sl_job.sl_load(\n                task_id=airflow_task_id, \n                domain=domain, \n                table=table,\n                # highlight-next-line\n                spark_config=spark_config(spark_config_name, **sys.modules[__name__].__dict__.get('spark_properties', {}))\n            )\n"})})}),(0,s.jsx)(i.A,{value:"dagster",label:"Dagster",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/template/dags/transform/__dagster_scheduled_task_tpl.py.j2"',children:"#...\ndef create_task(task_id: str, task_name: str, task_type: str, ins: dict={\"start\": In(Nothing)}):\n    spark_config_name=sl_job.get_context_var('spark_config_name', task_name.lower(), options)\n    if (task_type == 'task'):\n        return sl_job.sl_transform(\n            task_id=task_id, \n            transform_name=task_name,\n            # highlight-next-line\n            spark_config=spark_config(spark_config_name, **sys.modules[__name__].__dict__.get('spark_properties', {})),\n            ins=ins,\n        )\n    else:\n        load_domain_and_table = task_name.split(\".\",1)\n        domain = load_domain_and_table[0]\n        table = load_domain_and_table[1]\n        return sl_job.sl_load(\n            task_id=task_id, \n            domain=domain, \n            table=table,\n            # highlight-next-line\n            spark_config=spark_config(spark_config_name, **sys.modules[__name__].__dict__.get('spark_properties', {})),\n            ins=ins,\n        )\n"})})})]}),"\n",(0,s.jsxs)(t.p,{children:["Again, because this function should be implemented  in the ",(0,s.jsx)(t.strong,{children:"same module"})," as that of the ",(0,s.jsx)(t.strong,{children:"generated DAG"}),", we need to create a ",(0,s.jsx)(t.strong,{children:"customized DAG template"})," that will allow us to implement this method, and a ",(0,s.jsx)(t.strong,{children:"good practice"})," will be to inject those configurations via the use of ",(0,s.jsx)(t.strong,{children:"Terraform variables"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="metadata/dags/templates/__custom_dataproc.py.j2"',children:"import json\n\nfrom ai.starlake.job import StarlakeSparkConfig\nfrom ai.starlake.job.airflow import AirflowStarlakeOptions\n\nclusters:dict = json.loads(\"\"\"${clusters}\"\"\") # Terraform variable\n\ndef get_spark_config(spark_config_name: str, **kwargs):\n    # use of the Terraform variable to lookup the spark configuration\n    spark_config = AirflowStarlakeOptions.get_context_var(spark_config_name.upper().replace('-', '_'), clusters.get(spark_config_name, None), options, deserialize_json=True)\n    if spark_config:\n        return StarlakeSparkConfig(\n            memory=spark_config.get('memAlloc', None),\n            cores=int(spark_config.get('numVcpu', 0)),\n            instances=int(spark_config.get('sparkExecutorInstances', 0)),\n            cls_options=AirflowStarlakeOptions(),\n            options=options,\n            **kwargs\n        )\n    else:\n        return None\n\n#...\n"})}),"\n",(0,s.jsx)(t.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,s.jsxs)(t.p,{children:["For any transformation, Starlake is able to calculate all its dependencies towards other tasks or loads thanks to the ",(0,s.jsx)(t.strong,{children:"analysis"})," of ",(0,s.jsx)(t.strong,{children:"SQL queries"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["As seen previously, the ",(0,s.jsx)(t.strong,{children:"load_dependencies"})," option defines whether or not we wish to recursively ",(0,s.jsx)(t.strong,{children:"generate all the dependencies"})," associated with each task for which the transformation DAG must be generated (False by default). If we choose to not generate those dependencies, the corresponding DAG will be scheduled using the ",(0,s.jsx)(t.strong,{children:"Airflow's data-aware scheduling mechanism"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["All ",(0,s.jsx)(t.strong,{children:"dependencies"})," for data transformation are ",(0,s.jsx)(t.strong,{children:"available"})," in the generated DAG via the ",(0,s.jsx)(t.strong,{children:"Python"})," dictionary ",(0,s.jsx)(t.strong,{children:"variable"})," ",(0,s.jsx)(t.strong,{children:"task_deps"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'task_deps=json.loads("""[ {\n  "data" : {\n    "name" : "Customers.HighValueCustomers",\n    "typ" : "task",\n    "parent" : "Customers.CustomerLifeTimeValue",\n    "parentTyp" : "task",\n    "parentRef" : "CustomerLifetimeValue",\n    "sink" : "Customers.HighValueCustomers"\n  },\n  "children" : [ {\n    "data" : {\n      "name" : "Customers.CustomerLifeTimeValue",\n      "typ" : "task",\n      "parent" : "starbake.Customers",\n      "parentTyp" : "table",\n      "parentRef" : "starbake.Customers",\n      "sink" : "Customers.CustomerLifeTimeValue"\n    },\n    "children" : [ {\n      "data" : {\n        "name" : "starbake.Customers",\n        "typ" : "table",\n        "parentTyp" : "unknown"\n      },\n      "task" : false\n    }, {\n      "data" : {\n        "name" : "starbake.Orders",\n        "typ" : "table",\n        "parentTyp" : "unknown"\n      },\n      "task" : false\n    } ],\n    "task" : true\n  } ],\n  "task" : true\n} ]""")\n'})}),"\n",(0,s.jsx)(t.h3,{id:"inline",children:"Inline"}),"\n",(0,s.jsxs)(t.p,{children:["In this strategy (",(0,s.jsx)(t.strong,{children:"load_dependencies"})," = ",(0,s.jsx)(t.em,{children:"True"}),"), all the dependencies related to the transformation will be generated."]}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsx)(i.A,{value:"airflow",label:"Airflow",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(12e3).A+"",width:"1818",height:"476"})})}),(0,s.jsx)(i.A,{value:"dagster",label:"Dagster",children:(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(17128).A+"",width:"1248",height:"1172"})})})]}),"\n",(0,s.jsx)(t.h3,{id:"external-state-change",children:"External state change"}),"\n",(0,s.jsxs)(t.p,{children:["In this strategy (",(0,s.jsx)(t.strong,{children:"load_dependencies"})," = ",(0,s.jsx)(t.em,{children:"False"}),"), the default strategy, the scheduler will ",(0,s.jsx)(t.strong,{children:"launch"})," a ",(0,s.jsx)(t.strong,{children:"run"})," for the corresponding ",(0,s.jsx)(t.strong,{children:"transform DAG"})," if its ",(0,s.jsx)(t.strong,{children:"dependencies"})," are ",(0,s.jsx)(t.strong,{children:"met"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"airflow-data-aware-scheduling",children:"Airflow Data-aware scheduling"}),"\n",(0,s.jsxs)(a.A,{groupId:"schedulers",children:[(0,s.jsxs)(i.A,{value:"airflow",label:"Airflow",children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Airflow Data-aware scheduling"})}),(0,s.jsxs)(t.p,{children:["In this strategy, a ",(0,s.jsx)(t.strong,{children:"schedule"})," will be created to ",(0,s.jsx)(t.strong,{children:"check"})," if the ",(0,s.jsx)(t.strong,{children:"dependencies"})," are ",(0,s.jsx)(t.strong,{children:"met"})," via the use of ",(0,s.jsx)(t.strong,{children:"Airflow Datasets"}),"."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/template/dags/transform/__airflow_scheduled_task_tpl.py.j2"',children:"#...\nschedule = None\n\ndatasets: Set[str] = []\n\n_extra_dataset: Union[dict, None] = sys.modules[__name__].__dict__.get('extra_dataset', None)\n\n_extra_dataset_parameters = '?' + '&'.join(list(f'{k}={v}' for (k,v) in _extra_dataset.items())) if _extra_dataset else ''\n\n# if you choose to not load the dependencies, a schedule will be created to check if the dependencies are met\ndef _load_datasets(task: dict):\n    if 'children' in task:\n        for child in task['children']:\n            datasets.append(keep_ascii_only(child['data']['name']).lower())\n            _load_datasets(child)\n\nif load_dependencies.lower() != 'true':\n    for task in task_deps:\n        _load_datasets(task)\n    schedule = list(map(lambda dataset: Dataset(dataset + _extra_dataset_parameters), datasets))\n\n#...\n\nwith DAG(dag_id=os.path.basename(__file__).replace(\".py\", \"\").replace(\".pyc\", \"\").lower(),\n         schedule_interval=None if cron == \"None\" else cron,\n         # highlight-next-line\n         schedule=schedule,\n         default_args=sys.modules[__name__].__dict__.get('default_dag_args', DEFAULT_DAG_ARGS),\n         catchup=False,\n         user_defined_macros=sys.modules[__name__].__dict__.get('user_defined_macros', None),\n         user_defined_filters=sys.modules[__name__].__dict__.get('user_defined_filters', None),\n         tags=set([tag.upper() for tag in tags]),\n         description=description) as dag:\n#...\n"})}),(0,s.jsxs)(t.p,{children:["Those ",(0,s.jsx)(t.strong,{children:"required Datasets"})," are ",(0,s.jsx)(t.strong,{children:"updated"})," for ",(0,s.jsx)(t.strong,{children:"each"})," ",(0,s.jsx)(t.strong,{children:"load"})," and ",(0,s.jsx)(t.strong,{children:"task"})," that have been ",(0,s.jsx)(t.strong,{children:"executed"}),"."]}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.em,{children:"ai.starlake.airflow.StarlakeAirflowJob"})," class is responsible for ",(0,s.jsx)(t.strong,{children:"recording"})," the ",(0,s.jsx)(t.strong,{children:"outlets"})," related to the execution of each starlake command."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="ai.starlake.airflow.StarlakeAirflowJob"',children:"def __init__(\n    self,\n    pre_load_strategy: Union[StarlakePreLoadStrategy, str, None],\n    options: dict=None,\n    **kwargs) -> None:\n    #...\n    self.outlets: List[Dataset] = kwargs.get('outlets', [])\n\ndef sl_import(self, task_id: str, domain: str, **kwargs) -> BaseOperator:\n    #...\n    dataset = Dataset(keep_ascii_only(domain).lower())\n    self.outlets += kwargs.get('outlets', []) + [dataset]\n    #...\n\ndef sl_load(\n    self,\n    task_id: str,\n    domain: str,\n    table: str,\n    spark_config: StarlakeSparkConfig=None,\n    **kwargs) -> BaseOperator:\n    #...\n    dataset = Dataset(keep_ascii_only(f'\\{domain\\}.\\{table\\}').lower())\n    self.outlets += kwargs.get('outlets', []) + [dataset]\n    #...\n\ndef sl_transform(\n    self,\n    task_id: str,\n    transform_name: str,\n    transform_options: str=None,\n    spark_config: StarlakeSparkConfig=None,\n    **kwargs) -> BaseOperator:\n    #...\n    dataset = Dataset(keep_ascii_only(transform_name).lower())\n    self.outlets += kwargs.get('outlets', []) + [dataset]\n    #...\n"})}),(0,s.jsxs)(t.p,{children:["All the ",(0,s.jsx)(t.strong,{children:"outlets"})," that have been ",(0,s.jsx)(t.strong,{children:"recorded"})," are ",(0,s.jsx)(t.strong,{children:"available"})," in the ",(0,s.jsx)(t.em,{children:"outlets"})," ",(0,s.jsx)(t.em,{children:"property"})," of the ",(0,s.jsx)(t.strong,{children:"starlake concrete factory class instance"})," and are used at the very ",(0,s.jsx)(t.strong,{children:"last step"})," of the corresponding DAG to update the Datasets."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/template/dags/transform/__airflow_scheduled_task_tpl.py.j2"',children:'    end = sl_job.dummy_op(task_id="end", outlets=[Dataset(keep_ascii_only(dag.dag_id))]+list(map(lambda x: Dataset(x.uri + _extra_dataset_parameters), sl_job.outlets)))\n'})}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(83076).A+"",width:"1694",height:"1360"})}),(0,s.jsxs)(t.p,{children:["In conjonction with the Starlake dag generation, the outlets property can be used to ",(0,s.jsx)(t.strong,{children:"schedule"})," ",(0,s.jsx)(t.strong,{children:"effortless"})," ",(0,s.jsx)(t.strong,{children:"DAGs"})," that will run the transform commands."]})]}),(0,s.jsxs)(i.A,{value:"dagster",label:"Dagster",children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"Dagster Multi Asset Sensor"})}),(0,s.jsxs)(t.p,{children:["In this strategy, a ",(0,s.jsx)(t.strong,{children:"sensor"})," will be created to ",(0,s.jsx)(t.strong,{children:"check"})," if the ",(0,s.jsx)(t.strong,{children:"dependencies"})," are ",(0,s.jsx)(t.strong,{children:"met"})," via the use of ",(0,s.jsx)(t.strong,{children:"Dagster Assets"}),"."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="src/main/resources/template/dags/transform/__dagster_scheduled_task_tpl.py.j2"',children:"#...\nfrom dagster import AssetKey, MultiAssetSensorDefinition, MultiAssetSensorEvaluationContext, SkipReason, Definitions\n\n# if you want to load dependencies, set load_dependencies to True in the options\nload_dependencies: bool = StarlakeDagsterJob.get_context_var(var_name='load_dependencies', default_value='False', options=options).lower() == 'true'\n\n# highlight-next-line\nsensor = None\n\n# if you choose to not load the dependencies, a sensor will be created to check if the dependencies are met\n# highlight-next-line\nif not load_dependencies:\n    assets: Set[str] = []\n\n    def load_assets(task: dict):\n        if 'children' in task:\n            for child in task['children']:\n                assets.append(sanitize_id(child['data']['name']))\n                load_assets(child)\n\n    for task in task_deps:\n        load_assets(task)\n\n    def multi_asset_sensor_with_skip_reason(context: MultiAssetSensorEvaluationContext):\n        asset_events = context.latest_materialization_records_by_key()\n        if all(asset_events.values()):\n            context.advance_all_cursors()\n            return RunRequest()\n        elif any(asset_events.values()):\n            materialized_asset_key_strs = [\n                key.to_user_string() for key, value in asset_events.items() if value\n            ]\n            not_materialized_asset_key_strs = [\n                key.to_user_string() for key, value in asset_events.items() if not value\n            ]\n            return SkipReason(\n                f\"Observed materializations for {materialized_asset_key_strs}, \"\n                f\"but not for {not_materialized_asset_key_strs}\"\n            )\n        else:\n            return SkipReason(\"No materializations observed\")\n\n    sensor = MultiAssetSensorDefinition(\n        name = f'{job_name}_sensor',\n        monitored_assets = list(map(lambda asset: AssetKey(asset), assets)),\n        asset_materialization_fn = multi_asset_sensor_with_skip_reason,\n        minimum_interval_seconds = 60,\n        description = f\"Sensor for {job_name}\",\n        job_name = job_name,\n    )\n#...\ndefs = Definitions(\n   jobs=[generate_job()],\n   schedules=crons,\n   # highlight-next-line\n   sensors=[sensor] if sensor else [],\n)\n"})}),(0,s.jsxs)(t.p,{children:["Those ",(0,s.jsx)(t.strong,{children:"required Assets"})," are ",(0,s.jsx)(t.strong,{children:"materialized"})," for ",(0,s.jsx)(t.strong,{children:"each"})," ",(0,s.jsx)(t.strong,{children:"load"})," and ",(0,s.jsx)(t.strong,{children:"task"})," that have been ",(0,s.jsx)(t.strong,{children:"executed"}),"."]}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.em,{children:"ai.starlake.dagster.StarlakeDagsterJob"})," class is responsible for ",(0,s.jsx)(t.strong,{children:"recording"})," the ",(0,s.jsx)(t.strong,{children:"assets"})," related to the execution of each starlake command."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="ai.starlake.dagster.StarlakeDagsterJob"',children:"def sl_import(self, task_id: str, domain: str, **kwargs) -> NodeDefinition:\n    # highlight-next-line\n    kwargs.update({'asset': AssetKey(sanitize_id(domain))})\n    #...\n\ndef sl_load(self, task_id: str, domain: str, table: str, spark_config: StarlakeSparkConfig=None, **kwargs) -> NodeDefinition:\n    # highlight-next-line\n    kwargs.update({'asset': AssetKey(sanitize_id(f\"\\{domain\\}.\\{table\\}\"))})\n    #...\n\ndef sl_transform(self, task_id: str, transform_name: str, transform_options: str = None, spark_config: StarlakeSparkConfig = None, **kwargs) -> NodeDefinition:\n    # highlight-next-line\n    kwargs.update({'asset': AssetKey(sanitize_id(transform_name))})\n    #...\n\n"})}),(0,s.jsxs)(t.p,{children:["Each corresponding ",(0,s.jsx)(t.strong,{children:"asset"})," will be then ",(0,s.jsx)(t.strong,{children:"materialized"})," at run time through the execution of the ",(0,s.jsx)(t.strong,{children:"Dagset op"})," defined within the ",(0,s.jsx)(t.strong,{children:"sl_job"})," function of the concrete factory class that has been instantiated by the template."]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",metastring:'title="ai.starlake.dagster.shell.StarlakeShellJob"',children:'def sl_job(self, task_id: str, arguments: list, spark_config: StarlakeSparkConfig=None, **kwargs) -> NodeDefinition:\n    """Overrides IStarlakeJob.sl_job()\n    Generate the Dagster node that will run the starlake command.\n\n    Args:\n        task_id (str): The required task id.\n        arguments (list): The required arguments of the starlake command to run.\n\n    Returns:\n        OpDefinition: The Dastger node.\n    """\n    command = self.__class__.get_context_var("SL_STARLAKE_PATH", "starlake", self.options) + f" {\' \'.join(arguments)}"\n\n    # highlight-next-line\n    asset_key: AssetKey = kwargs.get("asset", None)\n\n    @op(\n        name=task_id,\n        ins=kwargs.get("ins", {}),\n        out={kwargs.get("out", "result"): Out(str)},\n    )\n    def job(context, **kwargs):\n        output, return_code = execute_shell_command(\n            shell_command=command,\n            output_logging="STREAM",\n            log=context.log,\n            cwd=self.sl_root,\n            env=self.sl_env_vars,\n            log_shell_command=True,\n        )\n\n        if return_code:\n            raise Failure(description=f"Starlake command {command} execution failed with output: {output}")\n\n        if asset_key:\n            # highlight-next-line\n            yield AssetMaterialization(asset_key=asset_key.path, description=kwargs.get("description", f"Starlake command {command} execution succeeded"))\n\n        yield Output(value=output, output_name="result")\n\n    return job\n\n'})}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(70604).A+"",width:"1456",height:"1270"})})]})]})]})}function _(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},19365:(e,t,n)=>{n.d(t,{A:()=>i});n(96540);var s=n(18215);const r={tabItem:"tabItem_Ymn6"};var a=n(74848);function i(e){let{children:t,hidden:n,className:i}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(r.tabItem,i),hidden:n,children:t})}},11470:(e,t,n)=>{n.d(t,{A:()=>y});var s=n(96540),r=n(18215),a=n(23104),i=n(56347),o=n(205),l=n(57485),d=n(31682),c=n(70679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:r}}=e;return{value:t,label:n,attributes:s,default:r}}))}(n);return function(e){const t=(0,d.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function _(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,i.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(r.location.search);t.set(a,e),r.replace({...r.location,search:t.toString()})}),[a,r])]}function u(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=p(e),[i,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!_({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:a}))),[d,h]=g({queryString:n,groupId:r}),[u,j]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,a]=(0,c.Dv)(n);return[r,(0,s.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:r}),m=(()=>{const e=d??u;return _({value:e,tabValues:a})?e:null})();(0,o.A)((()=>{m&&l(m)}),[m]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!_({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),j(e)}),[h,j,a]),tabValues:a}}var j=n(92303);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=n(74848);function f(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),c=e=>{const t=e.currentTarget,n=l.indexOf(t),r=o[n].value;r!==s&&(d(t),i(r))},h=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>l.push(e),onKeyDown:h,onClick:c,...a,className:(0,r.A)("tabs__item",m.tabItem,a?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function b(e){let{lazy:t,children:n,selectedValue:r}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function k(e){const t=u(e);return(0,x.jsxs)("div",{className:(0,r.A)("tabs-container",m.tabList),children:[(0,x.jsx)(f,{...t,...e}),(0,x.jsx)(b,{...t,...e})]})}function y(e){const t=(0,j.A)();return(0,x.jsx)(k,{...e,children:h(e.children)},String(t))}},74696:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/ack-a35e707d19fbbf15c9c9a02256ae8e37.png"},78841:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/bash-3c5283201692a4bb3517799af2f70792.png"},44961:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/cloudRunAsynchronous-9af5b54671b432e559c6ebcfc1fd6c33.png"},87526:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/cloudRunSynchronous-a9a0857335e66644e102bcbb4a5c91c5.png"},35115:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/dataproc-2c84f297fde1311d82b631c8c0e12ec3.png"},18639:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/imported-f4e59acc4626a3d1be6243445221df52.png"},28429:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/none-6bc3ff2c4625a2803da2f93ba1cbdfc7.png"},98930:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/pending-503f251179d0e924bddf6fd3661e9d9b.png"},12e3:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/transformWithDependencies-6ce6dbb28ddf0b9018924c5ce00a2a44.png"},83076:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/transformWithoutDependencies-ada333ac7d75af94bfffa13f7002e601.png"},38496:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/ack-cb876d6a841b0a6cdc7ba3fcaef8d58f.png"},14487:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/imported-51a3bc590106303bcb5928f0081b7230.png"},71189:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/none-0d95c524db0294eb1ce72aeec1ffaeb0.png"},41258:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/pending-61ae544a143576d9b20ee57cf4790d25.png"},71333:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/shell-f558eed9b581045c04ffa229bd353a24.png"},17128:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/transformWithDependencies-2a4e9bfe4d23a8268dbdf11969610f48.png"},70604:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/transformWithoutDependencies-ae80fd075e409206d2ba9fe652fb65bc.png"},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(96540);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);