"use strict";(self.webpackChunkstarlake=self.webpackChunkstarlake||[]).push([[3949],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=d(a),f=i,h=u["".concat(s,".").concat(f)]||u[f]||m[f]||l;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,o=new Array(l);o[0]=f;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:i,o[1]=r;for(var d=2;d<l;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},60389:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var n=a(87462),i=(a(67294),a(3905));const l={},o="Load configuration",r={unversionedId:"guides/load/schema",id:"guides/load/schema",title:"Load configuration",description:"Datawarehouses are organized around schemas where tables are grouped.",source:"@site/docs/0300-guides/200-load/105-schema.mdx",sourceDirName:"0300-guides/200-load",slug:"/guides/load/schema",permalink:"/starlake/docs/next/guides/load/schema",draft:!1,editUrl:"https://github.com/starlake-ai/starlake/edit/master/docs/docs/0300-guides/200-load/105-schema.mdx",tags:[],version:"current",sidebarPosition:105,frontMatter:{},sidebar:"starlakeSidebar",previous:{title:"Tutorial",permalink:"/starlake/docs/next/guides/load/tutorial"},next:{title:"Load DSV files",permalink:"/starlake/docs/next/guides/load/CSV"}},s={},d=[{value:"Domain configuration",id:"domain-configuration",level:2},{value:"Table configuration",id:"table-configuration",level:2},{value:"Attributes configuration",id:"attributes-configuration",level:2}],p={toc:d},u="wrapper";function m(e){let{components:t,...a}=e;return(0,i.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"load-configuration"},"Load configuration"),(0,i.kt)("p",null,"Datawarehouses are organized around schemas where tables are grouped.\nDepending on the database, a database ",(0,i.kt)("inlineCode",{parentName:"p"},"schema")," can be called ",(0,i.kt)("inlineCode",{parentName:"p"},"schema")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"catalog")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"dataset"),".\nIn starlake, we use the term ",(0,i.kt)("inlineCode",{parentName:"p"},"domain")," to designate  a ",(0,i.kt)("inlineCode",{parentName:"p"},"schema"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"catalog")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"dataset"),"."),(0,i.kt)("p",null,"Below is a typical structure of the ",(0,i.kt)("inlineCode",{parentName:"p"},"load")," section of a starlake project."),(0,i.kt)("p",null,"It allows to load files to the ",(0,i.kt)("inlineCode",{parentName:"p"},"product")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"order")," tables in the ",(0,i.kt)("inlineCode",{parentName:"p"},"sales")," domain\nand the ",(0,i.kt)("inlineCode",{parentName:"p"},"seller")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"location")," tables in the ",(0,i.kt)("inlineCode",{parentName:"p"},"hr")," domain."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plaintext"},"metadata/load\n\u251c\u2500\u2500 sales\n\u2502   \u251c\u2500\u2500 _config.sl.yml\n\u2502   \u251c\u2500\u2500 product.sl.yml\n\u2502   \u2514\u2500\u2500 order.sl.yml\n\u2514\u2500\u2500 hr\n    \u251c\u2500\u2500 seller.sl.yml\n    \u2514\u2500\u2500 location.sl.yml\n")),(0,i.kt)("h2",{id:"domain-configuration"},"Domain configuration"),(0,i.kt)("p",null,"Since Starlake rely heavily on convention over configuration, folder names below the ",(0,i.kt)("inlineCode",{parentName:"p"},"load")," section are used to determine the domain names."),(0,i.kt)("p",null,"File names inside these domain folders are used to determine the table name."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You can still override in the YAML configuration files the domain and table names.")),(0,i.kt)("p",null,"Starlake will automatically create the schema if it does not exist before loading the data."),(0,i.kt)("p",null,"The configuration file for a domain is optional but if defined should be named ",(0,i.kt)("inlineCode",{parentName:"p"},"_config.sl.yml")," and should be placed in the domain folder."),(0,i.kt)("p",null,"The properties that can be defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"_config.sl.yml")," file are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," (optional): The name of the domain. If not defined, the name of the domain will be the name of the folder containing this ",(0,i.kt)("inlineCode",{parentName:"li"},"_config.sl.yml"),"file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"comment")," (optional): A description of the domain. This will be translated to the ",(0,i.kt)("inlineCode",{parentName:"li"},"COMMENT")," clause in the SQL ",(0,i.kt)("inlineCode",{parentName:"li"},"CREATE SCHEMA")," statement."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tags")," (optional): A set of tags to categorize the domain. This will be translated to the ",(0,i.kt)("inlineCode",{parentName:"li"},"TAGS")," clause in the SQL ",(0,i.kt)("inlineCode",{parentName:"li"},"CREATE SCHEMA")," statement."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"database")," (optional): The name of the database where the domain is located. If not defined, the database name will be the name of the default BigQuery project or the database name defined in the JDBC URL.")),(0,i.kt)("h2",{id:"table-configuration"},"Table configuration"),(0,i.kt)("p",null,"The configuration file for a table is commonly be named ",(0,i.kt)("inlineCode",{parentName:"p"},"<table_name>.sl.yml")," and should be placed in the domain folder."),(0,i.kt)("p",null,"The properties that can be defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"<table_name>.sl.yml")," file are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," (optional): The name of the table. If not defined, the name of the table will be the name of the file without the ",(0,i.kt)("inlineCode",{parentName:"li"},".sl.yml")," extension."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"comment")," (optional): A description of the table. This will be translated to the ",(0,i.kt)("inlineCode",{parentName:"li"},"COMMENT")," clause in the SQL ",(0,i.kt)("inlineCode",{parentName:"li"},"CREATE TABLE")," statement."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tags")," (optional): A set of tags to categorize the table. This will be translated to the ",(0,i.kt)("inlineCode",{parentName:"li"},"TAGS")," clause in the SQL ",(0,i.kt)("inlineCode",{parentName:"li"},"CREATE TABLE")," statement."),(0,i.kt)("li",{parentName:"ul"},"pattern (required): The pattern of the files to load. This is a required field."),(0,i.kt)("li",{parentName:"ul"},"attributes (required): The list of attributes found in the file to load and any transformation to apply to them before loading."),(0,i.kt)("li",{parentName:"ul"},"metadata:"),(0,i.kt)("li",{parentName:"ul"},"comment (optional): A description of the table. This will be translated to the ",(0,i.kt)("inlineCode",{parentName:"li"},"COMMENT")," clause in the SQL ",(0,i.kt)("inlineCode",{parentName:"li"},"CREATE TABLE")," statement."),(0,i.kt)("li",{parentName:"ul"},"presql (optional): A list of SQL statements to execute before loading the data."),(0,i.kt)("li",{parentName:"ul"},"postsql (optional): A list of SQL statements to execute after loading the data."),(0,i.kt)("li",{parentName:"ul"},"rls (optional): A list of row level security policies to apply to the table."),(0,i.kt)("li",{parentName:"ul"},"expectations (optional): A list of expectations to apply to the table after loading. This si useful for data quality checks."),(0,i.kt)("li",{parentName:"ul"},"primaryKey (optional): The list of columns that form the primary key of the table."),(0,i.kt)("li",{parentName:"ul"},"acl (optional): A list of access control entries to apply to the table."),(0,i.kt)("li",{parentName:"ul"},"sample (optional): A sample of the data to load. This is useful for testing."),(0,i.kt)("li",{parentName:"ul"},"filter (optional): A filter to apply to the data before loading. This is useful to load only a subset of the data."),(0,i.kt)("li",{parentName:"ul"},"patternSample (optional): A sample of the data to load. This is useful for testing.")),(0,i.kt)("h2",{id:"attributes-configuration"},"Attributes configuration"),(0,i.kt)("p",null,"Attributes are the columns of the table. They are defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"attributes")," section of the ",(0,i.kt)("inlineCode",{parentName:"p"},"<table_name>.sl.yml")," file.\nAttributes come from the files to load and may be transformed before loading.\nWhen loading from :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a CSV file, the attributes are the columns of the CSV file separated by a delimiter."),(0,i.kt)("li",{parentName:"ul"},"a JSON file, the attributes are the keys of the JSON objects."),(0,i.kt)("li",{parentName:"ul"},"a XML file, the attributes are the tags or tag attributes of the XML file."),(0,i.kt)("li",{parentName:"ul"},"FIXED WIDTH file, the attributes are the columns of the file at specific positions on each line of the file.")),(0,i.kt)("p",null,"The properties that can be defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"attributes")," section are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," (required): The name of the attribute. This is the name of the column in the file nad in the table."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," (optional): The type of the attribute. If not defined, the type of the attribute will be ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"array")," (optional): A boolean to indicate if the attribute is an array. If not defined, the attribute is not an array. This is useful to define repeated fields."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"required")," (optional): A boolean to indicate if the attribute is required. If not defined, the attribute is required in the source file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"privacy")," (optional): The privacy level of the attribute. If not defined, the privacy level of the attribute will be ",(0,i.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transform")," (optional): The transformation to apply to the attribute before loading. This is useful to transform the attribute before loading using a UDF or SQL function."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"comment")," (optional): A description of the attribute. This will be translated to the ",(0,i.kt)("inlineCode",{parentName:"li"},"COMMENT")," clause in the SQL ",(0,i.kt)("inlineCode",{parentName:"li"},"COLUMN")," clause."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rename")," (optional): The new name of the attribute. This is useful to rename the attribute before loading."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attributes")," (optional): The list of attributes of the attribute. This is useful to define the attributes of a nested attribute."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"position")," (optional): The position of the attribute in the file. This is useful for FIXED WIDTH files."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default")," (optional): The default value of the attribute. This is useful to define the default value of the attribute if the attribute is not present in the source file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tags")," (optional): A set of tags to categorize the attribute. This will be translated to the ",(0,i.kt)("inlineCode",{parentName:"li"},"TAGS")," clause in the SQL ",(0,i.kt)("inlineCode",{parentName:"li"},"COLUMN")," clause."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trim")," (optional): The trim to apply to the attribute before loading. This is useful to remove leading and trailing spaces from the attribute."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"script")," (optional): Only present when defining new attributes derived from existing and attribute. For example when defining a new attribute that is the concatenation of two existing attributes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"foreignKey")," (optional): The foreign key of the attribute. This is useful to define the foreign key of the attribute."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ignore")," (optional): A boolean to indicate if the attribute should be ignored. If not defined, the attribute is not ignored."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"accessPolicy")," (optional): The access policy of the attribute. This is useful to define the access policy of the attribute.")))}m.isMDXComponent=!0}}]);