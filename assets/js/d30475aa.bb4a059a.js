"use strict";(self.webpackChunkstarlake_docs=self.webpackChunkstarlake_docs||[]).push([[3715],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),p=r,f=m["".concat(i,".").concat(p)]||m[p]||d[p]||o;return n?a.createElement(f,s(s({ref:t},c),{},{components:n})):a.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[m]="string"==typeof e?e:r,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(7462),r=n(7294),o=n(6010),s=n(2466),l=n(6550),i=n(1980),u=n(7392),c=n(12);function m(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[s,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[i,u]=f({queryString:n,groupId:a}),[m,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),y=(()=>{const e=i??m;return p({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{y&&l(y)}),[y]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),b(e)}),[u,b,o]),tabValues:o}}var y=n(2389);const h={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:n,selectedValue:l,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==l&&(m(t),i(a))},p=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:d},s,{className:(0,o.Z)("tabs__item",h.tabItem,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function g(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=b(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",h.tabList)},r.createElement(k,(0,a.Z)({},e,t)),r.createElement(g,(0,a.Z)({},e,t)))}function v(e){const t=(0,y.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}},2621:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),s=n(5162);const l={sidebar_position:150,title:"Transform"},i=void 0,u={unversionedId:"quickstart/transform",id:"quickstart/transform",title:"Transform",description:"Now that our file is successfully loaded and available as a table, we usually need to crate KPIs or specialized tables.",source:"@site/docs/quickstart/150.transform.mdx",sourceDirName:"quickstart",slug:"/quickstart/transform",permalink:"/starlake/docs/quickstart/transform",draft:!1,editUrl:"https://github.com/starlake-ai/starlake/edit/master/docs/docs/quickstart/150.transform.mdx",tags:[],version:"current",sidebarPosition:150,frontMatter:{sidebar_position:150,title:"Transform"},sidebar:"starlakeSidebar",previous:{title:"Load",permalink:"/starlake/docs/quickstart/load"},next:{title:"Complete example",permalink:"/starlake/docs/userguide/example"}},c={},m=[{value:"Templated Job",id:"templated-job",level:2},{value:"Targeting another datawarehouse",id:"targeting-another-datawarehouse",level:2}],d={toc:m},p="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Now that our file is successfully loaded and available as a table, we usually need to crate KPIs or specialized tables.\nTo illustrate how transform may be defined on tables, we will create two tables, one containing customers living in France\nand another one containing customers living in the USA."),(0,r.kt)("h2",{id:"templated-job"},"Templated Job"),(0,r.kt)("p",null,"Starlake Transforms support Jinja2 templating inside SQL requests."),(0,r.kt)("p",null,"We create a file ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata/jobs/bycountry.sql")," with the following content"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-SQL"},"select * from customers where lower(country) like lower('{{ p_country }}')\n")),(0,r.kt)("p",null,"The french customers will be stored in the table ",(0,r.kt)("inlineCode",{parentName:"p"},"cust_france")," and the american customers in the table ",(0,r.kt)("inlineCode",{parentName:"p"},"cust_usa"),".\nSQL file alone is not sufficient to be a Starlake Transform.\nIn order to be one, a YAML file must be created next to the SQL file and have the same name.\nTherefore we need to create the YAML file ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata/jobs/bycountry.comet.yml"),".\nThis file will instruct where the result of the SQL request will be stored."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'transform:\n  name: bycountry\n  views:\n    # The parquet file will be referenced as customers in the SQL request\n    customers: "FS:{{root_path}}/datasets/accepted/sales/customers"\n  tasks:\n    - domain: business\n      table: cust_{{ p_country }}\n      write: OVERWRITE\n      sink:\n        type: FS\n\n')),(0,r.kt)("p",null,"In this file, we instruct to read data from the dataset stored on the filesystem (location of the previously loaded data)\nand store it in a view named ",(0,r.kt)("inlineCode",{parentName:"p"},"customers"),". The key used inside ",(0,r.kt)("inlineCode",{parentName:"p"},"transform.views")," define the name that can be used in the query."),(0,r.kt)("p",null,"Even if we don't connect to any database, we can note here that we are expressing the transformation of our data in SQL\nby reading from a file stored on our machine."),(0,r.kt)("p",null,"From now on, we are ready to filter out users. Since the job is to filter on one country and store it to a dynamic destination based on the country name, we need to execute the job twice.\nOnce to create the french customers table and once to create the american customers."),(0,r.kt)("p",null,"The result will be stored on the filesystem (sink.type: FS) in the datasets/business/bycountry_usa and datasets/business/bycountry_usa\nfolders as parquet files."),(0,r.kt)(o.Z,{groupId:"customers",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"france",label:"French customers table",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ cd $HOME/myproject\n$ $HOME/starlake/starlake.sh transform --name bycountry --options p_country=France\n"))),(0,r.kt)(s.Z,{value:"usa",label:"American customers table",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ cd $HOME/myproject\n$ $HOME/starlake/starlake.sh transform --name bycountry --options p_country=USA\n")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--options")," allow to define variables that will be used for substitution and thus allowing a query to be parameterized and even a Transform!"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--name")," will match the transform file name and not its name.")),(0,r.kt)("h2",{id:"targeting-another-datawarehouse"},"Targeting another datawarehouse"),(0,r.kt)(o.Z,{groupId:"warehouses",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"bq",label:"BigQuery",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transform:\n  name: bycountry\n  engine: BigQuery            # We use BigQuery to execute the SQL request. We could have used SPARK.\n  tasks:\n    - domain: business\n      table: cust_{{ p_country }}\n      write: OVERWRITE\n      sink:\n        type: BigQuery        # We store the end result in BigQuery.\n"))),(0,r.kt)(s.Z,{value:"databricks",label:"Databricks",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transform:\n  name: bycountry_{{ p_country }}\n  engine: Spark\n  tasks:\n    - domain: business\n      table: cust_{{ p_country }}\n      write: OVERWRITE\n      sink:\n        type: DATABRICKS\n"))),(0,r.kt)(s.Z,{value:"hive",label:"Hive",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transform:\n  name: bycountry_{{ p_country }}\n  engine: Spark\n  tasks:\n    - domain: business\n      table: cust_{{ p_country }}\n      write: OVERWRITE\n      sink:\n        type: Hive\n"))),(0,r.kt)(s.Z,{value:"redshift",label:"Redshift",mdxType:"TabItem"},(0,r.kt)("p",null,"Amazon Redshift uses a JDBC URL and a specific format. We need to define our redshift connection in the metadata/application.conf file as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'connections {\n  Redshift {\n    format = "com.databricks.spark.redshift"\n    options = {\n      url: "jdbc:redshift://redshifthost:5439/database",\n      user: "username",\n      password: "pass",\n      tempdir: "s3n://path/for/temp/data",\n      aws_iam_role: "arn:aws:iam::123456789000:role/redshift_iam_role"\n    }\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transform:\n  name: bycountry_{{ p_country }}\n  engine: Redshift\n  tasks:\n    - domain: business\n      table: cust_{{ p_country }}\n      write: OVERWRITE\n      sink:\n        type: Redshift\n"))),(0,r.kt)(s.Z,{value:"snowflake",label:"Snowflake",mdxType:"TabItem"},(0,r.kt)("p",null,"Snowflake uses a JDBC URL and a specific format. We need to define our snowflake connection in the metadata/application.conf file as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'\nconnections {\n  Snowflake {\n    format = "net.snowflake.spark.snowflake"\n    options = {\n      url: "jdbc:snowflake://myorganization-myaccount.snowflakecomputing.com/",\n      user: "username",\n      password: "pass",\n      account: "myorganization-myaccount",\n      warehouse: "mywh",\n      autopushdown: "off" # to pushdown set to \'on\'\n      db: "mydb",\n      schema: "public"\n    }\n  }\n}\n\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transform:\n  name: bycountry\n  engine: Snowflake\n  tasks:\n    - domain: business\n      table: cust_{{ p_country }}\n      write: OVERWRITE\n      sink:\n        type: Snowflake\n")))))}f.isMDXComponent=!0}}]);