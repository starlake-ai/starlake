name: Devshot
# This workflow is triggered on demand only. Publish the snapshot, trigger the API workflow and build the docker image.
on:
  workflow_dispatch:
jobs:
  snapshot:
    runs-on: ubuntu-latest
    steps:
      - name: Slack event
        if: always() # Pick up events even if the job fails or is canceled.
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_STARLAKE_CORE_WEBHOOK_URL }} # required
      - name: Env
        run: |
          echo "SONATYPE_USERNAME=${{ secrets.SONATYPE_USERNAME }}" >>  $GITHUB_ENV
          echo "SONATYPE_PASSWORD=${{ secrets.SONATYPE_PASSWORD }}" >>  $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >>  $GITHUB_ENV
      - uses: smartsquaregmbh/delete-old-packages@v0.3.1
        with:
          version-pattern: "^\\d+\\.\\d+\\.\\d+-SNAPSHOT$" # Remove all previous SNAPSHOT versions
          keep: 0
          names: |
            ai.starlake.starlake-core_2.13
      - uses: actions/checkout@v4
      - name: Set up Zulu 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'
      - name: Setup sbt launcher
        uses: sbt/setup-sbt@v1
      - name: Publish Snapshot on Sonatype Spark 3 for scala 2.13
        run: SBT_OPTS="-Xss4M -Xms1g -Xmx4g" RELEASE_SONATYPE=true GITHUB_TOKEN=${{ env.GITHUB_TOKEN }} SONATYPE_USERNAME=${{ env.SONATYPE_USERNAME }} SONATYPE_PASSWORD=${{ env.SONATYPE_PASSWORD }} sbt ++2.13 publish
      - name: trigger-starlake-api
        if: ${{ success() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.STARLAKE_API_TOKEN }} # Fine-grained GitHub PAT that was saved as repository secret
          script: |
            await github.rest.actions.createWorkflowDispatch({
            owner: 'starlake-ai',
            repo: 'starlake-api',
            workflow_id: 'docker-hub.yml',
            ref: 'main'})

  docker-hub:
    needs: snapshot
    name: Snapshot Docker Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        id: vcs
        uses: actions/checkout@v4
      - name: Setup sbt launcher
        uses: sbt/setup-sbt@v1

      - name: Env
        run: |
          cat .versions >> $GITHUB_ENV
          source .versions
          FIRST_LINE=$(head -n 1 version.sbt)
          SL_VERSION=$(echo "$FIRST_LINE" | sed -E 's/.*version := "([0-9]+\.[0-9]+\.?.*)"/\1/')
          echo "SL_VERSION=${SL_VERSION}" >> $GITHUB_ENV
          SL_MAJOR_MINOR_VERSION=$(echo "${SL_VERSION}" | cut -d'.' -f1-2)
          echo "SL_MAJOR_MINOR_VERSION=${SL_MAJOR_MINOR_VERSION}" >> $GITHUB_ENV
          REGISTRY_IMAGE=starlakeai/starlake
          echo "REGISTRY_IMAGE=${REGISTRY_IMAGE}" >> $GITHUB_ENV
          REGISTRY_IMAGE_LATEST=${REGISTRY_IMAGE}:${SL_VERSION:-latest}
          echo "REGISTRY_IMAGE_LATEST=${REGISTRY_IMAGE_LATEST}" >> $GITHUB_ENV
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> $GITHUB_ENV
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Prepare
        run: |
          ./scripts/docker-prepare.sh

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          labels: |
            org.opencontainers.image.vendor=starlakeai
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.title=starlakeai/starlake
            org.opencontainers.image.description="A declarative text based tool that enables analysts and engineers to extract, load, transform and orchestrate their data pipelines."
            org.opencontainers.image.url=https://starlake.ai
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
        #            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          context: "./distrib/docker"
          pull: true
          load: true
          tags: ${{ steps.meta.outputs.tags }},${{ env.REGISTRY_IMAGE_LATEST }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            VCS_REF=${{ steps.vcs.outputs.commit }}
            SL_VERSION=${{ env.SL_VERSION }}

      - name: Inspect image
        run: |
          docker image inspect --format='{{json .Config.Labels}}' ${{ env.REGISTRY_IMAGE_LATEST }}

      - name: Test
        run: |
          docker run --rm ${{ env.REGISTRY_IMAGE_LATEST }} help

      - name: Push image
        if: github.event_name != 'pull_request'
        id: push
        uses: docker/build-push-action@v6
        with:
          context: "./distrib/docker"
          platforms: ${{ env.PLATFORMS }}
          pull: true
          push: true
          provenance: mode=max
          tags: ${{ steps.meta.outputs.tags }},${{ env.REGISTRY_IMAGE_LATEST }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            VCS_REF=${{ steps.vcs.outputs.commit }}
            SL_VERSION=${{ env.SL_VERSION }}

      # - name: Generate artifact attestation
      #   if: github.event_name != 'pull_request'
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: ${{ env.REGISTRY_IMAGE }}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true
      #     github-token: ${{ env.GITHUB_TOKEN }}
